<DashboardPluginModel description="Requires&#x000A;- VIA - D3 Library&#x000A;- VIA - D3 Horizon Chart Library " name="VIA - Horizon Chart" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="Horizon Chart" private="false">
        <PropertyText>
          <![CDATA[[{
    "name" : "dimField",
    "label" : "Dimension Field",
    "type" : "field"
}, {
    "name" : "meaField",
    "label" : "Measure Field",
    "type" : "field"
}, {
    "name" : "dateField",
    "label" : "Date Field",
    "type" : "field"
}, {
    "name" : "baseline",
    "label" : "Baseline",
    "type" : "string"
}, {
    "name" : "chartColors",
    "label" : "Chart Colors",
    "type" : "string"
}, {
    "name" : "itemWidth",
    "label" : "Item Width",
    "type" : "string"
}, {
    "name" : "definedOrder",
    "label" : "Defined Order",
    "type" : "json"
}, {
    "name" : "tooltipField",
    "label" : "Tooltip Field",
    "type" : "field"
}, {
    "name": "autoVerticalScale",
    "label" : "Auto Vertical Scale",
    "type": "boolean"
}, {
    "name": "textWidth",
    "label" : "Text Width",
    "type": "number"
}, {
    "name": "minVerticalScale",
    "label" : "Min Vertical Scale",
    "type": "number"
}, {
    "name": "maxVerticalScale",
    "label": "Max Vertical Scale",
    "type": "number"
}, {
    "name": "showAxis",
    "label" : "Show X Axis",
    "type": "boolean",
    "value": true
}, {
    "name": "axisInterval",
    "label": "Axis Interval",
    "type": "number"
}, {
    "name": "axisIntervalUnit",
    "label": "Axis Interval Unit",
    "type": "enums",
    "options": [
        {
            "value": "ms",
            "label": "Milli Second"
        }, {
            "value": "s",
            "label": "Second"
        }, {
            "value": "min",
            "label": "Minute"
        }, {
            "value": "h",
            "label": "Hour"
        }, {
            "value": "d",
            "label": "Day"
        }, {
            "value": "m",
            "label": "Month"
        }, {
            "value": "y",
            "label": "Year"
        }
    ]
}]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        parseConfig : function() {
            this._tooltipField = this.initialConfig.properties.tooltipField ? this.initialConfig.properties.tooltipField.split(",") : null;
            this._dimField     = this.initialConfig.properties.dimField;
            this._measField    = this.initialConfig.properties.meaField;
            this._dateField    = this.initialConfig.properties.dateField;
            this._baseline     = this.initialConfig.properties.baseline == null
                               ?  0
                               : Number(this.initialConfig.properties.baseline);
            this._definedOrder = this.initialConfig.properties.definedOrder;
            if (this._definedOrder != null && typeof this._definedOrder == "string") {
                this._definedOrder = JSON.parse(this._definedOrder);
            }
            this._chartColors  = this.initialConfig.properties.chartColors
                               ? this.initialConfig.properties.chartColors.split(",")
                               : ["#148ac4", "#43a1d0", "#89c4e1", "#d0e8f3", "#f6dddd", "#e8aaaa", "#dd8080", "#d25555"];
            this._itemWidth    = this.initialConfig.properties.itemWidth;
            this._autoVerticalScale = this.initialConfig.properties.autoVerticalScale;
            this._textWidth = Number(this.initialConfig.properties.textWidth);
            if (isNaN(this._textWidth)) {
                this._textWidth = 150;
            }
            this._minVerticalScale = Number(this.initialConfig.properties.minVerticalScale);
            this._maxVerticalScale = Number(this.initialConfig.properties.maxVerticalScale);
            
            this._showAxis = this.initialConfig.properties.showAxis == undefined ? true : this.initialConfig.properties.showAxis;
            this._axisInterval = Number(this.initialConfig.properties.axisInterval);
            if (isNaN(this._axisInterval)) this._axisInterval = 0;
            this._axisIntervalUnit = this.initialConfig.properties.axisIntervalUnit || "h";
        },
        
        _loadRequiredLibs : function(callback) {
            var me = this;
            require(["/vitria-oi/rest/app/dbp/user/via_common/dbpm/VIA - D3 Library?op=vt:dbp:resource:v4.10.0"], function (d3) {
                me._d3 = d3;
                require(["/vitria-oi/rest/app/dbp/user/via_common/dbpm/VIA - D3 Horizon Chart Library?op=vt:dbp:resource:v0.0.6"], function (horizonChart) {
                    me._horizonChart = horizonChart.horizonChart;
                    callback();
                });
            });
        },
        
        parseData : function(dataIn_){
            var me = this;
            var d3 = this._d3;
            var dimField  = this._dimField;
            var measField = this._measField;
            var timeDim   = this._dateField;
            var baseline  = this._baseline;
            var definedOrder = this._definedOrder;

            var processedData = [];
            var nested_data = d3.nest()
                .key(function(d) { return d[dimField]; })
                .sortValues(function(a,b) {
                    var ats = (new Date(a[timeDim])).getTime();
                    var bts = (new Date(b[timeDim])).getTime();
                    if (ats < bts) {
                        return -1;
                    } else if (ats == bts) {
                        return 0;
                    } else {
                        return 1;
                    }
                })
                .entries(dataIn_);
        
            nested_data.forEach(function(d){
                var arrIn       = d['values'];
                var compVals    = [];
                var year        = [];
                var month       = [];
                var dom         = [];
                var hod         = [];
                var obj         = {};
                var sdatas = [];
                
                obj['key']  = d['key'];
                arrIn.forEach(function(item){
                    var comp = 0;
                    var bl = parseFloat(baseline);
                    var dataMeasure = 1;
                    
                    if( !isNaN(Number(item[measField])) ){
                        dataMeasure = item[measField];
                    }
                        
                    if( !isNaN(bl) ) {
                        comp = dataMeasure - baseline;
                        if( !Number.isFinite(comp) ){
                            comp = 0;
                        }
                    
                        compVals.push( comp );
                    } else {
                        comp = dataMeasure / item[baseline];
                        if( !Number.isFinite(comp) ){
                            comp = 0;
                        }
                        compVals.push( comp );
                    }
                    sdatas.push(item);
                });
        
                obj['values']   = compVals;
                obj['count']    = compVals.length;
                obj['sdata']    =  sdatas;
                
                if (me._autoVerticalScale == true) {
                    if (me._minVerticalScale == undefined || isNaN(me._minVerticalScale)) {
                        me._minVerticalScale = Math.min.apply(null, compVals);
                    } else {
                        me._minVerticalScale = Math.min(me._minVerticalScale, Math.min.apply(null, compVals));
                    }
                    
                    if (me._maxVerticalScale == undefined || isNaN(me._maxVerticalScale)) {
                        me._maxVerticalScale = Math.max.apply(null, compVals);
                    } else {
                        me._maxVerticalScale = Math.max(me._maxVerticalScale, Math.max.apply(null, compVals));
                    }
                } 
                processedData.push(obj);
            
            });
        
            var sortedData = [];
            if( !definedOrder || definedOrder == null || definedOrder.length < 1){
                sortedData = processedData.sort(function(a,b){ return d3.ascending( a['key'], b['key'] ) }) ;
            } else {
                
                definedOrder.forEach(function(key){
                    processedData.forEach(function(obj){
                        if(obj['key'] == key){
                            sortedData.push(obj);
                        }
        
                    });
                });
                
                
            }
            this.constructChart( sortedData );
        },
        
        constructChart : function(_data){
            var d3 = this._d3;
            var me = this;
            var horizonChart = this._horizonChart;
            var measField = this._measField;
            var chartColors = this._chartColors;
            var itemWidth = this._itemWidth;
            var upperThreshold;
            var textWidth = 150;
            if (this._textWidth < 1) {
                textWidth = this.vtWidth * this._textWidth;
            } else {
                textWidth = this._textWidth;
            }
            var chartWidth = this.vtWidth - textWidth - 5;
            domStyle.set(this.div, "width", (this.vtWidth) + "px");

            //draw axis ticks
            if (this._showAxis == true) {
                d3.select(this.ticksDiv).style("display", "");
                this._drawAxisTicks(_data, textWidth, chartWidth);
            } else {
                d3.select(this.ticksDiv).style("display", "none");
            }

            var oldSVG = d3.select(this.div).select("div");
            oldSVG.remove();
            oldSVG = null;
            AppUtil.removeAllChildrenOf(this.div);
            
            var maxChartWidth = chartWidth;
            d3.select(this.div).selectAll('.horizon')
                .data(_data)
                .enter()
                .append('div')
                .attr('class', 'horizon')
                .each(function(d){
                    var stepSize = ( itemWidth ) ? itemWidth : Math.round(chartWidth / d['values'].length) ;
                    if( stepSize * d['values'].length > chartWidth ) stepSize-- ;
                    if( stepSize <= 2 ) stepSize = 2;

                    var w = d['values'].length * stepSize;
                    if (maxChartWidth < w) maxChartWidth = w;
                    
                    var hc = 
                    horizonChart(d3, {
                            minVerticalScale: me._minVerticalScale,
                            maxVerticalScale: me._maxVerticalScale
                        })
                        .titleWidth(textWidth - 20)
                        .title(d['key'])
                        .height(30)
                        .colors(chartColors)
                        .step(stepSize);
                        
                        hc.call(this, d['values']);
                        
                        hc.canvas().on("mousemove", function(d){
                            var p = d3.mouse(this);
                            var event = d3.event;
                            var dataIdx     = Math.floor(p[0] / stepSize);
                            me._onItemMouseOver(d['sdata'][dataIdx], event, measField);
                                                       
                      });
                      
                      hc.canvas().on("mouseout", function(d){
                           me._onItemMouseOut();
                      });
                      
                      hc.canvas().on("click", function(d){
                           if (me._selected != null && me._selected.canvas != this) {
                               domStyle.set(me._selected.canvas.nextElementSibling, "font-weight", "normal");
                           }
                           var p = d3.mouse(this);
                           var event = d3.event;
                           var dataIdx = Math.floor(p[0] / stepSize)
                           var item = lang.clone(d['sdata'][dataIdx]);
                           if(item){
                                item["__FIELD__"] = measField;
                                item["__ITEM__"] = d;
                           }
                           me._onUpdateSelection([item]);
                           me._selected = {canvas:this, data:d, dataIdx:dataIdx}
                           domStyle.set(me._selected.canvas.nextElementSibling, "font-weight", "bold");
                      });
                      
                      hc.canvas().on("dblclick", function(d){
                           var p = d3.mouse(this);
                           var event = d3.event;
                           var dataIdx = Math.floor(p[0] / stepSize)
                           me._onUpdateUIEvent("dblclick", event, d, dataIdx, measField);
                           me._onDrilldownSelection(d, dataIdx, measField);
                      });
                
                });
                
            this._afterGenerateChart(_data, measField);
            
            if (maxChartWidth > chartWidth) {
                domStyle.set(this.div, "width", (maxChartWidth + textWidth + 5) + "px");
            }
        },
        
        _drawAxisTicks: function (_data, textWidth, chartWidth) {
            var d3 = this._d3;
            var horizonChart = this._horizonChart;
            var timeDim   = this._dateField;
            var itemWidth = this._itemWidth;
            AppUtil.removeAllChildrenOf(this.ticksDiv);
            if (_data == null || _data.length == 0) return;
            var data = _data[0];
            var sdata = data.sdata;
            var stepSize = ( itemWidth ) ? itemWidth : Math.round(chartWidth / data['values'].length) ;
            if( stepSize * data['values'].length > chartWidth ) stepSize-- ;
            if( stepSize <= 2 ) stepSize = 2;
            
            var w = data['values'].length * stepSize;
            var minDate = new Date(sdata[0][timeDim]);
            var maxDate = new Date(sdata[sdata.length - 1][timeDim]);
            
            var format = "%Y";
            var x = d3.scaleTime()
                .domain([minDate, maxDate])
                .range([0, w]);
            var xAxis = d3.axisBottom(x)
                .tickSize(6, 0);
            if (this._axisInterval <= 0) {
                var tickCount = Math.max(Math.floor(w/60), 1);
                var diff = (maxDate.getTime() - minDate.getTime())/(tickCount * 1000) ;
                if (diff > 24 * 60 * 60 * 365) {
                    format = "%Y";
                } else if (diff > 24 * 60 * 60 * 30 * 12) {
                    format = "%y-%m";
                } else if (diff > 24 * 60 * 60) {
                    format = "%m-%d";
                } else {
                    format = "%H:%M";
                }
                xAxis.ticks(tickCount)
                    .tickFormat(d3.timeFormat(format));
            } else {
                if (this._axisIntervalUnit == "ms") {
                    format = ":%S.%L";
                    xAxis.ticks(d3.timeMillisecond.every(this._axisInterval));
                } else if (this._axisIntervalUnit == "s") {
                    format = "%H:%M %S";
                    xAxis.ticks(d3.timeSecond.every(this._axisInterval));
                } else if (this._axisIntervalUnit == "min") {
                    format = "%H:%M";
                    xAxis.ticks(d3.timeMinute.every(this._axisInterval));
                } else if (this._axisIntervalUnit == "h") {
                    format = "%H:%M";
                    xAxis.ticks(d3.timeHour.every(this._axisInterval));
                } else if (this._axisIntervalUnit == "d") {
                    format = "%m-%d";
                    xAxis.ticks(d3.timeDay.every(this._axisInterval));
                } else if (this._axisIntervalUnit == "m") {
                    format = "%y-%m";
                    xAxis.ticks(d3.timeMonth.every(this._axisInterval));
                } else if (this._axisIntervalUnit == "y") {
                    format = "%Y";
                    xAxis.ticks(d3.timeYear.every(this._axisInterval));
                }
                xAxis.tickFormat(d3.timeFormat(format));
            }
            var svg = d3.select(this.ticksDiv).append("svg")
                .style("position", "relative")
                .style("left", (textWidth - 30) + "px")
                .attr("width", w + 30)
                .attr("height", 30);
            var g = svg.append("g")
                .attr("width", w)
                .attr("class", "axis")
                .attr("transform", "translate(30," + 10 + ")")
                .call(xAxis);
        },
        
         _afterGenerateChart : function(dataArr, measField){
            if (this._selected && this._selected.data){
                var newItem = null;
                for (var i=0; i< dataArr.length; i++){
                    if (dataArr[i].key == this._selected.data.key){
                        newItem = dataArr[i]['sdata'][this._selected.dataIdx];
                        break;
                    }
                }
                if (newItem){
                    if (WidgetUtil.sameRecord([newItem], [this._selected.data['sdata'][this._selected.dataIdx]])){
                        
                    }else{
                        var sel = lang.clone(newItem);
                        if(sel ){
                            sel["__FIELD__"] = measField;
                        }
                        this._onUpdateSelection([sel]);
                    }
                }else{
                    this._onUpdateSelection([]);
                }
            }
        },  
        
        _onUpdateSelection : function(selection) {
            this.renderer.updateSelection(selection);
        },

        _onDrilldownSelection : function(data, index, measField) {
            var item = lang.clone(data['sdata'][index]);
            if (item) {
                item["__FIELD__"] = measField;
                item["__ITEM__"] = data;
            }
            this.renderer.drilldownOnSelection(this.renderer.model, [item]);
        },

        _onUpdateUIEvent : function(type, event, data, index, measField) {
            var item = lang.clone(data['sdata'][index]);
            if (item) {
                item["__TYPE__"] = type;
                item["__EVENT__"] = JSON.parse(JSON.stringify(event));
                item["__FIELD__"] = measField;
                item["__ITEM__"] = data;
            }
            this.renderer.updateUIEvent([item]);
        },

        _onItemMouseOver : function(item, evt, measField){
            if (this._lastHoverItem != item){
                this._lastHoverItem = item
                this._showTooltip(item, evt);
                
                var me = this;
                if (this._hoverTimeout)
                    window.clearTimeout(this._hoverTimeout);
                this._hoverTimeout = window.setTimeout(function() {
                    if (me._lastHoverItem == item) {
                        var sitem = lang.clone(item);
                        if(sitem){
                            sitem["__FIELD__"] = measField;
                            sitem["__ITEM__"] = item;
                        }
                        me.renderer.showHoverDetailOnSelection(me.renderer.model, [sitem], evt.target);
                    }
                }, this.initialConfig.hoverDelay);
            }
        },
        
        _onItemMouseOut : function(){
            if (this._hoverTimeout)
                window.clearTimeout(this._hoverTimeout);
            this._lastHoverItem = null;
            if (this._customTooltip) {
                this._customTooltip.hide();
            }
            this.renderer.hideHoverDetail();
        },
        
        _showTooltip : function(item, e){
            require(["af/components/charts/action/CustomTooltip", "widgetcore/renderers/d3/mixins/D3TooltipWidget"], lang.hitch(this, function(CustomTooltip, ChartTooltipWidget) {
                if (!this._customTooltip) {
                    this._customTooltip = new CustomTooltip();
                    this._customTooltip.startup();
                    domStyle.set(this._customTooltip.domNode, {
                        zIndex: 1000
                    });
                }
                
                if (!this._chartTooltipWidget)
                    this._chartTooltipWidget = new ChartTooltipWidget();
                
                this._customTooltip.show({x: 10000, y: 10000}, this._chartTooltipWidget.domNode);
                if (this._chartTooltipWidget) {
                    this._updateTooltip(item);
                    var marginBox = domGeom.getMarginBox(this._chartTooltipWidget.domNode);
                    var rendererBox = domGeom.position(this.div);
                    var x = 0;
                    var y = 0;
                    if (e.pageX + 25 + parseInt(marginBox.w) >= rendererBox.x +rendererBox.w) {
                        x = e.pageX - 25 - parseInt(marginBox.w);
                    } else if (e.pageX + 25 + parseInt(marginBox.w) <= rendererBox.x + rendererBox.w) {
                        x = e.pageX + 25;
                    } else {
                        x = rendererBox.x + 0.5 * (rendererBox.w - marginBox.w);
                    }
                    
                    if (e.pageY - 20 - parseInt(marginBox.h) >= rendererBox.y) {
                        y = e.pageY - 20 - parseInt(marginBox.h);
                    } else if(e.pageY + 20 + parseInt(marginBox.h) <= rendererBox.y + rendererBox.h){
                        y = e.pageY + 20;
                    } else {
                        y = rendererBox.y + 0.5 * (rendererBox.h - marginBox.h);
                    }
                    
                    this._customTooltip.show({
                        x: x,
                        y: y
                    }, this._chartTooltipWidget.domNode);
                }
            }));
        },
        
        _updateTooltip : function(d){
            var info = [];  
            if (d != null) {
                if(this._dimField)
                    info.push({label:this.renderer._getFieldLabel(this._dimField), val:d[this._dimField]});
                if(this._measField)  
                    info.push({label:this.renderer._getFieldLabel(this._measField), val:d[this._measField]});
                if(this._dateField)
                    info.push({label:this.renderer._getFieldLabel(this._dateField), val:d[this._dateField]});
                
                if(this._tooltipField){
                    for (var i=0; i<this._tooltipField.length; i++){
                        info.push({label:this.renderer._getFieldLabel(this._tooltipField[i]), val:d[this._tooltipField[i]]});
                    }
                }
            }
            if (this._chartTooltipWidget){
                var dom = this._chartTooltipWidget.domNode;
                var tb = dom.children[0];
                if (tb){
                    AppUtil.removeAllChildrenOf(tb);
                    for (var i=0; i<info.length; i++){
                        var tr = domConstruct.create('tr');
                        var tdl = domConstruct.create('td', {'style': 'text-align: right;white-space: nowrap;'});
                        tdl.innerHTML = AppUtil.escapeHTML(info[i].label);
                        tr.appendChild(tdl);
                        var tdr = domConstruct.create('td', {'style': 'text-align: left;white-space: nowrap; padding-left: 10px;'});
                        tdr.innerHTML = AppUtil.escapeHTML(info[i].val);
                        tr.appendChild(tdr);
                        tb.appendChild(tr);
                    }
                }
            }
        },

        _useDummyData : function() {
            if (this.controller.initialConfig.appId == "dbp") {
                // in Dashboard Plugin app... so either modeling preview or summary preview
                return true;
            }
            if (this.controller.initialConfig.appId == "ax" && this.controller.mode == "edit.model") {
                // in dashboard builder modeling context
                return true;
            }
            return false;
        },

        _getDummyData : function(callback) {
            var result = [];
            var uri = this.properties._model.substring(0, this.properties._model.lastIndexOf("/"));
            var url = "/vitria-oi/rest" + uri + "?op=vt:dbp:resource:";
            addToResult(result, url, "GOOG", function() {
                addToResult(result, url, "AAPL", function() {
                    addToResult(result, url, "MSFT", function() {
                        callback(result);
                    });
                });
            });
        },]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[
            domStyle.set(this.domNode, {
                'overflow': 'auto'
            });
            this.parseConfig();]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[
            this._result = this.renderer.result;
            if (this._horizonChart && this._result) {
                this.parseData(this._result);
            }]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    
    function addToResult(result, url, stock, callback)
    {
        d3.csv(url + stock, function(error, csv) {
            if (error) throw error;
            for (var i=0; i<10; i++) {
                array.forEach(csv, function(row) {
                    row = lang.clone(row);
                    row["Date"] = Date.parse(row["Date"]);
                    row["Open"] = Number(row["Open"]);
                    row["Stock"] = stock + "0" + i;
                    result.push(row);
                });
            }
            callback();
        });
    }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            if (this._useDummyData()) {
                // development and modeling use-case
                // need dummy data
                var self = this;
                this._getDummyData(function(data) {
                    self._dimField = "Stock";
                    self._measField = "Open";
                    self._dateField = "Date";
                    self.renderer.result = data;
                    self._loadRequiredLibs(lang.hitch(self, "doRefresh"));
                });
            }
            else {
                this._loadRequiredLibs(lang.hitch(this, "doRefresh"));
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            // because resizing is expensive, check that it is truly necessary
            if (this.vtWidth == w && this.vtHeight == h) return;
            
            this.vtWidth = w;
            this.vtHeight = h;
            domStyle.set(this.domNode, {
                "width" : w + "px",
                "height" : h + "px",
            });
            if (this._horizonChart && this._result) {
                this.parseData(this._result);
            }]]>
        </CodeText>
        <CodeText segment="#postMixInProperties">
          <![CDATA[            this._textWidth = Number(this.initialConfig.properties.textWidth);
            if (isNaN(this._textWidth)) {
                this._textWidth = 150;
            }
            this._textRealyWidth = this._textWidth - 20;]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (evt == null || evt.horizon == null) return;
            
            var changed = false;
            if (evt.horizon.hasOwnProperty("autoVerticalScale")) {
                this._minVerticalScale = Number(this.initialConfig.properties.minVerticalScale);
                this._maxVerticalScale = Number(this.initialConfig.properties.maxVerticalScale);
                this._autoVerticalScale = evt.horizon.autoVerticalScale;
                changed = true;
            }
            
            if (evt.horizon.hasOwnProperty("minVerticalScale")) {
                this._minVerticalScale = evt.horizon.minVerticalScale;
                changed = true;
            }
            
            if (evt.horizon.hasOwnProperty("maxVerticalScale")) {
                this._maxVerticalScale = evt.horizon.maxVerticalScale;
                changed = true;
            }
            
            if (evt.horizon.hasOwnProperty("axisInterval")) {
                this._axisInterval = evt.horizon.axisInterval;
                changed = true;
            }
            
            if (evt.horizon.hasOwnProperty("axisIntervalUnit")) {
                this._axisIntervalUnit = evt.horizon.axisIntervalUnit;
                changed = true;
            }
            
            if (evt.horizon.hasOwnProperty("definedOrder")) {
                this._definedOrder = evt.horizon.definedOrder;
                if (this._definedOrder != null && typeof this._definedOrder == "string") {
                    this._definedOrder = JSON.parse(this._definedOrder);
                }
                changed = true;
            }
            
            if (changed) {
                this.doRefresh();
            }]]>
        </CodeText>
        <CodeText segment="undefined">
          <![CDATA[]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="horizon-chart-div" style="width:100%;height:100%;">
    <style>
        .horizonChartTicks {
            box-sizing: border-box;
            display: block;
            width: 100%;
            height: 30px;
        }
        
        .horizonChartTicks .axis text {
            font: 10px sans-serif;
            color: rgba(0,0,0,.1);
        }
        
        .horizonChartTicks .axis line,
        .horizonChartTicks .axis path {
            fill: none;
            stroke: rgba(0,0,0,.1);
            shape-rendering: crispEdges;
        }
        
        .horizonChart .horizon {
            // border-top: solid 1px  rgba(0,0,0,.3);
            border-bottom: solid 1px rgba(0,0,0,.1);
            overflow: hidden;
            position: relative;
        }
        
        .horizonChart .horizon + .horizon {
            border-top: none;
        }
        
        .horizonChart .horizon canvas {
            display: block;
            image-rendering: auto;
            position: relative;
        }
            
        .horizonChart .horizon .title,
        .horizonChart .horizon .value {
            bottom: 0;
            left: 0px !important;
            line-height: unset;
            margin: 0 6px;
            position: absolute;
            width: ${_textRealyWidth}px;
            text-align: right;
            font-family: sans-serif;
            font-size: 14px;
            color: #42494c;
            text-shadow: 1px 1px 0px rgba(0,0,0,0);
            white-space: nowrap;
        }
        
        .horizonChart .horizon .title {
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .horizonChart .horizon .value {
            right: 0;
        }
    </style>
    <div data-dojo-attach-point='ticksDiv' class='horizonChartTicks'>
    </div>
    <div data-dojo-attach-point='div' class='horizonChart'>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
    </Functions>
    <Services>
    </Services>
    <Resources>
      <Resource uuid="477da52e-f1fe-40bb-81d5-b0c86e25c40e" name="AAPL" type="text/plain" size="59120" private="false">
        <Description>
          <![CDATA[Lorem ipsum]]>
        </Description>
      </Resource>
      <Resource uuid="40d4a671-7037-4ed5-8fae-05ac375493b6" name="GOOG" type="text/plain" size="58273" private="false">
        <Description>
          <![CDATA[Lorem ipsum]]>
        </Description>
      </Resource>
      <Resource uuid="5028dceb-4580-4661-846e-04a3ffa55834" name="MSFT" type="text/plain" size="54490" private="false">
        <Description>
          <![CDATA[Lorem ipsum]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>