<DashboardPluginModel description="D3 based Whisker Chart&#x000A;Requires&#x000A;- VIA - D3 Library&#x000A;- VIA - Plotly Library" name="VIA - Whisker Chart" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="Whisker Chart" private="false">
        <PropertyText>
          <![CDATA[[{
    "name" : "dimField",
    "label" : "Dimension Field",
    "type" : "field"
}, {
    "name" : "meaField",
    "label" : "Measure Field",
    "type" : "field"
}, {
    "name" : "boxpoints",
    "label" : "Box Points",
    "type" : "string"
}, {
    "name" : "startColor",
    "label" : "Start Color",
    "type" : "color"
}, {
    "name" : "endColor",
    "label" : "End Color",
    "type" : "color"
}, {
    "name" : "orientVert",
    "label" : "Vertical Orientation",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "fillOpacity",
    "label" : "Fill Opacity",
    "type" : "number",
    "value" : 0.5,
    "min" : 0,
    "max" : 1,
    "step" : 0.1,
    "places" : 1
}, {
    "name" : "markerSize",
    "label" : "Marker Size",
    "type" : "number",
    "value" : 6,
    "min" : 1,
    "max" : 20,
    "step" : 1,
    "places" : 0
}, {
    "name" : "valueRange",
    "label" : "Value Range",
    "type" : "string"
}, {
    "name" : "dimSort",
    "label" : "Sort Dimension",
    "type" : "enums",
    "options" : [
        {"value":"none", "label":"None"},
        {"value":"asc", "label":"Ascending"},
        {"value":"desc", "label":"Descending"}
    ],
    "value" : "none"
}]]]>
        </PropertyText>
        <CodeText segment="#buildRendering">
          <![CDATA[
            this.parseConfig();]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        parseConfig : function(){
            this._dimField    = this.initialConfig.properties.dimField;
            this._measField   = this.initialConfig.properties.meaField;
            this._boxpoints   = this.initialConfig.properties.boxpoints || 'suspectedoutliers';
            this._startColor  = this.initialConfig.properties.startColor || '#666666';
            this._endColor    = this.initialConfig.properties.endColor || null;
            this._orientVert  = this.initialConfig.properties.orientVert == "true"? true : false;
            this._fillOpacity = this.initialConfig.properties.fillOpacity == null ?  .5 : Number(this.initialConfig.properties.fillOpacity);
            this._markerSize  = this.initialConfig.properties.markerSize == null ?  6 : Number(this.initialConfig.properties.markerSize);
            this._valueRange  = this.initialConfig.properties.valueRange ? this.initialConfig.properties.valueRange.split(",") : [];
            this._dimSort     = this.initialConfig.properties.dimSort || "none";
        },
        
        _loadRequiredLibs : function(callback) {

            // var PLOTLY_LIBRARY_PATH = AppUtil.getItemURL("/app/dbp/user/via_common/dbpm/VIA%20-%20Plotly%20Library")+"?op=vt:dbp:resource:v1.47.4.modified";
            var PLOTLY_LIBRARY_PATH = "scripts/plotly/plotly-1.47.4.min";

            var me = this;
            require([AppUtil.getItemURL("/app/dbp/user/via_common/dbpm/VIA - D3 Library")+"?op=vt:dbp:resource:v4.10.0"], function(d3) {
                me._d3 = d3;
                require([PLOTLY_LIBRARY_PATH], function(plotly) {
                    me._plotly = plotly;
                    console.debug("_loadRequiredLibs done");
                    callback();
                });
            });
        },
        
        parseData : function(dataIn_){
            var d3 = this._d3;
            var keyDim          = this._dimField;
            var keyMeasure      = this._measField;
            
            var boxpoints       = this._boxpoints;
            var startColor      = this._startColor;
            var endColor        = this._endColor;
            var orientVert      = this._orientVert;
            var fillOpacity     = this._fillOpacity;
            var markerSize      = this._markerSize;
            var valueRange      = this._valueRange;
            
            var defaultColor    = '#00FF66'; 
            
            var boxCount        = -1;
            var boxColor        = [];
            var markerSymbol    = 'circle-open';
            var outlierSpread   = 0; // 0-1
            var allColors       ;
            var dataArr         = [];
            var yValues         = [];
            
            var cleanupTraces = false; 
            
            processedData = [];
        
            var nested_data = d3.nest()
                .key(function(d) { return d[keyDim]; })
                .entries(dataIn_);
            
            var procesedData = [];
            
            nested_data.sort(function (a, b){
                if (Number(a.key) > Number(b.key))
                    return 1;
                if (Number(a.key) < Number(b.key))
                    return -1;
                return 0;
            })
            boxCount    = nested_data.length;       
            allColors   = this.colorArray( startColor, endColor , boxCount);
            
            for( var i=0; i < boxCount; i++ ){
                var arr     = [];
                var objArr  = nested_data[i].values;
                for( var j=0; j < objArr.length; j++ ){
                    var obj = objArr[j];
                    arr.push(obj[keyMeasure]);
                    }
                processedData.push({ key: nested_data[i]['key'], data: arr, sdata:objArr});
            }
            this._processedData = processedData;
            this._allColors = allColors;
            this.generateChart(processedData, allColors);
        },
        
        generateChart : function(dataValues, colorList){
            console.debug("generateChart");
            var me = this;
            var d3 = this._d3;
            var Plotly = this._plotly;

            var keyDim          = this._dimField;
            var keyMeasure      = this._measField;
            
            var boxpoints       = this._boxpoints;
            var startColor      = this._startColor;
            var endColor        = this._endColor;
            var orientVert      = this._orientVert;
            var fillOpacity     = this._fillOpacity;
            var markerSize      = this._markerSize;
            var valueRange      = this._valueRange;

            var defaultColor    = '#00FF66'; 
            
            var boxCount        = -1;
            var boxColor        = [];
            var markerSymbol    = 'circle-open';
            var outlierSpread   = 0; 
            var dataArr         = [];
            var yValues         = [];
            
            var cleanupTraces = false; 
            var autorange = ( valueRange.length > 1 ) ? false : true;
            //Create Traces
            
            var oldSVG = d3.select(this.domNode).select("div");
            oldSVG.remove();
            oldSVG = null;
            AppUtil.removeAllChildrenOf(this.domNode);
            
            switch (this._dimSort) {
                case "none":
                    break;
                case "asc":
                    dataValues.sort(function(a,b) {
                        return a.key.localeCompare(b.key);
                    });
                    break;
                case "desc":
                    dataValues.sort(function(a,b) {
                        return b.key.localeCompare(a.key);
                    });
                    break;
            }
            for( var i = 0; i < dataValues.length;  i++ ){
                var fillColor = d3.color(colorList[i]);
                fillColor.opacity = fillOpacity;
                fillColor = fillColor.toString();
                  
              if(orientVert){
                var result = {
                    x: dataValues[i]['data'],
                    name: dataValues[i]['key'],
                    type:'box',
                    jitter: outlierSpread,
                    whiskerwidth: 0.4,
                    line:{color:colorList[i], width: 2},
                    fillcolor:fillColor,
                    marker:{
                        size: markerSize,
                        symbol: markerSymbol,
                        color: colorList[i],
                        line: {
                          outliercolor: colorList[i],
                          outlierwidth: .5
                        }
                    },
                    boxpoints: boxpoints
                };  
                  
                  
                    var layout = {
                      yaxis: {
                        title: me.renderer._getFieldLabel(keyDim),
                        showgrid: true,
                        showline: true,
                        linecolor: 'rgba(128,128,128,.3)',
                        linewidth: .25,
                        zeroline: false,
                        tickangle: 0,
                        dtick: 1,
                        showticklabels: true
                      },
                      xaxis: {  
                        title:  me.renderer._getFieldLabel(keyMeasure),
                        autorange: true,
                        showgrid: true,
                        showline: true,
                        linecolor: 'rgba(128,128,128,.3)',
                        linewidth: .25,
                        zeroline: true,
                        //dtick: 15,
                        gridcolor: 'rgba(0,0,0,.1)',
                        gridwidth: .25,
                        zerolinecolor: 'rgba(0,0,0,.3)',
                        zerolinewidth: .5,
                        tickangle: 45
                      },
                      paper_bgcolor: 'rgb(255,255,255)',
                      plot_bgcolor: 'rgba(233,233,233,0)',
                      showlegend:false,
                      margin: {
                            l: 60,
                            r: 0,
                            b: 60,
                            t: 0
                      }
                    };
      
                  layout.xaxis.autorange = autorange;    
                  if(!autorange) {
                    layout.xaxis.range = valueRange;    
                  }
                  
              } else {
                  var result = {
                    y: dataValues[i]['data'],
                    name: dataValues[i]['key'],
                    sdata:dataValues[i]['sdata'],
                    type:'box',
                    jitter: outlierSpread,
                    whiskerwidth: 0.4,
                    line:{color:colorList[i], width: 2},
                    fillcolor:fillColor,
                    marker:{
                        size: markerSize,
                        symbol: markerSymbol,
                        color: colorList[i],
                        line: {
                          outliercolor: colorList[i],
                          outlierwidth: .5
                        }
                    },
                    boxpoints: boxpoints
                };
                 
                  
                var layout = {
                      xaxis: {
                        title:  me.renderer._getFieldLabel(keyDim),
                        showgrid: true,
                        showline: true,
                        linecolor: 'rgba(128,128,128,.3)',
                        linewidth: .25,
                        zeroline: false,
                        tickangle: 45,
                        dtick: 1,
                        showticklabels: true
                      },
                      yaxis: {  
                        title:  me.renderer._getFieldLabel(keyMeasure),
                        autorange: true,
                        showgrid: true,
                        showline: true,
                        linecolor: 'rgba(128,128,128,.3)',
                        linewidth: .25,
                        zeroline: true,
                        //dtick: 15,
                        gridcolor: 'rgba(0,0,0,.1)',
                        gridwidth: .25,
                        zerolinecolor: 'rgba(0,0,0,.3)',
                        zerolinewidth: .5,
                        tickangle: 0
                      },
                      paper_bgcolor: 'rgb(255,255,255)',
                      plot_bgcolor: 'rgba(233,233,233,0)',
                      showlegend:false,
                      margin: {
                            l: 60,
                            r: 0,
                            b: 60,
                            t: 0
                      }
                    };  
                  
                  layout.yaxis.autorange = autorange;    
                  if(!autorange) {
                    layout.yaxis.range = valueRange;    
                  }
                  
                  
              }
                
              dataArr.push(result);
            }; 
            
            Plotly.newPlot(this.domNode, dataArr, layout);
            
            var lastClickData;
            this.domNode.on('plotly_doubleclick', function(data){
                data = lastClickData;
                if (data && data.points["0"] ){
                    var items = lang.clone(data.points["0"].data.sdata);
                    if(items && items[0]){
                        items[0]["__FIELD__"] = keyMeasure;
                        items[0]["__ITEM__"] = data.points["0"].data;
                    }
                    me.drillDownOnSelection(me.model, items);
                }
            });
            
            this.domNode.on('plotly_click', function(data){
                lastClickData = data;
                if (data && data.points["0"] ){
                    var items = lang.clone(data.points["0"].data.sdata);
                    if(items && items[0]){
                        items[0]["__FIELD__"] = keyMeasure;
                        items[0]["__ITEM__"] = data.points["0"].data;
                    }
                    me.updateSelection(items);
                }
                
                if (me._selected)
                    Plotly.restyle(me.div, {'line':{color: me._selected.color}}, [me._selected.tn]);
                
                var pn='',tn='',color="";
                for(var i=0; i < data.points.length; i++){
                    pn = data.points[i].pointNumber;
                    tn = data.points[i].curveNumber;
                    color = data.points[i].data.line.color;
                };
                me._selected = {tn:tn, color:color, data:data.points["0"].data};                
                var update = {'line':{color: '#89C4E1'}};
                Plotly.restyle(me.div, update, [tn]);
            
            });
            
            this.domNode.on('plotly_hover', function(data){
                if (me._hoverTimeout)
                    window.clearTimeout(me._hoverTimeout);
                me._hoverTimeout = window.setTimeout(function() {
                     if (data && data.points["0"] ){
                        var items = lang.clone(data.points["0"].data.sdata);
                        if(items && items[0]){
                            items[0]["__FIELD__"] = keyMeasure;
                            items[0]["__ITEM__"] = data.points["0"].data;
                        }
                        me.renderer.showHoverDetailOnSelection(me.renderer.model, items, data.event.target);
                    }
                }, me.initialConfig.hoverDelay);
                
            });
            
            this.domNode.on('plotly_unhover', function(data){
                if (me._hoverTimeout)
                    window.clearTimeout(me._hoverTimeout);
                me.renderer.hideHoverDetail();
            });
            
            
            this._afterGenerateChart(dataArr, keyMeasure, Plotly);
            
        },
        
        _afterGenerateChart : function(dataArr, keyMeasure, Plotly){
            if (this._selected && this._selected.data){
                var newItem = null;
                var newIdx = -1;
                for (var i=0; i< dataArr.length; i++){
                    if (dataArr[i].name == this._selected.data.name){
                        newItem = dataArr[i];
                        newIdx = i;
                        break;
                    }
                }
                if (newItem){
                    var update = {'line':{color: '#89C4E1'}};
                    Plotly.restyle(this.domNode, update, [newIdx]);
                    if (sameRecord(this._selected.data.sdata, newItem.sdata)){
                        
                    }else{
                        var sel = lang.clone(newItem.sdata);
                        if(sel && sel[0]){
                            sel[0]["__FIELD__"] = keyMeasure;
                        }
                        this.updateSelection(sel);
                    }
                }else{
                    this.updateSelection([]);
                }
            }
        },        
        
        colorArray : function(color1, color2, count){
            var d3 = this._d3;
            var interP  = d3.interpolateRgb(color1, color2);
            var colors  = [];
        
            for( var i=0; i < count; i++ ){
                var prop = i/count;
                var c = interP(prop);
                colors.push(c);
            }
        
            return colors;
        },
        
        _useDummyData : function() {
            if (this.controller.initialConfig.appId == "dbp") {
                // in Dashboard Plugin app... so either modeling preview or summary preview
                return true;
            }
            if (this.controller.initialConfig.appId == "ax" && this.controller.mode == "edit.model") {
                // in dashboard builder modeling context
                return true;
            }
            return false;
        },

        _getDummyData : function(callback) {
            var result = [];
            var uri = this.properties._model.substring(0, this.properties._model.lastIndexOf("/"));
            var url = "/vitria-oi/rest" + uri + "?op=vt:dbp:resource:";
            addToResult(result, url, "GOOG", function() {
                addToResult(result, url, "AAPL", function() {
                    addToResult(result, url, "MSFT", function() {
                        callback(result);
                    });
                });
            });
        },]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[
            this._result = this.renderer.result;
            if (this._plotly && this._result != null) {
                this.parseData(this._result);
            }]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function sameRecord(data1, data2)
    {
        if (!data1 && !data2)
            return true;
        if (!data1 || !data2)
            return false;
        if (data1.length != data2.length)
            return false;
        if (data1.length == 0)
            return true;
        if (data1.length == 1){
            var oj1 = data1[0];
            var oj2 = data2[0]
            for(var name in oj2){
                var val = oj2[name];
                if(oj1[name] !== val){
                    return false;
                }
            }
            return true;
        }
        for (var i=0; i<data1.length; i++){
            var oj1 = data1[i];
            var oj2 = data2[i];
            if (!sameObj(oj1, oj2))
                return false;
        }
        return true;
    }
    
    function addToResult(result, url, stock, callback)
    {
        d3.csv(url + stock, function(error, csv) {
            if (error) throw error;
            array.forEach(csv, function(row) {
                row["Date"] = Date.parse(row["Date"]);
                row["Open"] = Number(row["Open"]);
                row["Stock"] = stock;
                result.push(row);
            });
            callback();
        });
    }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            if (this._processedData != null && this._allColors != null) {
                this.generateChart(this._processedData, this._allColors);
            }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            if (this._useDummyData()) {
                // development and modeling use-case
                // need dummy data
                var self = this;
                this._getDummyData(function(data) {
                    self._dimField = "Stock";
                    self._measField = "Open";
                    self.renderer.result = data;
                    self._loadRequiredLibs(lang.hitch(self, "doRefresh"));
                });
            }
            else {
                this._loadRequiredLibs(lang.hitch(this, "doRefresh"));
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
    </Functions>
    <Services>
    </Services>
    <Resources>
      <Resource uuid="ecc156bb-4089-42b6-8124-b789c867ca0d" name="AAPL" type="text/plain" size="59120" private="false">
        <Description>
          <![CDATA[Apple stock values as sample data]]>
        </Description>
      </Resource>
      <Resource uuid="dc2427d2-4fd4-468b-8a5e-45298adc0e43" name="GOOG" type="text/plain" size="58273" private="false">
        <Description>
          <![CDATA[Google stock values as sample data]]>
        </Description>
      </Resource>
      <Resource uuid="1dd4f897-9347-4202-811d-fd53ddca75c4" name="MSFT" type="text/plain" size="54490" private="false">
        <Description>
          <![CDATA[Microsoft stock values as sample data]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>