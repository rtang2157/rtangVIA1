<DashboardPluginModel description="" name="VIA - Calendar View" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="Calendar View" private="false">
        <PropertyText>
          <![CDATA[[{
    "name" : "cellSize",
    "label" : "Cell Size",
    "type" : "enums",
    "value" : "auto",
    "options" : [
        {"value":"auto", "label":"Auto"},
        {"value":"5", "label":"5px"},
        {"value":"10", "label":"10px"},
        {"value":"15", "label":"15px"},
        {"value":"20", "label":"20px"},
        {"value":"25", "label":"25px"}
    ]
}]]]>
        </PropertyText>
        <CodeText segment="#buildRendering">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _getCellSize : function() {
            var cellSize = this.initialConfig.properties.cellSize;
            if (cellSize == null || cellSize == "auto") {
                var box = domGeom.getContentBox(this.domNode);
                if (isNaN(box.w) || box.w == 0) {
                    return 10;
                }
                else {
                    return Math.floor(box.w / 56);
                }
            }
            else {
                return Number(cellSize);
            }
        },

        _createCalendar : function() {
            var cellSize = this._getCellSize();
            
            function pathMonth(t0)
            {
              var t1 = new Date(t0.getFullYear(), t0.getMonth() + 1, 0),
                  d0 = t0.getDay(), w0 = d3.time.weekOfYear(t0),
                  d1 = t1.getDay(), w1 = d3.time.weekOfYear(t1);
              return "M" + (w0 + 1) * cellSize + "," + d0 * cellSize
                  + "H" + w0 * cellSize + "V" + 7 * cellSize
                  + "H" + w1 * cellSize + "V" + (d1 + 1) * cellSize
                  + "H" + (w1 + 1) * cellSize + "V" + 0
                  + "H" + (w0 + 1) * cellSize + "Z";
            }

            if (this._svg != null) {
                this._svg.remove();
                AppUtil.removeAllChildrenOf(this.domNode);
            }

            var width = cellSize * 56;
            var height = cellSize * 8;

            var formatPercent = d3.format(".1%");

            var color = d3.scale.quantize()
                .domain([-0.05, 0.05])
                .range(["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"]);
            
            var yearRange = this._getYearRange();
            
            var svg = d3.select(this.domNode)
              .selectAll("svg")
              .data(d3.range(yearRange.min, yearRange.max))
              .enter().append("svg")
                .attr("width", width)
                .attr("height", height)
              .append("g")
                .attr("transform", "translate(" + ((width - cellSize * 53) / 2) + "," + (height - cellSize * 7 - 1) + ")");
            
            svg.append("text")
                .attr("transform", "translate(-6," + cellSize * 3.5 + ")rotate(-90)")
                .attr("font-family", "sans-serif")
                .attr("font-size", 10)
                .attr("text-anchor", "middle")
                .text(function(d) { return d; });
            
            var rect = svg.append("g")
                .attr("fill", "none")
                .attr("stroke", "#ccc")
              .selectAll("rect")
              .data(function(d) { return d3.time.days(new Date(d, 0, 1), new Date(d + 1, 0, 1)); })
              .enter().append("rect")
                .attr("width", cellSize)
                .attr("height", cellSize)
                .attr("x", function(d) { return d3.time.weekOfYear(d) * cellSize; })
                .attr("y", function(d) { return d.getDay() * cellSize; })
                .datum(d3.time.format("%Y-%m-%d"));
            
            svg.append("g")
                .attr("fill", "none")
                .attr("stroke", "#000")
              .selectAll("path")
              .data(function(d) { return d3.time.months(new Date(d, 0, 1), new Date(d + 1, 0, 1)); })
              .enter().append("path")
                .attr("d", pathMonth);
            
            var data = d3.nest()
                .key(function(d) {
                    if (typeof d.Date == "number") {
                        return getDateKey(new Date(d.Date));
                    }
                    else if (d.Date instanceof Date) {
                        return getDateKey(d.Date);
                    }
                    return d.Date;
                })
                .rollup(function(d) { return (d[0].Close - d[0].Open) / d[0].Open; })
              .map(this._result);

            rect.filter(function(d) { return d in data; })
              .attr("fill", function(d) { return color(data[d]); })
              .append("title")
                .text(function(d) { return d + ": " + formatPercent(data[d]); });
            
            this._svg = svg;
        },
        
        _getYearRange : function() {
            var minYear = NaN;
            var maxYear = NaN;
            for (var i=0; i<this._result.length; i++) {
                var d = this._result[i];
                var year = NaN;
                if (typeof d.Date == "number" || typeof d.Date == "string") {
                    year = (new Date(d.Date)).getFullYear();
                }
                else if (d.Date instanceof Date) {
                    year = d.Date.getFullYear();
                }
                if (!isNaN(year)) {
                    if (isNaN(minYear) || minYear > year) {
                        minYear = year;
                    }
                    if (isNaN(maxYear) || maxYear < year) {
                        maxYear = year;
                    }
                }
            }
            return {
                min : minYear,
                max : maxYear,
            };
        },
        
        _useDummyData : function() {
            if (this.controller.initialConfig.appId == "dbp") {
                // in Dashboard Plugin app... so either modeling preview or summary preview
                return true;
            }
            if (this.controller.initialConfig.appId == "ax" && this.controller.mode == "edit.model") {
                // in dashboard builder modeling context
                return true;
            }
            return false;
        },

        _getDummyData : function(callback) {
            var uri = this.properties._model.substring(0, this.properties._model.lastIndexOf("/"));
            d3.csv("/vitria-oi/rest" + uri + "?op=vt:dbp:resource:Sample Data", function(error, csv) {
                if (error) throw error;
                callback(csv);
            });
        },
]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            if (this._useDummyData()) {
                // development and modeling use-case
                // need dummy data
                var self = this;
                this._getDummyData(function(data) {
                    self.renderer.result = data;
                    self.doRefresh();
                });
            }
            else {
                this.doRefresh();
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[
            if (this._svg != null) {
                this._createCalendar();
            }]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function getDateKey(date)
    {
        return String(date.getFullYear()) + "-" + pad(String(date.getMonth()+1), 2) + "-" + pad(String(date.getDate()), 2);
    }
    
    function pad(str, len)
    {
        while (str.length < len) {
            str = "0" + str;
        }
        return str;
    }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[
            this._result = this.renderer.result;
            this._createCalendar();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;white-space:normal;overflow:auto;">
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
    </Functions>
    <Services>
    </Services>
    <Resources>
      <Resource uuid="e6b91fe0-cc53-4f71-811b-c4c559a8e96b" name="Sample Data" type="text/plain" size="332047" private="false">
        <Description>
          <![CDATA[Sample data for Calendar View widget]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>