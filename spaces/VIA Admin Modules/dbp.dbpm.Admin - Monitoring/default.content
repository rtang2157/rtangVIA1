<DashboardPluginModel description="Description of New Model 0" name="Admin - Monitoring" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="MonitoringActionBar" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#postCreate">
          <![CDATA[            this.viewSelect.on("change", lang.hitch(this,"onViewChanged"));
            this.onViewChanged();
            on (this.enableButton, "click", lang.hitch(this,"onEnableButtonClick"));
            on (this.disableButton,"click", lang.hitch(this,"onDisableButtonClick"));
            on (this.resetButton, "click", lang.hitch(this,"onResetButtonClick"));
            on (this.reloadButton,"click", lang.hitch(this,"onReloadButtonClick"));
            this._setButtonEnable(this.enableButton, false);
            this._setButtonEnable(this.disableButton, false);
            this._setButtonEnable(this.resetButton, false);
            this._setButtonEnable(this.reloadButton, true);

            this.autoUpdateCheckBox.on("change", lang.hitch(this,"onAutoUpdateChanged"));

            require(["dojo/query"], function(query){
                var buttons = query(".image-button", this.domNode);
                on(buttons, "mousedown", function(event){
                    domClass.add(this, "image-button-mousedown");
                });
                on(buttons, "mouseup", function(event){
                    domClass.remove(this, "image-button-mousedown");
                });
            });]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        onViewChanged: function(evt) {
            var view = this.viewSelect.get("value");
            if(view == "ProjectResourceUsage") {
                domStyle.set(this.resetButton,"display","none");
            } else if (view == "ProjectRuntime") {
                domStyle.set(this.resetButton,"display","");
            }
            var message = {};
            message.type = "VIEW_CHANGED";
            message.view = view;
            this._updateSelection([message]);
        },
        
        onEnableButtonClick: function(evt) {
            if (this._getButtonEnable(evt.target)) {
                this._onAction("enable");
            }
        },
        
        onDisableButtonClick: function(evt) {
            if (this._getButtonEnable(evt.target)) {
                this._onAction("disable");
            }
        },
        
        onResetButtonClick: function(evt) {
            if (this._getButtonEnable(evt.target)) {
                this._onAction("reset");
            }
        },
        
        onReloadButtonClick: function(evt) {
            if (this._getButtonEnable(evt.target)) {
                this._onAction("reload");
            }
        },
        
        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._autoUpdateLabelDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Auto Update}"));
            this.enableButton.title = plugin.localize(baseConfig.locale.project, locale, "{i18n::Enable}");
            this.disableButton.title = plugin.localize(baseConfig.locale.project, locale, "{i18n::Disable}");
            this.resetButton.title = plugin.localize(baseConfig.locale.project, locale, "{i18n::Reset}");
            this.reloadButton.title = plugin.localize(baseConfig.locale.project, locale, "{i18n::Reload}");
        },
        
        _onAction: function(action) {
            var message = {};
            message.type = "ON_ACTION";
            message.action = action;
            this._updateSelection([message]);
        },
        
        onAutoUpdateChanged: function(evt) {
            var checked = this.autoUpdateCheckBox.get("checked");
            if (checked) {
                this.durationSelect.set("disabled", false);
                this.unitSelect.set("disabled", false);
                this.autoUpdate();
            } else {
                this.durationSelect.set("disabled", true);
                this.unitSelect.set("disabled", true);
            }
        },
        
        autoUpdate: function() {
            this._onAction("reload");
            var checked = this.autoUpdateCheckBox.get("checked");
            if (checked) {
                var duration = this.durationSelect.get("value");
                var unit = this.unitSelect.get("value");
                var delay = 0;
                if (unit == "sec") {
                    delay = duration * 1000;
                } else if (unit == "min") {
                    delay = duration * 60 * 1000;
                }
                if (delay > 0) {
                    setTimeout(lang.hitch(this,"autoUpdate"),delay);
                }
            }
        },
        
        _updateSelection : function(selection) {
            if (this.renderer.tile != null) {
                // use this.renderer.tile._onSelectionChange() to direct selection via Selection port
                this.renderer.tile._onSelectionChange(selection);
                
                // use this.renderer.tile._doubleClickOnSelection() to direct selection via Drilldown port
            	this.renderer.tile._doubleClickOnSelection(selection);
            }
        },
        
        _setButtonEnable : function(button, flag) {
            if (flag) {
                domClass.replace(button, "image-button-enabled", "image-button-disabled");
            } else {
                domClass.replace(button, "image-button-disabled", "image-button-enabled");
            }
        },
        
        _getButtonEnable: function(button) {
            return domClass.contains(button, "image-button-enabled");
        }]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            this.autoUpdateCheckBox.set("checked", false);]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[
            if (evt.type == "SELECTION_CHANGED") {
                if (evt.selection) {
                    var view = this.viewSelect.get("value");
                    if(view == "ProjectResourceUsage") {
                        var enableButtonStatus = evt.selection["enableMonitoring"];
                        var disableButtonStatus =  evt.selection["disableMonitoring"];
                        this._setButtonEnable(this.enableButton, enableButtonStatus);
                        this._setButtonEnable(this.disableButton, disableButtonStatus);
                    } else if (view == "ProjectRuntime") {
                        var itemEnabled = evt.selection["Enabled"] == "true";
                        this._setButtonEnable(this.enableButton, !itemEnabled);
                        this._setButtonEnable(this.disableButton, itemEnabled);
                        this._setButtonEnable(this.resetButton, itemEnabled);
                    }
                } else {
                    this._setButtonEnable(this.enableButton, false);
                    this._setButtonEnable(this.disableButton, false);
                    this._setButtonEnable(this.resetButton, false);
                }
            } else if (evt.type == "CONFIGURATION") {
                this.baseConfig = evt.baseConfig;
                this.locale = evt.locale;
                if (this.baseConfig && this.locale) {
                    this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
                    this._localeHandler();
                }
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:27px;display:flex;">
    <div style="padding-left:2px;padding-top:2px;">
        <select data-dojo-attach-point='viewSelect' data-dojo-type="dijit/form/Select" style="width:120px;">
            <option value="ProjectResourceUsage" selected="selected">Resource Usage</option>
            <option value="ProjectRuntime">Runtime Info</option>
        </select>
    </div>

    <div style="padding-left:4px;padding-top:2px;"><input data-dojo-attach-point='autoUpdateCheckBox' data-dojo-type="dijit.form.CheckBox" style="width:16px;"/></div>
    
    <div data-dojo-attach-point='_autoUpdateLabelDiv' style=" white-space: nowrap; text-align: center; vertical-align: middle;line-height: 27px;">
        Auto Update
    </div>
    
    <div style="padding-left:2px;padding-top:2px;">
        <select data-dojo-attach-point='durationSelect' data-dojo-type="dijit/form/Select" data-dojo-props="disabled:true" style="width:60px;">
            <option value="1">1</option>
            <option value="3">3</option>
            <option value="5" selected="selected">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="30">30</option>
            <option value="60">60</option>
            <option value="90">90</option>
            <option value="120">120</option>
            <option value="1440">1440</option>
        </select>
    </div>
    
    <div style="padding-left:2px;padding-top:2px;">
        <select data-dojo-attach-point='unitSelect' data-dojo-type="dijit/form/Select" data-dojo-props="disabled:true" style="width:60px;">
            <option value="sec" selected="selected">sec</option>
            <option value="min">min</option>
        </select>
    </div>
    
    <div style="width:100%;display:flex; justify-content:center;">
        <div style="width:300px; display:flex; justify-content:space-around;">
            <div data-dojo-attach-point='enableButton' class="far fa-play-circle image-button" title="Enable" style="font-size:20px;padding-top:4px;cursor:pointer;"></div>
            <div data-dojo-attach-point='disableButton' class="far fa-stop-circle image-button" title="Disable" style="font-size:20px;padding-top:4px;cursor:pointer;"></div>
            <div data-dojo-attach-point='resetButton' class="fas fa-power-off image-button" title="Reset" style="font-size:20px;padding-top:4px;cursor:pointer;"></div>
            <div data-dojo-attach-point='reloadButton' class="fas fa-sync-alt image-button" title="Reload" style="font-size:20px;padding-top:4px;cursor:pointer;"></div>
    </div>
    </div>

</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="MonitoringGrid" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            this.model = config.model;
            this.selectionCallback = config.selectionCallback;]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            ]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _createGrid: function (model) {
            this._gridType = model.name;
            this.schema = [];
            var columnSetting = [];

            for (var i = 0; i < model.attributes.length; i++) {
                var attr =  model.attributes[i].attribute;
                var s = {name: attr.name, label: attr.label, type: attr.type.toLowerCase()};
                this.schema.push(s);
                var column = {name: attr.name,
                              label: attr.label,
                              type: "string",
                              defaultListId: i + 1,
                              opened:true
                            };
                if(attr.type.toLowerCase() == "string") {
                    column.style = {width: 100};
                } else if (column.name.toLowerCase() == "name") {
                    column.style = {width: 200};
                }
                columnSetting.push(column);
            }

            this.gridProperties = {
                borderType:"all",
                columnDefaultSetting:'{"columnFont":{"fontStyle":"normal","fontSize":"12","fontWeight":"normal"}}',
                columnReorder:"disable",
                columnResize:"enable",
                columnSetting:JSON.stringify(columnSetting),
                columnSortable:"enable",
                dataExport:"enable",
                headerStyle:'{"header":{"style":{"fontStyle":"normal","fontSize":"14px","fontWeight":"normal"}}}',
                highLightSetting:"[]",
                highlightColor:"#148AC4",
                hoverColor:"#148AC4",
                lineWrapping:"disable",
                lockedColumns:"0",
                pagination:"disable",
                rowSpacing:"5",
                selectionMode:"single",
                showHeader:"enable",
                showSummary:"disable"
            };
            
            var self = this;
            this._gridContent = domConstruct.create("div",{style:"width: 100%; height: 100%; padding:5px;"});
            this.domNode.appendChild(this._gridContent);
            require(["widgetcore/renderers/foundation/DGridRenderer"], function (Renderer) {
                var width = self.vtWidth ? self.vtWidth: 300;
                var height = self.vtHeight? self.vtHeight: 300;
                self._grid = new Renderer({
                    enableSelector: true,
                    viewer      : "viewer",
                    tile        : null,
                    controller  : self.controller,
                    properties  : self.gridProperties,
                    model       : null,
                    parser      : null,
                    params      : null,
                    meta        : null,
                    schema      : self.schema,
                    result      : [],
                    raw         : "<RecordCollection></RecordCollection>",
                    realData    : [],
                    vtWidth     : width,
                    vtHeight    : height,
                    vtWidthInfo : {},
                    vtHeightInfo: {}
                }, self._gridContent);
                self._grid.startup();
                self.doRefresh();
                
                aspect.after(self._grid, "updateSelection", function (selection) {
                    self._onSelectionChanged(selection);
                }, true);
                
            });
        },
        
        resize: function(dim) {
            if (dim) {
                this.updateWidthAndHeight(dim.w, dim.h);
            }
        },
        
        updateResult: function(result) {
            this.result = result;
            this.doRefresh();
        },
        
        _onSelectionChanged: function(selection) {
            var event = {};
            event.target = this;
            event.type = "SELECTION_CHANGED",
            event.selection = selection;
            if (this.selectionCallback) {
                this.selectionCallback(event);
            }
        },
        
        clearSelection: function() {
            this._grid.clearSelection(false);
        }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            if (this.model) {
                this._createGrid(this.model);
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._grid) {
                this._grid.updateWidthAndHeight(w, h);
            }]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._grid) {
                this._grid.destroy();
            }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            if (this._grid) {
                this._grid.result = this.result;
                this._grid.doRefresh();
            }
]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="MonitoringTreeGrid" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            this.model = config.model;
            this.selectionCallback = config.selectionCallback;]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        updateResult: function(result) {
            var self = this;
            require(["dojo/_base/declare",
                    "dstore/Memory",
	                "dstore/Trackable",
	                "dstore/Tree"
                    ],function(declare, Memory, Trackable, TreeStore){

                var store = new (declare([Memory, Trackable, TreeStore])) ({data: {identifier: 'id',items: result}});
                self._collection = store.getRootCollection();
                self.doRefresh();
            });
        },
        
        clearSelection: function() {
            //todo
        },
        
        _onSelectionChanged: function(selection) {
            var event = {};
            event.target = this;
            event.type = "SELECTION_CHANGED",
            event.selection = selection;
            if (selection.length > 0) {
                this._udpateStatusOfSelection(selection[0]);
            }
            if (this.selectionCallback) {
                this.selectionCallback(event);
            }
        },
        
        _udpateStatusOfSelection: function(selection) {
            var self = this;
            
            if (selection.type == "Query") {
                selection.disableMonitoring = selection.monitoringEnabled == "true";
                selection.enableMonitoring = !selection.disableMonitoring;
                return;
            }
            
            var findEnabledQuery = false;
            var findDisabledQuery = false;
            if (selection.type == "SummaryInfo") {
                var epns = this._collection.getChildren(selection);
                epns.fetch().forEach(function (epn) {
				    var queries = self._collection.getChildren(epn);
                    queries.fetch().forEach(function (query) {
				        if (query.monitoringEnabled == "true") {
                            findEnabledQuery = true;
                        } else {
                            findDisabledQuery = true;
                        }
			        });
			    });
			   
                if (findEnabledQuery) {
                    selection.disableMonitoring = true;
                }
                if (findDisabledQuery) {
                    selection.enableMonitoring = true;
                }
                return;
            }
            
            if (selection.type == "EPN") {
                var queries = this._collection.getChildren(selection);
                queries.fetch().forEach(function (query) {
				    if (query.monitoringEnabled == "true") {
                        findEnabledQuery = true;
                    } else {
                        findDisabledQuery = true;
                    }
			    });

                if (findEnabledQuery) {
                    selection.disableMonitoring = true;
                }
                if (findDisabledQuery) {
                    selection.enableMonitoring = true;
                }
                return;
            }
        },
        
        _createGrid: function(model) {
            var self = this;
            this._gridContent = domConstruct.create("div",{class:"rendererDataGrid", style:"width: 100%; height: 100%;"});
            this.domNode.appendChild(this._gridContent);
            
            require(["dojo/_base/declare",
                    "dgrid/OnDemandGrid",
                    "dgrid/Selection",
                    "dgrid/Keyboard",
                    "dgrid/Tree",
                    'dgrid/extensions/ColumnResizer',
                    "dstore/Memory",
	                "dstore/Trackable",
	                "dstore/Tree",
                    "dijit/layout/AccordionContainer",
                    "dijit/layout/ContentPane"
                    ],function(declare, OnDemandGrid, Selection, Keyboard, Tree, ColumnResizer, Memory, Trackable, TreeStore,  AccordionContainer, ContentPane){

                var myStore = new (declare([Memory, Trackable, TreeStore])) ({data:{identifier: 'id',items:[]}});
                var header = [];
                var tail = [];
                for (var i = 0; i < model.attributes.length; i++) {
                    var attr =  model.attributes[i].attribute;
                    var column = {label: attr.label, field: attr.name};
                    if (attr.name == "name") {
                        column.renderExpando = true;
                        column.resizable = true;
                        column.width = 200;
                        header.push(column);
                    } else {
                        column.width = 120;
                        column.resizable = false;
                        tail.push(column);
                    }
                }
                
                self._grid = new (declare([OnDemandGrid, Keyboard, Selection, Tree, ColumnResizer]))({
                        collection: myStore,
                        columns: header.concat(tail),
                        selectionMode: 'single'
                    }, self._gridContent);

                self._grid.on('dgrid-select', function (event) {
                    var rows = event.rows;
                    self._onSelectionChanged([rows[0].data]);
                });
                
                self._grid.on('dgrid-deselect', function (event) {
                    var rows = event.rows;
                    self._onSelectionChanged([]);
                });


                        
                self._grid.startup();
            });
        }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[            if (this.model) {
                this._createGrid(this.model);
            }]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._grid) {
                this._grid.destroy();
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._grid) {
                this._grid.resize();
            }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            if (this._grid && this._collection) {
                this._grid.set("collection", this._collection);
                this._grid.refresh();
                this._grid.resize();
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="MonitoringView" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#buildRendering">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _buildRuntimeUI : function(model) {
            var self = this;
            if (self._accordionContainer != null) {
                self._accordionContainer.destroy();
                self._gridWidgets = {};
                self._accordionContainer = null;
            }

            Widget("/app/dbp/space/VIA Admin Modules/dbpm/Admin - Monitoring/MonitoringGrid", function(MonitoringGrid){
                require(["dijit/layout/AccordionContainer",
                     "dijit/layout/ContentPane"],function(AccordionContainer,ContentPane){
                    var div = domConstruct.create("div",{style:"width:100%;height:100%"});
                    self.domNode.appendChild(div);
                    self._accordionContainer = new AccordionContainer({style:"width: 100%;height:100%"}, div);
                    if(model){
                        for(var i = 0; i < model.length; i++) {
                            var item = model[i];
                            var panel = new ContentPane({
                                style:"padding:0px;",
                                title:item.label || item.name,
                            })

                            var gridDiv = domConstruct.create("div",{style:"width:100%;height:100%"});
                            var grid = new MonitoringGrid({model:item, 
                                                           selectionCallback: lang.hitch(self,"_onGridSelectionChanged")
                                                           }, gridDiv);
                            panel.addChild(grid);
                            self._gridWidgets[item.name] = grid;
                            self._accordionContainer.addChild(panel);
                            grid.startup();
                        }
                    }
                    self._accordionContainer.startup();
                    self.updateWidthAndHeight(self.vtWidth, self.vtHeight);
                    self.onViewCreateComplete();
                });
            });
        },
        
        _buildProjectResourceUsage: function(model) {
            var self = this;
            if (self._accordionContainer != null) {
                self._accordionContainer.destroy();
                self._gridWidgets = {};
                self._accordionContainer = null;
            }
            
            Widget("/app/dbp/space/VIA Admin Modules/dbpm/Admin - Monitoring/MonitoringTreeGrid", function(MonitoringTreeGrid){
                require(["dijit/layout/AccordionContainer",
                     "dijit/layout/ContentPane"],function(AccordionContainer,ContentPane){
                    var div = domConstruct.create("div",{style:"width:100%;height:100%"});
                    self.domNode.appendChild(div);
                    self._accordionContainer = new AccordionContainer({style:"width: 100%;height:100%"}, div);
                    if(model && model.length > 0){
                        var item = model[0];
                        var panel = new ContentPane({
                                style:"padding:0px;",
                                title:"EPN",
                        })

                            var gridDiv = domConstruct.create("div",{style:"width:100%;height:100%"});
                            var grid = new MonitoringTreeGrid({model:item, 
                                                           selectionCallback: lang.hitch(self,"_onGridSelectionChanged")
                                                           }, gridDiv);
                            panel.addChild(grid);
                            self._gridWidgets[item.name] = grid;
                            self._accordionContainer.addChild(panel);
                            grid.startup();
                    }
                    self._accordionContainer.startup();
                    self.updateWidthAndHeight(self.vtWidth, self.vtHeight);
                    self.onViewCreateComplete();
                });
            });
        },
        
        onViewCreateComplete: function() {
            var message = {};
            message.type = "ON_ACTION";
            message.action = "reload";
            this._updateSelection([message]); 
        },
        
        _updateSelection : function(selection) {
            if (this.renderer.tile != null) {
                // use this.renderer.tile._onSelectionChange() to direct selection via Selection port
                this.renderer.tile._onSelectionChange(selection);
                
                // use this.renderer.tile._doubleClickOnSelection() to direct selection via Drilldown port
            	this.renderer.tile._doubleClickOnSelection(selection);
            }
        },
        
        _onGridSelectionChanged: function(event) {
            for (var type in this._gridWidgets) {
                var widget = this._gridWidgets[type];
                if (widget != event.target) {
                    widget.clearSelection();
                }
            }
            
            var message = {};
            message.type = "SELECTION_CHANGED";
            message.selection = event.selection.length > 0? event.selection[0]: null;
            this._updateSelection([message]); 
        }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._accordionContainer) {
                this._accordionContainer.resize({w:w, h:h});
            }]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._accordionContainer) {
                this._accordionContainer.destroy();
                this._gridWidgets = null;
            }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (evt.type == "VIEW_CHANGED") {
                this._view = evt.view;
                if (evt.view == "ProjectResourceUsage") {
                    this._buildProjectResourceUsage(evt.viewMeta);
                } else if (evt.view == "ProjectRuntime") {
                    this._buildRuntimeUI(evt.viewMeta);
                }
            } else if(evt.type == "RESULT_UPDATED") {
                this.result = evt.result;
                this.doRefresh();
                //sent out unselect event
                var message = {};
                message.type = "SELECTION_CHANGED";
                message.selection = null;
                this._updateSelection([message]);
            } else if (evt.type == "CONFIGURATION") {
                
            }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this._gridWidgets = {};]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[
            for (var type in this._gridWidgets) {
                var data = [];
                var widget = this._gridWidgets[type];
                if (this.result) {
                    for(var i = 0; i < this.result.length; i++) {
                        var item = this.result[i];
                        if (item.typeInfo == type) {
                            data.push(item);
                        }
                    }
                }
                widget.updateResult(data);
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">

</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
      <Function name="_parseResourceObject" args="recordSet,node,parentId,childIndex" private="true">
        <CodeText>
          <![CDATA[var item;
if(node.projectSummary) {
    item = node.projectSummary;
} else if (node.epn) {
    item = node.epn;
} else if (node.query) {
    item = node.query;
}

var attributes = item.attributes;

var id = "";
if (parentId) {
    id = parentId + "/" + childIndex;
} else {
    id = "" + childIndex;
}

var  record = {id:id, parent:parentId, typeInfo:"ResourceUsageColumnInfo"};

for (var j = 0; j < attributes.length; j++) {
    var attribute = attributes[j].attribute;
    record[attribute["name"]] = attribute["value"];
}
recordSet.push(record);

var children = [];
if(node.projectSummary) {
    children = item.epns;
} else if (node.epn) {
    children = item.querys;
}

record.hasChildren = (children.length > 0);

for (var i = 0; i < children.length; i++) {
    this._parseResourceObject(recordSet, children[i], id, i);
}]]>
        </CodeText>
      </Function>
      <Function name="disableMonitoringObj" args="project,server,obj,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[// add custom code
var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.ob = obj;
parameters.format = "json";

var headers = {};

POST('/vitria-oi/rest/runtime.admin?op=disableMonitoringOb', parameters,headers, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            if(onsuccess) onsuccess(obj);
            return;
        } else {
            if(onfail) onfail(answer.message);
            console.error(answer.message);
            return;
        }
    }
});]]>
        </CodeText>
      </Function>
      <Function name="disableResource" args="project,server,obj,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var self = this;
var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.format = "json";
if (obj.type == "SummaryInfo") {
    parameters.type = "project";
} else if (obj.type == "EPN") {
    parameters.type = "epn";
    parameters.uuids = obj.compid;
} else if (obj.type == "Query") {
    parameters.type = "query";
    parameters.epnId = obj.epnID;
    parameters.uuids = obj.compid;
}

var headers = {};

POST('/vitria-oi/rest/runtime.admin?op=disableProjectResourceOb', parameters,headers, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            var recordSet = [];
            if (answer.content.projectResourceInfo && answer.content.projectResourceInfo.length > 0) {
                self._parseResourceObject(recordSet, answer.content.projectResourceInfo[0], null, 0);
            }
            
            if(onsuccess) onsuccess(recordSet);
            return;
        } else {
            if(onfail) onfail(answer.message);
            
            console.error(answer.message);
            return;
        }
    }
});]]>
        </CodeText>
      </Function>
      <Function name="enableMonitoringObj" args="project,server,obj,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.ob = obj;
parameters.format = "json";

var headers = {};

POST('/vitria-oi/rest/runtime.admin?op=enableMonitoringOb', parameters,headers, function(response){
    if (response !== null && response !== "") {
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            if(onsuccess) onsuccess(obj);
            return;
        } else {
            if(onfail) onfail(answer.message);
            console.error(answer.message);
            return;
        }
    }
});]]>
        </CodeText>
      </Function>
      <Function name="enableResource" args="project,server,obj,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var self = this;
var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.format = "json";
if (obj.type == "SummaryInfo") {
    parameters.type = "project";
} else if (obj.type == "EPN") {
    parameters.type = "epn";
    parameters.uuids = obj.compid;
} else if (obj.type == "Query") {
    parameters.type = "query";
    parameters.epnId = obj.epnID;
    parameters.uuids = obj.compid;
}

var headers = {};

POST('/vitria-oi/rest/runtime.admin?op=enableProjectResourceOb', parameters,headers, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            var recordSet = [];
            if (answer.content.projectResourceInfo && answer.content.projectResourceInfo.length > 0) {
                self._parseResourceObject(recordSet, answer.content.projectResourceInfo[0], null, 0);
            }
            
            if(onsuccess) onsuccess(recordSet);
            return;
        } else {
            if(onfail) onfail(answer.message);
            
            console.error(answer.message);
            return;
        }
    }
});]]>
        </CodeText>
      </Function>
      <Function name="getPrjResourceUsage" args="project,server,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var self = this;
var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.format = "json";

GET('/vitria-oi/rest/runtime.admin?op=getPrjResourceUsageInfo', parameters, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            var recordSet = [];
            if (answer.content.projectResourceInfo && answer.content.projectResourceInfo.length > 0) {
                self._parseResourceObject(recordSet, answer.content.projectResourceInfo[0], null, 0);
            }
            
            if(onsuccess) onsuccess(recordSet);
            return;
        } else {
            if(onfail) onfail(answer.message);
            
            console.error(answer.message);
            return;
        }
    }
});


]]>
        </CodeText>
      </Function>
      <Function name="getRuntimeMonitorInfo" args="project,server,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.format = "json";

GET('/vitria-oi/rest/runtime.admin?op=getRuntimeMonitorInfo', parameters, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK' && answer.content) {
            var recordSet = [];
            for (var i = 0; i < answer.content.monitorItems.length; i++) {
                var item = answer.content.monitorItems[i].monitorItem;
                var attributes = item.attributes;
                var record = {typeInfo:item.typeInfo, __name: item.name};
                for (var j = 0; j < attributes.length; j++) {
                    var attribute = attributes[j].attribute;
                    record[attribute["name"]] = attribute["value"];
                }
                if (!record.name) {
                    var indexStart = item.name.indexOf("name=");
                    if (indexStart != -1) {
                        var indexEnd = item.name.indexOf(",", indexStart);
                        if (indexEnd != -1) {
                            record.name = item.name.substring(indexStart + 5, indexEnd);
                        }
                    }
                }
                    
                if (!record.Name) {
                    record.Name = record.name;
                }
                recordSet.push(record);
            }
            
            if(onsuccess) onsuccess(recordSet);
            return;
        } else {
            if(onfail) onfail(answer.message);
            
            console.error(answer.message);
            return;
        }
    }
        
});]]>
        </CodeText>
      </Function>
      <Function name="getRuntimeMonitorMeta" args="project,server,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.format = "json"

GET('/vitria-oi/rest/runtime.admin?op=getMonitorMeta', parameters, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            if(onsuccess) onsuccess(answer);
            return;
        } else {
            if(onfail) onfail(answer.message);
            console.error(answer.message);
            return;
        }
    }
});]]>
        </CodeText>
      </Function>
      <Function name="resetMonitoringObj" args="project,server,obj,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var parameters = {};
parameters.prj = project;
parameters.server = server;
parameters.ob = obj;
parameters.format = "json";

var headers = {};

POST('/vitria-oi/rest/runtime.admin?op=resetMonitoringOb', parameters, headers, function(response){
    if (response !== null && response !== "") { 
        var answer = JSON.parse(response);
        if(answer.result == 'OK') {
            if(onsuccess) onsuccess(obj);
            return;
        } else {
            if(onfail) onfail(answer.message);
            console.error(answer.message);
            return;
        }
    }
});]]>
        </CodeText>
      </Function>
    </Functions>
    <Services>
    </Services>
    <Resources>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>