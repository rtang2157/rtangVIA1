<DashboardPluginModel description="Description of New Model 0" name="Admin - Server Plugin" is_init="false">
  <ModelInfo validated="true">
    <Properties/>
    <Widgets/>
    <Functions>
      <Function name="_empty" args="a" private="false">
        <CodeText>
          <![CDATA[return a == undefined || a == null;]]>
        </CodeText>
      </Function>
      <Function name="_getServerInfo" args="info" private="false">
        <CodeText>
          <![CDATA[function getInfo(field) {
    if (info[field] == undefined || info[field] == null) {
        return "";
    }
    if (field == "pool") {
        return info[field] == true ? "DefaultPool" : "";
    }
    return info[field]
}

var serverInfo = '<serverInfo name="#ServerName#" type="#ServerType#">';
serverInfo += '<desc>#desc#</desc>';
serverInfo += '<backup>#backup#</backup>';
serverInfo += '<pool>#pool#</pool>';
serverInfo += '<profile cpu="#cpu#" memory="#memory#"/>';
serverInfo += '<namingInfo>';
serverInfo += '<providerUrl>#url#</providerUrl>';
serverInfo += '<factory></factory>';
serverInfo += '<user>#user#</user>';
serverInfo += '<pwd>#password#</pwd>';
serverInfo += '</namingInfo>';
serverInfo += '<esmsInfo>';
serverInfo += '<batch>#cepBatchSize#</batch>';
serverInfo += '<memory>#cepMemory#</memory>';
serverInfo += '<namingInfo>';
serverInfo += '<providerUrl>#cepUrl#</providerUrl>';
serverInfo += '</namingInfo>';
serverInfo += '</esmsInfo>';
serverInfo += '</serverInfo>';
serverInfo = serverInfo.replace(/#ServerType#/, getInfo("type"));
serverInfo = serverInfo.replace(/#desc#/, getInfo("description"));
serverInfo = serverInfo.replace(/#ServerName#/, getInfo("name"));
serverInfo = serverInfo.replace(/#url#/, getInfo("url"));
serverInfo = serverInfo.replace(/#user#/, getInfo("user"));
serverInfo = serverInfo.replace(/#password#/, getInfo("password"));
serverInfo = serverInfo.replace(/#cpu#/, getInfo("cpu"));
serverInfo = serverInfo.replace(/#memory#/, getInfo("memory"));
serverInfo = serverInfo.replace(/#cepMemory#/, getInfo("cepMemory"));
serverInfo = serverInfo.replace(/#cepUrl#/, getInfo("cepUrl"));
serverInfo = serverInfo.replace(/#cepBatchSize#/, getInfo("cepBatchSize"));
serverInfo = serverInfo.replace(/#backup#/, getInfo("backup"));
serverInfo = serverInfo.replace(/#pool#/, getInfo("pool"));
serverInfo = serverInfo.replace(/#url#/, getInfo("url"));
return serverInfo;]]>
        </CodeText>
      </Function>
      <Function name="_popup" args="title,msg,items,buttonDef,callback" private="false">
        <CodeText>
          <![CDATA[var itemStyle = {
    "width" : "100%",
    "font-family": "Arial",
    "border": "1px solid #f8f8f8",
    "border-bottom-color": "#148ac4",
    "height": "26px",
    "line-height": "26px",
    "padding-left": "5px !important",
    "padding-right": "5px !important"
};

if (items != null) {
    items.forEach(function(item, index) {
        item.style = lang.clone(itemStyle);
        if (item.type == "boolean") {
            delete item.style.width;
            delete item.style.height;
            delete item.style['line-height'];
        }
    });
}

var panelStyle = {
    width: "570px",
    "container" : {
        "background-color" : "white",
    },
    "form-label" : {
        "width" : "10%",
        "white-space" : "nowrap",
    },
    "form-value" : {
        "width" : "90%",
    },
};

prompt(
    title,
    msg,
    items,
    buttonDef,
    panelStyle,
    callback
);]]>
        </CodeText>
      </Function>
      <Function name="doAddServer" args="subMenu,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code

var self = this;
function selectServerType(okCallback)
{
    var items = [ 
        {name: "type", label: subMenu.ServerType, type: "select", enums: "Runtime,Feed,Presentation,Domain", value: "Runtime", disabled: false}
    ];
    self._popup(
        subMenu.SelectServerType,
        subMenu.SelectServerTypeToAdd,
        items,
        null,
        okCallback
    );
}

var runtime = [ 
    {name: "type", label: subMenu.ServerType, type: "string", value: "Runtime", disabled: true},
    {name: "name", label: subMenu.Name, type: "string", value: "", disabled: false},
    {name: "url", label: subMenu.URL, type: "string", value: "http-remoting://SERVERHOST:8080", disabled: false},
    {name: "cpu", label: subMenu.CPU, type: "Number", value: 0, 
    widgetConfig : {constraints : {min : 0} }, disabled: false},
    {name: "memory", label: subMenu.Memory, type: "Number", value: 0, widgetConfig : {constraints : {min : 0} }, disabled: false},
    {name: "cepUrl", label: subMenu.CEPURL, type: "string", value:  "http://SERVERHOST:7950", disabled: false},
    {name: "cepMemory", label: subMenu.CEPMemory, type: "Number", value: 0, widgetConfig : {constraints : {min : 0} }, disabled: false},
    {name: "pool", label: subMenu.DefaultPool, type: "boolean", value: false, disabled: false},
    {name: "backup", label: subMenu.Backup, type: "boolean", value: false, disabled: false},
];

var feed = [ 
    {name: "type", label: subMenu.ServerType, type: "string", value: "Feed", disabled: true},
    {name: "name", label: subMenu.Name, type: "string", value: "", disabled: false},
    {name: "url", label: subMenu.URL, type: "string", value: "", disabled: false},
    {name: "haGroup", label: subMenu.HaGroup, type: "string", value: "", disabled: false},
];

var Presentation = [ 
    {name: "type", label: subMenu.ServerType, type: "string", value: "Presentation", disabled: true},
    {name: "name", label: subMenu.Name, type: "string", value: "", disabled: false},
    {name: "url", label: subMenu.URL, type: "string", value: "", disabled: false},
];

var Domain = [ 
    {name: "type", label: subMenu.ServerType, type: "string", value: "Domain", disabled: true},
    {name: "name", label: subMenu.Name, type: "string", value: "", disabled: false},
    {name: "url", label: subMenu.URL, type: "string", value: "", disabled: false},
];



function popupForm(type, okCallback)
{
    var info;
    if (type == "Runtime") {
        info = runtime;
    } else if (type == "Feed") {
        info = feed;
    } else if (type == "Presentation") {
        info = Presentation;
    } else if (type == "Domain") {
        info = Domain;
    }
    self._popup(
        subMenu.AddServer,
        subMenu.ProvideServerInfo,
        info,
        null,
        okCallback
    );
}

var self = this;  
selectServerType(function(value, info) {
    if ( value == true ) {
        popupForm(info["type"], function(value, info) {
            if ( value == true ) {
                var serverInfo = self._getServerInfo(info);
                if (serverInfo != null) {
                    var params = {
                        op : "add" + info["type"] + "Server"
                    };
                    var body = {
                        serverInfo : serverInfo
                    };
                    POST("/vitria-oi/rest/server.admin", params, body, function(t) {
                        if (t != null) {
                            callback(t);
                        }
                    });
                }
            }
        });
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doDeleteServer" args="subMenu,serverName,type,callback" private="false">
        <CodeText>
          <![CDATA[

//***************
// add custom code

var self = this;
var callbackWarpper = function(value) {
        if(value == true) {
            var params = {
                op : "delete" + type,
                server : serverName
            };
            POST("/vitria-oi/rest/server.admin", params, body, function(t) {
                if (t != null) {
                    callback(t);
                }
            });
            //click yes
        }
        if(value == false) {
            //click no
            callback("{}");
        }
		// if we get callback, means user clicked YES
        //self.dsRemoveDataSource(name, callback);
    };         

          
prompt(
    subMenu.RuntimeServer,
    subMenu.RemoveServer,
    [   // may be null, in which case, no form UI collected
        {name: "name", label: subMenu.Name, type: "string", value: serverName, disabled: true, style: {
            "width" : "291px",
            "font-family": "Arial",
            "border": "1px solid #f8f8f8",
            "border-bottom-color": "#148ac4",
            "height": "26px",
            "line-height": "26px",

        }}
    ],
    [   // may be null, in which case, default OK/Cancel buttons used
        {label: subMenu.OK, value: true, 'class':"appDialogSaveButton"},
        {label: subMenu.Cancel, value: false},
    ],
    {
        width: "400px",
        "container" : {
            "background-color" : "white",
        },
        "form-label" : {
            "width" : "10%",
            "white-space" : "nowrap",
        },
        "form-value" : {
            "width" : "90%",
        },
    },
    callbackWarpper
);

]]>
        </CodeText>
      </Function>
      <Function name="doListServer" args="type,callback" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/server.admin?op=get" + type + "Servers";
GET(url, null, function(t) {
    if (t != null && t != "") {
        // t is json, not xml.
        var servers = [];
        var answer = JSON.parse(t);
        if(answer.result || answer.status== 'OK') {
            servers = answer.content.servers.map(function(s){
                return {
                    name : s.serverInfo.name,
                    label : s.serverInfo.type,
                };
            });
        }
        callback(servers);
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doListUsers" args="format,callback" private="false">
        <CodeText>
          <![CDATA[function getUserInfo(users, callback)
{
    if (users.length == 0) {
        callback();
    }
    else {
        var user = users.shift();
        GET("/vitria-oi/rest/users/"+user.name, null, function(t) {
            if (t != null && t != "") {
                var xl = new XmlList(t);
                xl.elements("user").elements("p").forEach(function(index) {
                    switch (this.getAttribute("name")) {
                        case "fullname":
                            user.fullname = this.textContent;
                            break;
                        case "emails":
                            user.emails = this.textContent;
                            break;
                        case "phones":
                            user.phones = this.textContent;
                            break;
                        case "enabled":
                            user.enabled = this.textContent;
                            break;
                        case "phones":
                            user.phones = this.textContent;
                            break;
                        case "runtime_server_list":
                            user.runtime_server_list = this.textContent;
                            break;
                        case "feed_server_list":
                            user.feed_server_list = this.textContent;
                            break;
                        case "datasource_list":
                            user.datasource_list = this.textContent;
                            break;
                        case "defaultServerList":
                            user.defaultServerList = this.textContent;
                            break;
                        case "vs_list":
                            user.vs_list = this.textContent;
                            break;
                    }
                });
            }
            // some information currently NOT available with this API
            // - type of user (workbench or apps)
            // - domain admin
            // - security admin
            user.type = "(unknown)";
            user.domainAdmin = "(unknown)";
            user.securityAdmin = "(unknown)";
            getUserInfo(users, callback)
        });
    }
}

function full(t) {
    var users = [];
    var xl = new XmlList(t);
    xl.elements("user").forEach(function(index) {
        users.push({
            name : this.getAttribute("name"),
        });
    });
    getUserInfo(users.slice(0), function() {
        callback(users);
    });
}

function commar(t) {
    var users = "";
    var xl = new XmlList(t);
    xl.elements("user").forEach(function(index) {
        if (index != 0) {
            users = users + ",";
        }
        users = users + this.getAttribute("name");
    });
    callback(users);
}

GET("/vitria-oi/rest/users?op=listm3ousers", null, function(t) {
    if (t != null && t != "") {
        if (format == "commar") {
            commar(t);
        } else {
            full(t);
        }
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doRestoreServer" args="subMenu,sourceServer,targetServer,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;

function selectTargetServer(okCallback) {
    self.doListServer("Runtime", function(t) {
        var s = "";
        t.forEach(function(o) {
            if (s != "") {
                s = s + ",";
            }
            s = s + o.name;
        });
        self._popup(
            subMenu.SelectTargetServer,
            subMenu.SelectTargetServerToRestore,
            [ {name: "targetServer", label: subMenu.TargetServer, type: "select", enums: s, value: "", disabled: false}],
            null,
            okCallback
        );
    });
}

selectTargetServer(function(value, info) {
    if (value == true && self._empty(info["targetServer"]) == false) {
        restoreServer(sourceServer, info["targetServer"]);
    }
});

function restoreServer(serverName, targetServer) {
    var params = {
        op : "restoreServer",
        sourceServer : serverName,
        targetServer : targetServer,
    };
    POST("/vitria-oi/rest/server.admin", params, body, function(t) {
        if (t != null) {
            callback(t);
        }
    });
}]]>
        </CodeText>
      </Function>
      <Function name="doStartServer" args="serverName,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var params = {
    op : "startRuntimeServer",
    server : serverName
};
POST("/vitria-oi/rest/server.admin", params, body, function(t) {
    if (t != null) {
        callback(t);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doStopServer" args="serverName,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var params = {
    op : "stopRuntimeServer",
    server : serverName
};
POST("/vitria-oi/rest/server.admin", params, body, function(t) {
    if (t != null) {
        callback(t);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doUpdateServer" args="server,locale,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;
var op = "update" + server.type;
var items = {};
items["RuntimeServer"] = [ 
    {name: "name", label: locale.Name, type: "string", value: server.name, disabled: true}, 
    {name: "pool", label: locale.DefaultPool, type: "boolean", value: server.pool, disabled: true}, 
    {name: "cpu", label: locale.CPU, type: "Number", value: server.cpu, disabled: false},
    {name: "memory", label: locale.Memory, type: "Number", value: server.heap, disabled: false},
    {name: "url", label: locale.URL, type: "string", value: server.providerURL, disabled: true},
    {name: "user", label: locale.user, type: "string", value: server.username, disabled: false},
    {name: "password", label: locale.password, type: "password", value: server.password, disabled: false},
    {name: "backup", label: locale.Backup, type: "boolean", value: server.backup, disabled: false},
    {name: "cepUrl", label: locale.CEPURL, type: "string", value: server.cepurl, disabled: false},
    {name: "cepMemory", label: locale.CEPMemory, type: "Number", value: server.cepmemory, disabled: false},
    {name: "cepBatchSize", label: locale.CEPBatchSize, type: "Number", value: server.cepbatchsize, disabled: false},
    {name: "description", label: locale.description, type: "string", value: server.description, disabled: false}
];
items["FeedServer"] = [ 
    {name: "name", label: locale.Name, type: "string", value: server.name, disabled: true}, 
    {name: "url", label: locale.URL, type: "string", value: server.providerURL, disabled: true},
    {name: "user", label: locale.user, type: "string", value: server.username, disabled: false},
    {name: "password", label: locale.password, type: "password", value: server.password, disabled: false},
    {name: "description", label: locale.description, type: "string", value: server.description, disabled: false}
];

items["PresentationServer"] = items["FeedServer"];
items["DomainServer"] = items["FeedServer"];

function confirm(okCallback) {
    self._popup(locale.Update, locale.ProvideInfoToUpdateServer, items[server.type], null, okCallback);
}

confirm(function(value, info) {
    if (value == true) {
        var serverInfo = self._getServerInfo(info);
        if (serverInfo != null) {
            var params = {
                op : op
            };
            var body = {
                serverInfo : serverInfo
            };
            POST("/vitria-oi/rest/server.admin", params, body, function(t) {
                if (t != null) {
                    callback(t);
                }
            });
        }
    }
});
]]>
        </CodeText>
      </Function>
    </Functions>
    <Services/>
    <Resources>
      <Resource uuid="a0a07129-65b2-4f41-8ab2-bf71e1c8bc7c" name="en-us" type="application/json" size="2072" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins/>
  </ModelInfo>
</DashboardPluginModel>
