<DashboardPluginModel description="Description of New Model 0" name="Admin - Installed Apps Plugin" is_init="false">
  <ModelInfo validated="true">
    <Properties/>
    <Widgets>
      <Widget name="AccessActionBar" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _buildUI : function() {
            var self = this;
            require([
                "dijit/MenuBar",
                "dijit/PopupMenuBarItem",
                "dijit/Menu",
                "dijit/MenuItem",
                "dijit/DropDownMenu",
                "dojo/domReady!"
                ], function(MenuBar, PopupMenuBarItem, Menu, MenuItem, DropDownMenu){
                self.menuBar = new MenuBar({});
                var accessMenu = new DropDownMenu({});
                var addLable = "Add";
                if (self._locale) {
                    addLable = self._locale.AddAccess;
                }
                self.addMenuItem = new MenuItem({
                    label: addLable
                });
                domClass.add(self.addMenuItem.domNode, "actionItem");
                on(self.addMenuItem, "click", lang.hitch(self,self._onAddClick));
                accessMenu.addChild(self.addMenuItem);
                
                var removeLable = "Remove";
                if (self._locale) {
                    removeLable = self._locale.RemoveAccess;
                }
                self.removeMenuItem = new MenuItem({
                    label: removeLable
                });
                domClass.add(self.removeMenuItem.domNode, "actionItem");
                on(self.removeMenuItem, "click", lang.hitch(self,self._onRemoveClick));
                accessMenu.addChild(self.removeMenuItem);
                
                self.removeMenuItem.set('disabled', true);
     
                self.menuBar.addChild(new PopupMenuBarItem({
                    label: "Access",
                    popup: accessMenu
                }));

                self.menuBar.placeAt(self.domNode);
                self.menuBar.startup();
             });
        },
        
        _onAddClick: function() {
            var self = this;
            Widget("/app/dbp/space/VIA Admin Modules/dbpm/Admin - Installed Apps Plugin/UserGroupPicker",  function(UserRolePicker){
                require(["af/controls/PopupEditorDialog"], function(PopupEditorDialog){
                    var dialog = new PopupEditorDialog({
                        controller : self.controller,
                        model : null,
                        header : null,
                        headerStyle : null,
                        helpIndex : null,
                        splitterConfig : null,
                        title : self._locale.SelectUsersGroups,
                        vtWidth : 450,
                        vtHeight : 600,
                        editorClass : UserRolePicker,
                        editorConfig : {},
                        onClickOk : lang.hitch(self, self._onUserAndRoleSelected)});
                    dialog.set("editorTitle", self._locale.UsersGroups);
                    dialog.show();
                });
            });
        },
        
        _onRemoveClick: function() {
            var message = {type:"ACCESS_ACTION",
                           action: "REMOVE"};
            this._updateSelection([message]);
        },
        
        _onUserAndRoleSelected: function(selection) {
            var message = {type:"ACCESS_ACTION",
                           action: "ADD",
                           value: selection};
            
            this._updateSelection([message]);
        },
        
        _updateSelection: function(selection) {
            if (this.renderer && this.renderer.tile !== null) {
                // use this.renderer.tile._onSelectionChange() to direct selection via Selection port
                this.renderer.tile._onSelectionChange(selection);
                
                // use this.renderer.tile._doubleClickOnSelection() to direct selection via Drilldown port
                this.renderer.tile._doubleClickOnSelection(selection);
            }
        },
        
        _disableMenuItem: function(menuItemId, disabled) {
            if (menuItemId == "Access/Remove") {
                this.removeMenuItem.set('disabled', disabled);
            }
        },
        
        _updateLocale: function(locale) {
            this._locale = locale;
            if (this.addMenuItem) {
                this.addMenuItem.set("label", this._locale.AddAccess);
            }
            if (this.removeMenuItem) {
                this.removeMenuItem.set("label", this._locale.RemoveAccess);
            }
        },]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if(this.menuBar) {
                this.menuBar.destroy();
            }]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this._buildUI();]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (evt.type == "DISABLE_ACTION") {
                this._disableMenuItem(evt.action, evt.value);
            }
            
            if (evt.type == "UPDATE_LOCALE") {
                this._updateLocale(evt.locale);
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="AccessTabbar" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            this.tabs = {};]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if(evt.roles) {
                this.roles = evt.roles;
                if(!this.loaded) {
                    this._createUI();
                }
            }
            
            if (evt.baseConfig && evt.locale) {
                this.baseConfig = evt.baseConfig;
                this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
                this.locale = evt.locale;
                this._localeHandler();
            }
]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;

            $(this._viewerDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::AccessViewer}"));
            $(this._authorDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::AccessAuthor}"));
        },
        
        _createUI: function() {
            this.loaded = true;
            var self = this;
            for(var i = 0; i < this.roles.length; i++) {
                var role = this.roles[i];
                var div  = domConstruct.create("div", {"class":"vertical-flex tabBarItem tabTD dojoDndItem", "innerHTML":role.title});
                this.domNode.append(div);
                this.tabs[role.id] = div;
                $(div).data("roleId", role.id);
                on(div, "click", lang.hitch(this, this._onTabClick));
            }
            this.onRoleSelect(this.roles[0].id);
        },
        
        _onTabClick: function(evt) {
            var roleId = $(evt.target).data("roleId");
            this.onRoleSelect(roleId);
        },
        
        onRoleSelect: function(roleId) {
            for(var key in this.tabs) {
                var div = this.tabs[key];
                domClass.remove(div, "dojoDndItemSelected");
            }
            domClass.add(this.tabs[roleId], "dojoDndItemSelected");
            
            if (this.renderer) {
                var message = {};
                message.type = "ACCESS_ROLE_CHANGED";
                message.value = roleId;
                this.renderer.updateSelection([message]);
            }
        },
        ]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            this.tabs = null;]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="horizontal-flex projectDetailTabbar tabbar tabBarWithTitle" style="width:100%;height:100%;justify-content: flex-start;">

</div>]]>
        </HtmlText>
      </Widget>
      <Widget name="MultiSelect" private="false">
        <PropertyText>
          <![CDATA[[{
    "name" : "model",
    "label" : "Model",
    "type" : "json"
}]]]>
        </PropertyText>
        <CodeText segment="#buildRendering">
          <![CDATA[            if (this._model) {
                this._buildUI(this._model);
            }]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[
        _buildUI : function(model) {
            var self = this;
            Widget("/app/dbp/space/VIA Admin Modules/dbpm/Admin - Installed Apps Plugin/MultiSelectGrid", function(MultiSelectGrid){
                require(["dijit/layout/AccordionContainer",
                     "dijit/layout/ContentPane"
                     ],function(AccordionContainer,ContentPane){

                    var div = domConstruct.create("div",{style:"width:100%;height:100%"});
                    self.domNode.appendChild(div);
                    self._accordionContainer = new AccordionContainer({style:"width: 100%;height:100%"}, div);
                    if(model){
                        for(var i = 0; i < model.length; i++) {
                            var item = model[i];
                            var panel = new ContentPane({
                                style:"padding:0px;",
                                title:item.label,
                            })
                           var gridDiv = domConstruct.create("div",{style:"width:100%;height:100%"});
                            var grid = new MultiSelectGrid({model:item, 
                                                           selectionCallback: lang.hitch(self,"_onGridSelectionChanged")
                                                           }, gridDiv);
                            panel.addChild(grid);
                            self._gridWidgets[item.name] = grid;
                            self._accordionContainer.addChild(panel);
                            grid.startup();
                        }
                    }
                    self._accordionContainer.startup();
                    if (self.vtWidth && self.vtHeight){
                        self.updateWidthAndHeight(self.vtWidth, self.vtHeight);
                    }
                    self.doRefresh();
                });
            });
        },
        
        _onGridSelectionChanged: function(event) {
            this.selection[event.target.gridType] = event.selection;
            var message = {};
            message.type = "SELECTION_CHANGED";
            message.selection = this.selection;
            this._updateSelection([message]);
            if (this.selectCallback) {
                this.selectCallback(this.selection);
            }
        },
        
        _updateSelection: function(selection) {
            if (this.renderer && this.renderer.tile !== null) {
                // use this.renderer.tile._onSelectionChange() to direct selection via Selection port
                this.renderer.tile._onSelectionChange(selection);
                
                // use this.renderer.tile._doubleClickOnSelection() to direct selection via Drilldown port
                this.renderer.tile._doubleClickOnSelection(selection);
            }
        }
        ]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            if (this.initialConfig.properties !== null && this.initialConfig.properties.model !== null && this.initialConfig.properties.model.trim() !== "") {
                this._model = JSON.parse(this.initialConfig.properties.model);
            }
            this.selectCallback = this.initialConfig.selectCallback;
            this._gridWidgets = {};
            this.result = {};
            this.selection = {};]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._accordionContainer) {
                this._accordionContainer.destroy();
                this._gridWidgets = null;
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._accordionContainer) {
                this._accordionContainer.resize({w:w, h:h});
            }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            for (var type in this._gridWidgets) {
                var data = [];
                var widget = this._gridWidgets[type];
                if (this.result) {
                    for(var i = 0; i < this.result.length; i++) {
                        var item = this.result[i];
                        if (item["__type"] == type) {
                            data.push(item);
                        }
                    }
                }
                widget.updateResult(data);
            }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (evt.type == "RESULT_UPDATED") {
                this.result = evt.result;
                this.doRefresh();
                //sent out unselect event
                var message = {};
                message.type = "SELECTION_CHANGED";
                message.selection = this.selection;
                this._updateSelection([message]);
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">

</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="MultiSelectGrid" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            this.model = config.model;
            this.selectionCallback = config.selectionCallback;]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            ]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _createGrid: function (model) {
            this.gridType = model.name;
            this.schema = [{name:"__selector", lable: "selector", type:"string"}];
            var columnSetting = [{name:"__selector", lable: "selector", type:"string",style: {width:10}, selector: "checkbox"}];

            for (var i = 0; i < model.columns.length; i++) {
                var col =  model.columns[i];
                var s = {name: col.name, label: col.label, type: col.type};
                this.schema.push(s);
                var column = {name: col.name,
                              label: col.label,
                              type: col.type,
                              defaultListId: i + 1,
                              opened:true
                            };
                columnSetting.push(column);
            }

            this.gridProperties = {
                borderType:"all",
                columnDefaultSetting:'{"columnFont":{"fontStyle":"normal","fontSize":"12","fontWeight":"normal"}}',
                columnReorder:"disable",
                columnResize:"enable",
                columnSetting:JSON.stringify(columnSetting),
                columnSortable:"enable",
                dataExport:"enable",
                headerStyle:'{"header":{"style":{"fontStyle":"normal","fontSize":"14px","fontWeight":"normal"}}}',
                highLightSetting:"[]",
                highlightColor:"#148AC4",
                hoverColor:"#148AC4",
                lineWrapping:"disable",
                lockedColumns:"0",
                pagination:"disable",
                rowSpacing:"5",
                selectionMode:"single",
                showHeader:"enable",
                showSummary:"disable"
            };
            
            var self = this;
            this._gridContent = domConstruct.create("div",{style:"width: 100%; height: 100%; padding:5px;"});
            this.domNode.appendChild(this._gridContent);
            require(["widgetcore/renderers/foundation/DGridRenderer"], function (Renderer) {
                var width = self.vtWidth ? self.vtWidth: 300;
                var height = self.vtHeight? self.vtHeight: 300;
                self._grid = new Renderer({
                    enableSelector: true,
                    viewer      : "viewer",
                    tile        : null,
                    controller  : self.controller,
                    properties  : self.gridProperties,
                    model       : null,
                    parser      : null,
                    params      : null,
                    meta        : null,
                    schema      : self.schema,
                    result      : [],
                    raw         : "<RecordCollection></RecordCollection>",
                    realData    : [],
                    vtWidth     : width,
                    vtHeight    : height,
                    vtWidthInfo : {},
                    vtHeightInfo: {}
                }, self._gridContent);
                self._grid.startup();
                self.doRefresh();
                
                aspect.after(self._grid, "updateSelection", function (selection) {
                    self._onSelectionChanged(selection);
                }, true);
                
            });
        },
        
        resize: function(dim) {
            if (dim) {
                this.updateWidthAndHeight(dim.w, dim.h);
            }
        },
        
        updateResult: function(result) {
            this.result = result;
            this.doRefresh();
        },
        
        _onSelectionChanged: function(selection) {
            var event = {};
            event.target = this;
            event.type = "SELECTION_CHANGED",
            event.selection = selection;
            if (this.selectionCallback) {
                this.selectionCallback(event);
            }
        },
        
        clearSelection: function() {
            this._grid.clearSelection(false);
        }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            if (this.model) {
                this._createGrid(this.model);
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._grid) {
                this._grid.updateWidthAndHeight(w, h);
            }]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._grid) {
                this._grid.destroy();
            }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            if (this._grid) {
                this._grid.result = this.result;
                this._grid.doRefresh();
            }
]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="UserGroupPicker" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        resize : function() {
        },
        
        _buildUI: function() {
            var self = this;
            Widget("/app/dbp/space/VIA Admin Modules/dbpm/Admin - Installed Apps Plugin/MultiSelect", function(MultiSelect){
                var model = [{"name":"user",
                             "label":"User",
                             "columns":[
                                 {"name":"id", "label":"ID", "type":"string"},
                                 {"name":"name", "label":"Name", "type":"string"}]},
                             {"name":"group",
                             "label":"Group", 
                             "columns":[
                                 {"name":"id", "label":"ID", "type":"string"},
                                 {"name":"name", "label":"Name", "type":"string"}]}];
                var properties = {};
                properties.model = JSON.stringify(model);
                var div = domConstruct.create("div",{style:"width:100%;height:100%"});
                self.domNode.appendChild(div);
                self._widget = new MultiSelect({properties:properties,
                                                selectCallback:lang.hitch(self, self._onSelect)
                                               }, div);
                self._widget.startup();
                self._doListUserGroup();
            });
        },
        
        _onSelect: function(selection) {
            this._selection = selection;
        },
        
        getModel: function () {
            return this._selection;
        },
        
        _doListUserGroup: function() {
            var self = this;
            var plugin = Plugin("/app/dbp/space/VIA Admin Modules/dbpm/Admin - Plugin");
            if (plugin !== null) {
                plugin.doListUsers(function(users) {
                    self._users = users;
                    plugin.doListGroups(function(groups) {
                        self._groups = groups;
                        self.doRefresh();
                    })
                });
            }
        },]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[            this._buildUI();]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._widget) {
                this._widget.destroy();
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._widget && this._widget.updateWidthAndHeight) {
                this._widget.updateWidthAndHeight(w, h);
            }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            if (this._widget) {
                var data = [];
                if(this._users) {
                    array.forEach(this._users, function(user){
                        var item = {id: user.name, name: user.fullname, __type: "user"};
                        data.push(item);
                    });
                }
                if (this._groups) {
                    array.forEach(this._groups, function(group){
                        var item = {id: group.name, name: group.fullname, __type: "group"};
                        data.push(item);
                    });
                }
                var evt = {
                    type: "RESULT_UPDATED",
                    result: data
                };
                this._widget.onNotify(evt);
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="adminAppAccess" style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
      <Function name="_empty" args="a" private="false">
        <CodeText>
          <![CDATA[return a == undefined || a == null;]]>
        </CodeText>
      </Function>
      <Function name="_getAppRoles" args="id,callback" private="false">
        <CodeText>
          <![CDATA[GET("/vitria-oi/rest/app.mgr/apps/" + id, null, function(t) {
    if (t != null && t != "") {
        var roles = [];
        var xl = new XmlList(t);
        xl.elements("app").elements("roles").elements("role").forEach(function(index) {
            roles.push({
                id: this.getAttribute("id"),
                title: this.getAttribute("title"),
                desc: this.getAttribute("desc")
            });
        });
        callback(roles);
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="_getAppZipConfig" args="data,callback" private="false">
        <CodeText>
          <![CDATA[params = {
    op  : "get.conf.file",
    uid : data.uid
};

GET("/vitria-oi/rest/app.mgr/apps", params, function(t) {
    if (t != null && t != "") {
        var config = {};
        var xl = new XmlList(t);
        xl.elements("app").forEach(function(index) {
            config.id = this.getAttribute("id");
            config.name = this.getAttribute("title");
            config.version = this.getElementsByTagName("version")[0].childNodes[0].nodeValue;
            config.buildNumber = this.getElementsByTagName("buildNumber")[0].childNodes[0].nodeValue;
            config.description = this.getElementsByTagName("description")[0].childNodes[0].nodeValue;
        });
        callback(config);
    }
    else {
        callback(null);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="_install" args="appId,uid,version,locale,callback" private="false">
        <CodeText>
          <![CDATA[params = {
    op  : "install",
    appid : appId,
    uid : uid,
    version : version
};

GET("/vitria-oi/rest/app.mgr/apps/" +  appId, params, function(t) {
    if (t != null && t != "") {
        var resultXml = new XmlList(t);
        resultXml.forEach(function(index) {
            var resultCode = this.getAttribute("resultCode");
            if (resultCode == "2") {
                require(["dojo/string"
                    ], function(string){
                    var info = string.substitute(locale.InstallAppExists, { "appid":params.appid});
                    message("info",locale.InstallApp,info);
                });
                callback([]);
            }
        });
        resultXml.elements("app").forEach(function(index) {
            var result = this.getAttribute("result");
            var reason = this.getAttribute("reason");
            var resultCode = this.getAttribute("resultCode");
            if (result == "fail") {
                message("error",locale.ErrorTitle,reason);
                callback([]);
            } else if (resultCode == "2") {
                require(["dojo/string"
                    ], function(string){
                    var info = string.substitute(locale.InstallAppExists, { "appid":params.appid});
                    message("info",locale.InstallApp,info);
                });
                callback([]);
            }else {
                callback(t);
            }
        });
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="_popup" args="title,msg,items,buttonDef,callback" private="false">
        <CodeText>
          <![CDATA[var itemStyle = {
    "width" : "100%",
    "font-family": "Arial",
    "border": "1px solid #f8f8f8",
    "border-bottom-color": "#148ac4",
    "height": "26px",
    "line-height": "26px",
    "padding-left": "5px !important",
    "padding-right": "5px !important"
};

items.forEach(function(item, index) {
    item.style = lang.clone(itemStyle);
    if (item.type == "boolean") {
        delete item.style.width;
        delete item.style.height;
        delete item.style['line-height'];
    }
});

var panelStyle = {
    width: "570px",
    "container" : {
        "background-color" : "white",
    },
    "form-label" : {
        "width" : "10%",
        "white-space" : "nowrap",
    },
    "form-value" : {
        "width" : "90%",
    },
};

prompt(
    title,
    msg,
    items,
    buttonDef,
    panelStyle,
    callback
);]]>
        </CodeText>
      </Function>
      <Function name="_unstall" args="id,callback" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/app.mgr/apps/" + id;
var params = {
  op : "uninstall"
};
POST(url, params, null, function(t) {
    if (t != null) {
        callback(t);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="_upgrade" args="appId,appName,uid,version,locale,callback" private="false">
        <CodeText>
          <![CDATA[params = {
    op  : "upgrade",
    appid : appId,
    uid : uid,
    version : version
};

GET("/vitria-oi/rest/app.mgr/apps/" +  appId, params, function(t) {
    if (t != null && t != "") {
        var resultXml = new XmlList(t);
        resultXml.elements("app").forEach(function(index) {
            var result = this.getAttribute("result");
            if (result == "success") {
                require(["dojo/string"
                    ], function(string){
                    var info = string.substitute(locale.UpgradeAppSuccess, { "appName":appName});
                    message("info",locale.UpgradeApp,info);
                });
                callback(t);
            } else {
                callback([]);
            }
        });
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doAddRoleMember" args="appId,role,users,groups,callback" private="false">
        <CodeText>
          <![CDATA[var usersValue = [];
if (users) {
    for (var i = 0; i < users.length; i++) {
        usersValue.push(users[i].id);
    }
}

var groupsValue = [];
if (groups) {
    for (var i = 0; i < groups.length; i++) {
        groupsValue.push(groups[i].id);
    }
}

var params = {
    resourceId : appId,
    roles : role,
    users : usersValue.join(","),
    groups: groupsValue.join(",")
};

GET("/vitria-oi/rest/security/addRoleMember", params, function(t) {
    callback(t);
});]]>
        </CodeText>
      </Function>
      <Function name="doExportInstalledapp" args="id,name,version,modifiedOn,modifiedBy,state,status,removable,licensed,locale,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var self = this;
var items = [ 
    {name: "id", label: locale.ID, type: "string", value: id, disabled: true},
    {name: "name", label: locale.Name, type: "string", value: name, disabled: true},
    {name: "version", label: locale.Version, type: "string", value: version, disabled: true}
];
var actions = [// may be null, in which case, default OK/Cancel buttons used
    {label: locale.OK, value: true, "class": "saveButton"},
    {label: locale.Cancel, value: false},
];
function popupForm(okCallback)
{
    self._popup(
        locale.ExportApp,
        locale.ConfirmAppToExport,
        items,
        actions,
        okCallback
    );
}
    
function getFileName(t) {
    var file = "";
    if (t != null && t != "") {
        var xl = new XmlList(t);
        xl.elements("app").forEach(function(index) {
            file = this.getAttribute("file");
        });
    }
    return file;
}

popupForm(function(value, info) {
    if ( value == true ) {
        var params = {
            op : "export"
        };
        POST("/vitria-oi/rest/app.mgr/apps/" + id, params, null, function(t) {
            if (t != null) {
                var fileName = getFileName(t);
                callback(fileName);
            }
        });
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doInstallApp" args="data,locale,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;

this._getAppZipConfig(data, function(t) {
    if (t != null && t != "") {
        confirm(t, function(value, info) {
            if (value == true) {
                self._install(t.id, data.uid, t.version,locale, callback);
            }
        });
    }
});

function confirm(t, okCallback) {
    var items = [ 
        {name: "id", label: locale.ID, type: "string", value: t.id, disabled: true}, 
        {name: "name", label: locale.Name, type: "string", value: t.name, disabled: true}, 
        {name: "version", label: locale.Version, type: "string", value: t.version, disabled: true}, 
        {name: "build", label: locale.Build, type: "string", value: t.buildNumber, disabled: true}, 
        {name: "description", label: locale.Description, type: "string", value: t.description, disabled: true}, 
    ];
    self._popup(locale.Confirm, locale.ConformToInstallApp, items, null, okCallback);
}
]]>
        </CodeText>
      </Function>
      <Function name="doListAppModels" args="id,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var params = {
    status : "All",
    op : "list.models"
};

GET("/vitria-oi/rest/app.mgr/apps/" + id, params, function(t) {
    if (t != null && t != "") {
        var apps = [];
        var xl = new XmlList(t);
        xl.elements("model").forEach(function(index) {
            apps.push({
                id         : this.getAttribute("id"),
                name       : this.getAttribute("path"),
                status       : this.getAttribute("status")
            });
        });
        callback(apps);
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doListInstallApps" args="callback" private="false">
        <CodeText>
          <![CDATA[GET("/vitria-oi/rest/app.mgr/apps", {
    license: 'true'
}, function(t) {
    if (t != null && t != "") {
        var apps = [];
        var xl = new XmlList(t);
        xl.elements("app").forEach(function(index) {
            var app = {
                id         : this.getAttribute("id"),
                name       : this.getAttribute("title"),
                version    : this.getAttribute("version"),
                modifiedOn : new Date(Number(this.getAttribute("modified"))),
                modifiedBy : this.getAttribute("modifiedBy"),
                state      : this.getAttribute("state"),
                status     : this.getAttribute("status"),
                removable  : this.getAttribute("removable"),
                buildNumber: this.getAttribute("buildNum"),
                licensed   : this.getAttribute("licenseok") == "true" ? "valid" : "invlaid",
            };
            apps.push(app);
        });
        callback(apps);
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doListRoleMember" args="resourceId,roles,onsuccess,onfail" private="false">
        <CodeText>
          <![CDATA[var parameters = {};
parameters.resourceId = resourceId;
parameters.roles = roles;
parameters.format = "json";
GET('/vitria-oi/rest/security/listRoleMember', parameters, function(response){
    if (response !== null && response !== "") { 
        var members = [];
        var xml = new XmlList(response);
        xml.elements("Member").forEach(function(index) {
            members.push({
                id         : this.getAttribute("id"),
                name       : this.getAttribute("name"),
                type       : this.getAttribute("isUser") == "false"? "group" : "user"
            });
        });
        onsuccess(members);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doListUsers" args="format,callback" private="false">
        <CodeText>
          <![CDATA[function getUserInfo(users, callback)
{
    if (users.length == 0) {
        callback();
    }
    else {
        var user = users.shift();
        GET("/vitria-oi/rest/users/"+user.name, null, function(t) {
            if (t != null && t != "") {
                var xl = new XmlList(t);
                xl.elements("user").elements("p").forEach(function(index) {
                    switch (this.getAttribute("name")) {
                        case "fullname":
                            user.fullname = this.textContent;
                            break;
                        case "emails":
                            user.emails = this.textContent;
                            break;
                        case "phones":
                            user.phones = this.textContent;
                            break;
                        case "enabled":
                            user.enabled = this.textContent;
                            break;
                        case "phones":
                            user.phones = this.textContent;
                            break;
                        case "runtime_server_list":
                            user.runtime_server_list = this.textContent;
                            break;
                        case "feed_server_list":
                            user.feed_server_list = this.textContent;
                            break;
                        case "datasource_list":
                            user.datasource_list = this.textContent;
                            break;
                        case "defaultServerList":
                            user.defaultServerList = this.textContent;
                            break;
                        case "vs_list":
                            user.vs_list = this.textContent;
                            break;
                    }
                });
            }
            // some information currently NOT available with this API
            // - type of user (workbench or apps)
            // - domain admin
            // - security admin
            user.type = "(unknown)";
            user.domainAdmin = "(unknown)";
            user.securityAdmin = "(unknown)";
            getUserInfo(users, callback)
        });
    }
}

function full(t) {
    var users = [];
    var xl = new XmlList(t);
    xl.elements("user").forEach(function(index) {
        users.push({
            name : this.getAttribute("name"),
        });
    });
    getUserInfo(users.slice(0), function() {
        callback(users);
    });
}

function commar(t) {
    var users = "";
    var xl = new XmlList(t);
    xl.elements("user").forEach(function(index) {
        if (index != 0) {
            users = users + ",";
        }
        users = users + this.getAttribute("name");
    });
    callback(users);
}

GET("/vitria-oi/rest/users?op=listm3ousers", null, function(t) {
    if (t != null && t != "") {
        if (format == "commar") {
            commar(t);
        } else {
            full(t);
        }
    }
    else {
        callback([]);
    }
});
]]>
        </CodeText>
      </Function>
      <Function name="doPurgeAppModel" args="appId,modelId,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var params = {
    op : "purge.model",
    id : modelId
};
POST("/vitria-oi/rest/app.mgr/apps/" + appId, params, null, function(t) {
    if (t != null) {
        callback(t);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doRemoveInstalledApp" args="id,name,version,modifiedOn,modifiedBy,state,status,removable,licensed,locale,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;
var items = [ 
    {name: "id", label: locale.ID, type: "string", value: id, disabled: true},
    {name: "name", label: locale.Name, type: "string", value: name, disabled: true},
    {name: "version", label: locale.Version, type: "string", value: version, disabled: true}
];

function popupForm(okCallback)
{
    var message =   locale.CannotRemove;
    var actions =   [
        {label: locale.OK, value: false, "class": "saveButton"},
    ];
    if( removable == true || removable == "true" ){
        message = locale.ConfirmToRemove;
        actions =   [
            {label: locale.OK, value: true, "class": "saveButton"},
            {label: locale.Cancel, value: false},
        ];
    }
    
    self._popup(
        locale.UninstallApp,
        message,
        items,
        actions,
        okCallback
    );
}
    

popupForm(function(value, info) {
    if ( value == true ) {
        var parameters = {};
        parameters.op = "uninstall";
        var headers = {};
        var url = "/vitria-oi/rest/app.mgr/apps/" + id;
        POST(url, parameters,headers, function(response){
            callback(response);
        },true);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doRemoveRoleMember" args="appId,role,users,groups,callback" private="false">
        <CodeText>
          <![CDATA[var usersValue = [];
if (users) {
    for (var i = 0; i < users.length; i++) {
        usersValue.push(users[i].id);
    }
}

var groupsValue = [];
if (groups) {
    for (var i = 0; i < groups.length; i++) {
        groupsValue.push(groups[i].id);
    }
}

var params = {
    resourceId : appId,
    roles : role,
    users : usersValue.join(","),
    groups: groupsValue.join(",")
};

GET("/vitria-oi/rest/security/removeRoleMember", params, function(t) {
    callback(t);
});]]>
        </CodeText>
      </Function>
      <Function name="doStartAppModel" args="appId,modelId,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var params = {
    op : "start.model",
    id : modelId
};
POST("/vitria-oi/rest/app.mgr/apps/" + appId, params, null, function(t) {
    if (t != null) {
        callback(t);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doStopAppModel" args="appId,modelId,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var params = {
    op : "stop.model",
    id : modelId
};
POST("/vitria-oi/rest/app.mgr/apps/" + appId, params, null, function(t) {
    if (t != null) {
        callback(t);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doUpdateInstalledApp" args="id,name,version,buildNumber,modifiedOn,modifiedBy,state,status,removable,licensed,locale,callback" private="false">
        <CodeText>
          <![CDATA[// add custom code
var self = this;
var items = [ 
    {name: "id", label: locale.ID, type: "string", value: id, disabled: true},
    {name: "name", label: locale.Name, type: "string", value: name, disabled: true},
    {name: "version", label: locale.Version, type: "string", value: version, disabled: true},
    {name: "version", label: locale.Build, type: "string", value: buildNumber, disabled: true},
    {name: "modifiedOn", label: locale.ModifiedOn, type: "string", value: modifiedOn, disabled: true},
    {name: "modifiedBy", label: locale.ModifiedBy, type: "string", value: modifiedBy, disabled: true},
    {name: "enabled", label: locale.Enabled, type: "boolean", value:  state == "enable" , disabled: false},
    {name: "status", label: locale.Status, type: "string", value: status, disabled: true},
    {name: "removable", label: locale.Removable, type: "boolean", value: removable == true, disabled: true},
    {name: "licensed", label: locale.Licensed, type: "boolean", value: licensed == true, disabled: true},
];
var actions = [
    {label: locale.OK, value: true, "class": "saveButton"},
    {label: locale.Cancel, value: false},
];
function popupForm(okCallback)
{
    self._popup(
        locale.UpdateApp,
        locale.ProvideAppInfo,
        items,
        actions,
        okCallback
    );
}
    
popupForm(function(value, info) {
    if ( value == true ) {
        if (info["enabled"] != (state == "enable")) {
            var params = {
                op : info["enabled"] ? "enable" : "disable"
            };
            POST("/vitria-oi/rest/app.mgr/apps/" + id, params, null, function(t) {
                if (t != null && t != null) {
                    callback("changed");
                }
            });
        }
    }
});]]>
        </CodeText>
      </Function>
      <Function name="doUpgradeApp" args="selection,data,locale,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;

this._getAppZipConfig(data, function(t) {
    if (t != null && t != "") {
        if (t.id == selection.id) {
            confirm(t, function(value, info) {
                if (value == true ) {
                    self._upgrade(t.id,t.name, data.uid, t.version, locale,callback);
                }
            });
        } else {
            cannotUpgrade(selection.id, t.id);
        }
    }
});

function confirm(t, okCallback) {
    var items = [ 
        {name: "id", label: locale.ID, type: "string", value: t.id, disabled: true}, 
        {name: "name", label: locale.Name, type: "string", value: t.name, disabled: true}, 
        {name: "fromVersion", label: locale.SourceVersion, type: "string", value: selection.version, disabled: true}, 
        {name: "fromBuild", label: locale.FromBuild, type: "string", value: selection.buildNumber, disabled: true}, 
        {name: "toVersion", label: locale.TargetVersion, type: "string", value: t.version, disabled: true}, 
        {name: "toBuild", label: locale.ToBuild, type: "string", value: t.buildNumber, disabled: true},
    ];
    self._popup(locale.Confirm, locale.ConformToUpgradeApp, items, null, okCallback);
}

function cannotUpgrade(sourceAppId, targetAppId) {
    var items = [ 
        {name: "sourceAppId", label: locale.SourceAppId, type: "string", value: sourceAppId, disabled: true}, 
        {name: "targetAppId", label: locale.TargetAppId, type: "string", value: targetAppId, disabled: true} 
    ];
    self._popup(locale.Confirm, locale.CannotUpgradeApp, items, null, null);
}
]]>
        </CodeText>
      </Function>
    </Functions>
    <Services/>
    <Resources>
      <Resource uuid="3b07cce4-e101-4613-8b05-dd84f097ca94" name="en-us" type="application/json" size="2494" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins/>
  </ModelInfo>
</DashboardPluginModel>
