<DashboardPluginModel description="Admin Deployed Projects Actions and Widget" name="Admin - Deployed Projects Plugin" is_init="false">
  <ModelInfo validated="true">
    <Properties/>
    <Widgets>
      <Widget name="ProjectDetailTabbar" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._generalDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::General}"));
            $(this._urlDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::URL}"));
            $(this._resourceDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Resource}"));
            $(this._monitorDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Monitor}"));
            $(this._shareDiv).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Sharing}"));
        },
        
        _generalSelect: function() {
            if (this._selected == "general") return;
            
            this._selected = "general";
            this._clearSelected();
            domClass.add(this._generalDiv, "dojoDndItemSelected");
            this.onUpdateSelection();
        },
        
        _urlSelect: function() {
            if (this._selected == "url") return;
            
            this._selected = "url";
            this._clearSelected();
            domClass.add(this._urlDiv, "dojoDndItemSelected");
            this.onUpdateSelection();
        },
        
        _resourceSelect: function() {
            if (this._selected == "resource") return;
            
            this._selected = "resource";
            this._clearSelected();
            domClass.add(this._resourceDiv, "dojoDndItemSelected");
            this.onUpdateSelection();
        },
        
        _monitorSelect: function() {
            if (this._selected == "monitor") return;
            
            this._selected = "monitor";
            this._clearSelected();
            domClass.add(this._monitorDiv, "dojoDndItemSelected");
            this.onUpdateSelection();
        },
        
        _shareSelect: function() {
            if (this._selected == "share") return;
            
            this._selected = "share";
            this._clearSelected();
            domClass.add(this._shareDiv, "dojoDndItemSelected");
            this.onUpdateSelection();
        },
        
        _clearSelected: function() {
            [this._generalDiv, this._urlDiv, this._resourceDiv, this._monitorDiv, this._shareDiv].forEach(function (div) {
                domClass.remove(div, "dojoDndItemSelected");
            });
        },
        
        onUpdateSelection: function () {
            if (!this.renderer) return;
            
            this.renderer.updateSelection([{ value:this._selected } ]);
        }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this._selected = "general";]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.baseConfig || !evt.locale) return;
            
            this.baseConfig = evt.baseConfig;
            this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
            this.locale = evt.locale;
            this._localeHandler();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="horizontal-flex projectDetailTabbar tabbar tabBarWithTitle" style="width:100%;height:100%;justify-content: flex-start;">
    <div class="vertical-flex tabBarItem tabTD dojoDndItem dojoDndItemSelected"
        data-dojo-attach-point="_generalDiv"
        data-dojo-attach-event="click:_generalSelect">
        General
    </div>
    <div class="vertical-flex tabBarItem tabTD dojoDndItem"
        data-dojo-attach-point="_urlDiv"
        data-dojo-attach-event="click:_urlSelect">
        URL
    </div>
    <div class="vertical-flex tabBarItem tabTD dojoDndItem"
        data-dojo-attach-point="_resourceDiv"
        data-dojo-attach-event="click:_resourceSelect">
        Resource
    </div>
    <div class="vertical-flex tabBarItem tabTD dojoDndItem"
        data-dojo-attach-point="_monitorDiv"
        data-dojo-attach-event="click:_monitorSelect">
        Monitor
    </div>
    <div class="vertical-flex tabBarItem tabTD dojoDndItem" 
        data-dojo-attach-point="_shareDiv"
        data-dojo-attach-event="click:_shareSelect">
        Sharing 
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="ProjectGeneralInfo" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _buildLayout: function() {
            var leftItems = [{
                label: "Name",
                name: "name"
            }, {
                label: "Project",
                name: "project"
            }, {
                label: "Runtime server",
                name: "server"
            }, {
                label: "Release",
                name: "release"
            }];
            
            var rightItems = [{
               label: "Status",
               name: "status"
            }, {
                label: "Type",
                name: "type"
            }, {
                label: "Deployer",
                name: "deployer"
            }, {
                label: "Time deployed",
                name: "deployTime"
            }];
            
            AppUtil.removeAllChildrenOf(this._leftDiv);
            AppUtil.removeAllChildrenOf(this._rightDiv);
            var prj = this.prj;
            var self = this;
            leftItems.forEach(function(item) {
                self._buildItem(item.label, prj[item.name], self._leftDiv);
            });
            
            rightItems.forEach(function(item) {
                var value = prj[item.name];
                if (item.name == 'deployTime') {
                    value = (new Date(Number(value))).toString();
                }
                self._buildItem(item.label, value, self._rightDiv);
            });
        },
        
        _buildItem: function(label, value,  parent) {
            var plugin = this.helperPlugin;
            var locale = this.locale;
            var baseConfig = this.baseConfig;
            label = plugin.localize(baseConfig.locale.project, locale, "{i18n::" + label + "}");
            var div = domConstruct.create("div", {
                'style': 'width: 100%',
                'class': 'horizontal-flex project-detail-info-item'
            });
            parent.appendChild(div);
            
            var subDiv = domConstruct.create("div", {
                'style': 'width: 30%',
                'class': 'horizontal-flex project-detail-info-sub-item',
                'innerHTML': label
            });
            div.appendChild(subDiv);
            
            subDiv = domConstruct.create("div", {
                'style': 'width: 70%',
                'class': 'horizontal-flex project-detail-info-sub-item'
            });
            div.appendChild(subDiv);
            
            var input = domConstruct.create("input", {
                style: "width: 100%;",
                disabled: 'true',
                value: value,
                'class': 'horiziontal-flex project-detail-info-input'
            })
            subDiv.appendChild(input);
        }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.baseConfig || !evt.locale) return;
            
            this.baseConfig = evt.baseConfig;
            this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
            this.adminPlugin = Plugin(evt.baseConfig.pluginName);
            this.locale = evt.locale;
            this.prj = evt.prj;
            
            this._buildLayout();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="horizontal-flex" style="width:100%;height:100%;">
    <div class="vertical-flex project-detail-info-content" style="width: 50%;height: 100%" data-dojo-attach-point="_leftDiv">
    </div>
    <div class="vertical-flex project-detail-info-content" style="width: 50%;height: 100%" data-dojo-attach-point="_rightDiv">
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="ProjectShare" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.baseConfig || !evt.locale) return;
            
            this.baseConfig = evt.baseConfig;
            this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
            this.projectPlugin = Plugin(evt.baseConfig.projectPluginName);
            this.adminPlugin = Plugin(evt.baseConfig.pluginName);
            this.locale = evt.locale;
            this.prj = evt.prj;
            this._initSpace = null;
            this._buildLayout();
            
            if (!this._isWorkbenchProject()) {
                this._shareCheckBox.set('value', false, false);
                this._shareCheckBox.setDisabled(true);
                domStyle.set(this._spaceSelectContainer, {
                    display: 'none'
                });
            } else {
            }]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _buildLayout: function() {
            var plugin = this.helperPlugin;
            var locale = this.locale;
            this._shareCheckBoxLabel.innerHTML = this._getI18NStr("Share To Space");
            var self = this;
            domStyle.set(this._iconItem, {
               color: "#EEEEEE" 
            });
            
            if (!this._isWorkbenchProject()) return;
                
            this.adminPlugin.doListSpaces(function(result) {
                result.forEach(function (space) {
                    self._spaceSelect.addOption({
                        label: space.label,
                        value: space.name
                    });
                });
                self._initSpaceSelect();
            });
        },
        
        _initSpaceSelect: function () {
            var plugin = this.projectPlugin;
            var self = this;
            plugin.projectShareExcute('getsharedspace', null, this.prj, this.baseConfig, this.locale, function(space) {
                if (space && space.length > 0) {
                    self._initSpace = space;
                    self._spaceSelect.set('value', space, false);
                    self._shareCheckBox.set('value', true, false);
                    domStyle.set(self._spaceSelectContainer, {
                        display: ''
                    });
                }
            });
        },
        
        _getI18NStr: function (str) {
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            var plugin = this.helperPlugin;
            return plugin.localize(baseConfig.locale.project, locale, "{i18n::" + str + "}");
        },
        
        _onShareChange: function () {
            var value = this._shareCheckBox.get('value');
            if (value) {
                domStyle.set(this._spaceSelectContainer, {
                    display: ''
                });
            } else {
                var plugin = this.projectPlugin;
                var self = this;
                if (this._initSpace == null) return;
                plugin.projectShareExcute('unshare', null, this.prj, this.baseConfig, this.locale, function(result) {
                    if (result == 'OK') {
                        self._initSpace = null;
                        domStyle.set(self._iconItem, {
                           color: "#EEEEEE" 
                        });
                        domStyle.set(self._spaceSelectContainer, {
                            display: 'none'
                        });
                    }
                });
            }
        },
        
        _onSpaceSelectChange: function () {
            var space = this._spaceSelect.get('value');
            if (space != this._initSpace) {
                domStyle.set(this._iconItem, {
                   color: "#148ac4" 
                });
            } else {
                domStyle.set(this._iconItem, {
                   color: "#EEEEEE" 
                });
            }
        },
        
        _onSave: function () {
            var space = this._spaceSelect.get('value');
            if (space == this._initSpace) return;
            
            var plugin = this.projectPlugin;
            var self = this;
            plugin.projectShareExcute('share', space, this.prj, this.baseConfig, this.locale, function(result) {
                if (result == 'OK') {
                    self._initSpace = space;
                    domStyle.set(self._iconItem, {
                       color: "#EEEEEE" 
                    });
                }
            });
        },
        
        _isWorkbenchProject: function() {
            var name = this.prj.name;
            return name.indexOf('/home/') == 0;
        }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="vertical-flex project-share-widget" style="width:100%;height:100%;" data-dojo-attach-point="_main">
    <div class="horizontal-flex" style="width:100%;height:40px">
        <div class="horizontal-flex">
            <input type="checkbox" id="${id}_shareCheckBox"
               data-dojo-attach-point="_shareCheckBox"
               data-dojo-type="dijit/form/CheckBox"
               data-dojo-attach-event="onChange: _onShareChange"
            />
            <label for="${id}_shareCheckBox"
                data-dojo-attach-point='_shareCheckBoxLabel'
                class="noEmphasizedLabel horizontal-flex">
            </label>
        </div>
        <div class="horizontal-flex" data-dojo-attach-point="_spaceSelectContainer" style="display: none;">
            <div class="horizontal-flex project-share-widget-item">
                <select value="time" style="width:150px"
                    data-dojo-attach-point="_spaceSelect"
                    data-dojo-type="dijit/form/Select"
                    data-dojo-attach-event='onChange: _onSpaceSelectChange'
                    class="editorFormValue">
                </select>
            </div>
            <div class="horizontal-flex project-share-widget-item" 
                data-dojo-attach-point="_iconItem"
                data-dojo-attach-event='click: _onSave'>
                <i class="fas fa-2x fa-save"></i>
            </div>
        </div>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="ProjectUrl" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.baseConfig || !evt.locale) return;
            
            this.baseConfig = evt.baseConfig;
            this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
            this.adminPlugin = Plugin(evt.baseConfig.pluginName);
            this.locale = evt.locale;
            this.prj = evt.prj;
            
            this._buildLayout();]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _buildURLInfo: function() {
            var prj = this.prj;
            var prefix = window.location.origin + "/vitria-oi/?type=apps&prj=" + prj.project;
            
            return {
                prj: "prj=" + prj.project,
                appview: prefix + "&ws=appview",
                workflow: prefix + "&ws=workflow",
                transaction: prefix + "&ws=transaction"
            };
        },
        
        _buildLayout: function() {
            var items = [{
                label: "Project ID",
                name: "prj"
            }, {
                label: "App View URL",
                name: "appview"
            }, {
                label: "Workflow URL",
                name: "workflow"
            }, {
                label: "Transaction URL",
                name: "transaction"
            }];
            
            AppUtil.removeAllChildrenOf(this._main);
            var prj = this._buildURLInfo();
            var self = this;
            items.forEach(function(item) {
                self._buildItem(item.label, prj[item.name], self._main);
            });
        },
        
        _buildItem: function(label, value,  parent) {
            var plugin = this.helperPlugin;
            var locale = this.locale;
            var baseConfig = this.baseConfig;
            label = plugin.localize(baseConfig.locale.project, locale, "{i18n::" + label + "}");
            var tipLabel = plugin.localize(baseConfig.locale.project, locale, "{i18n::" + label + " Tip}");
            
            var itemDiv = domConstruct.create("div", {
                'style': 'width: 100%',
                'class': 'vertical-flex project-url-info-content'
            });
            parent.appendChild(itemDiv);
            
            var urlDiv = domConstruct.create("div", {
                'style': 'width: 100%',
                'class': 'horizontal-flex project-url-info-item'
            });
            itemDiv.appendChild(urlDiv);
            
            var tipDiv = domConstruct.create("div", {
                'style': 'width: 100%',
                'class': 'horizontal-flex project-url-tip-item'
            }); 
            itemDiv.appendChild(tipDiv);
            
            var subDiv = domConstruct.create("div", {
                'style': 'width: 150px',
                'class': 'horizontal-flex project-url-info-sub-item',
                'innerHTML': label
            });
            urlDiv.appendChild(subDiv);
            subDiv = domConstruct.create("div", {
                'style': 'width: 150px',
                'class': 'horizontal-flex project-url-tip-sub-item'
            });
            tipDiv.appendChild(subDiv);
            
            
            subDiv = domConstruct.create("div", {
                'style': 'width: calc(100% - 250px)',
                'class': 'horizontal-flex project-url-info-sub-item'
            });
            urlDiv.appendChild(subDiv);
            var input = domConstruct.create("input", {
                style: "width: 100%;",
                disabled: 'true',
                value: value,
                'class': 'horiziontal-flex project-url-info-input'
            })
            subDiv.appendChild(input);
            
            subDiv = domConstruct.create("div", {
                'style': 'width: calc(100% - 250px)',
                'class': 'horizontal-flex project-url-tip-sub-item',
                'innerHTML': tipLabel
            });
            tipDiv.appendChild(subDiv);
            
            subDiv = domConstruct.create("div", {
                'style': 'width: 100px',
                'class': 'horizontal-flex project-url-info-sub-item'
            });
            urlDiv.appendChild(subDiv);
            this.own(on(subDiv, "click", function(ev) {
                window.open(value, '_blank');
            }));
            var icon = domConstruct.create("i", {
                'class': 'fas fa-link'
            })
            subDiv.appendChild(icon);
            
            subDiv = domConstruct.create("div", {
                'style': 'width: 100px',
                'class': 'horizontal-flex project-url-tip-sub-item'
            });
            tipDiv.appendChild(subDiv);
        }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="vertical-flex project-url-content" style="width:100%;height:100%;" data-dojo-attach-point="_main">
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="ResourceDetail" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.baseConfig || !evt.locale || !evt.resource) return;
            
            this.baseConfig = evt.baseConfig;
            this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
            this.projectPlugin = Plugin(evt.baseConfig.projectPluginName);
            this.locale = evt.locale;
            this.prj = evt.prj;
            this.resource = evt.resource;
            this._buildLayout();]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _buildLayout: function() {
            AppUtil.removeAllChildrenOf(this._headerBar);
            AppUtil.removeAllChildrenOf(this._container);
            
            this._actions = [];
            this._detailItems = [];
            this._buildResourceDetail();
        },
        
        _buildResourceDetail: function() {
            var projectPlugin = this.projectPlugin;
            this.resourceMeta = projectPlugin.getResourceMetaInfo(this.prj, this.resource, this.baseConfig, this.locale);
            var meta = this.resourceMeta;
            if (meta.actions && meta.actions.length > 0) {
                this._buildActions();
                this._updateActionsStatus();
            }
            
            this._buildItems();
        },
        
        _updateActionsStatus: function() {
            var prj = this.prj;
            var resource = this.resource;
            this._actions.forEach(function (map) {
                var action = map.action;
                var div = map.div;
                if (action.status.enable.condition(prj, resource)) {
                    div.style = 'color:' + action.status.enable.color + ';'
                } else {
                    div.style = 'color:' + action.status.disable.color + '; pointer-events: none;'
                }
            });
        },
        
        _buildActions: function() {
            var meta = this.resourceMeta;
            var actions = meta.actions || [];
            var self = this;
            actions.forEach(function (action) {
                self._buildAction(action);
            });
        },
        
        _buildAction: function(action) {
            var plugin = this.projectPlugin;
            
            var actionMap = {action: action};
            this._actions.push(actionMap);
            
            var item = domConstruct.create("div", {
                'class': 'horizontal-flex project-resource-action-item'
            });
            var self = this;
            this.own(on(item, "click", function(ev) {
                self._excuteAction(action);
            }));
            this._headerBar.appendChild(item);
            actionMap.div = item;
            
            var icon = domConstruct.create("div", {
                'class': 'fa fa-lg ' + action.icon
            });
            item.appendChild(icon);
        },
        
        _excuteAction: function (action) {
            var plugin = this.projectPlugin;
            var self = this;
            plugin.excuteResourceAction(this.prj, this.resource, action, this.baseConfig, this.locale, function (result) {
                self._updateItems();
                self._updateActionsStatus();
            });
        },
        
        _updateItems: function() {
            var resource = this.resource;
            this._detailItems.forEach(function (item) {
                var schema = item.schema;
                var div = item.valueDiv;
                div.innerHTML = resource[schema.name];
            });
        },
        
        _buildItems: function() {
            var meta = this.resourceMeta;
            var schema = meta.schema;
            var self = this;
            schema.forEach(function (item) {
                self._buildItem(item);
            });
        },
        
        _buildItem: function(schema) {
            var resource = this.resource;
            var locale = this.locale;
            var plugin = this.projectPlugin;
            
            var itemMap = {schema: schema};
            this._detailItems.push(itemMap);
            var itemDiv = domConstruct.create("div", {
                'style': 'width: 100%',
                'class': 'horizontal-flex project-resource-detail-item'
            }); 
            this._container.appendChild(itemDiv);
            
            var subItemDiv = domConstruct.create("div", {
                'style': 'width: 150px',
                'class': 'horizontal-flex project-resource-detail-sub-item',
                'innerHTML': this._getI18NStr(schema.label)
            }); 
            itemDiv.appendChild(subItemDiv);
            
            subItemDiv = domConstruct.create("div", {
                'style': 'width: calc(100% - 150px)',
                'class': 'horizontal-flex project-resource-detail-sub-item',
                'innerHTML': this._getI18NStr(resource[schema.name])
            }); 
            itemMap.valueDiv = subItemDiv;
            itemDiv.appendChild(subItemDiv);
        },
        
        _getI18NStr: function (str) {
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            var plugin = this.helperPlugin;
            return plugin.localize(baseConfig.locale.project, locale, "{i18n::" + str + "}");
        }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="vertical-flex resource-detail-widget" style="width:100%;height:100%;">
    <div class="horizontal-flex resource-detail-header" 
        style="width: 100%; height: 30px;">
        <div class="horizontal-flex"
            data-dojo-attach-point="_headerBar"
            style="width: auto; height: 30px;">
        </div>
    </div>
    <div class="vertical-flex resource-detail-container" 
        data-dojo-attach-point="_container"
        style="width:100%;height:calc(100% - 35px);">
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="ServerSelected" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        
        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this.titleNode).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Server Select}"));
            $(this.defaultPoolLabel).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Default server pool}"));
            $(this.specifiedServerLabel).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Specified server}"));
            $(this.saveButton).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Save}"));
            $(this.cancelButton).html(plugin.localize(baseConfig.locale.project, locale, "{i18n::Cancel}"));
        },

        _defaultPoolSelected: function() {
            this._defaultPool = true;
            domStyle.set(this._gridContainer, "display", "none");
            if (!this.renderer) return;
            
            this.renderer.updateSelection([{
                op: "serverTypeChange",
                type: "defaultPool"
            }]);
        },
        
        _specifiedServerSelected: function() {
            this._defaultPool = false;
            domStyle.set(this._gridContainer, "display", "");
            if (this._grid) {
                this._grid.updateWidthAndHeight(this.vtWidth - 20, this.vtHeight - 115);
            }
            
            if (!this.renderer) return;
            this.renderer.updateSelection([{
                op: "serverTypeChange",
                type: "specifiedServer"
            }]);
        },
        
        _buildLayout: function() {
            this._createGridSchema();
            this._doCreateGrid();
        },
        
        _createGridSchema: function() {
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            this.serverSchema = [{
                name  : "serverName",
                label : this.helperPlugin.localize(baseConfig.locale.project, locale, "{i18n::Name}"),
                type  : "string"
            }, {
                name  : "pool",
                label : this.helperPlugin.localize(baseConfig.locale.project, locale, "{i18n::Pool}"),
                type  : "string"
            }, {
                name  : "cpu",
                label : this.helperPlugin.localize(baseConfig.locale.project, locale, "{i18n::Cpu}"),
                type  : "string"
            }, {
                name  : "heap",
                label : this.helperPlugin.localize(baseConfig.locale.project, locale, "{i18n::Total Memory}"),
                type  : "string"
            }, {
                name  : "heapAvailable",
                label : this.helperPlugin.localize(baseConfig.locale.project, locale, "{i18n::Memory Available}"),
                type  : "string"
            }];
        },
        
        _doCreateGrid: function() {
            this.dgridProperties = {
                borderType:"all",
                columnDefaultSetting:'{"columnFont":{"fontStyle":"normal","fontSize":"12","fontWeight":"normal","color":"#000000"}}',
                columnReorder:"disable",
                columnResize:"enable",
                columnSortable:"enable",
                dataExport:"enable",
                headerStyle:'{"header":{"style":{"fontStyle":"normal","fontSize":"14px","fontWeight":"normal","color":"#000000"}}}',
                highLightSetting:"[]",
                lineWrapping:"disable",
                lockedColumns:"0",
                pagination:"disable",
                rowSpacing:"5",
                selectionMode:"single",
                showHeader:"enable",
                showSummary:"disable"
            };
            
            var self = this;
            require(["widgetcore/renderers/foundation/DGridRenderer"], function (Renderer) {
                self._grid = new Renderer({
                    enableSelector: true,
                    viewer      : "viewer",
                    tile        : null,
                    controller  : self.controller,
                    properties  : self.dgridProperties,
                    model       : null,
                    parser      : null,
                    params      : null,
                    meta        : null,
                    schema      : self.serverSchema,
                    result      : self.serverList,
                    raw         : "<RecordCollection></RecordCollection>",
                    realData    : self.serverList,
                    vtWidth     : self.vtWidth - 20,
                    vtHeight    : 250,
                    vtWidthInfo : {},
                    vtHeightInfo: {}
                }, self._gridContent);
                self._grid.startup();
                aspect.after(self._grid, "updateSelection", function (selection) {
                    self.onUpdateSelection(selection);
                }, true);
            });
        },
        
        onUpdateSelection: function (selection) {
            this._selection = selection;
        },
        
        _onSave: function() {
            if (!this.renderer) return;
            
            if (this._defaultPool) {
                this.renderer.updateSelection([{
                    op: "serverSelected",
                    type: "defaultPool"
                }]);
            } else if (this._selection && this._selection.length > 0) {
                this.renderer.updateSelection([{
                    op: "serverSelected",
                    type: "specifiedServer",
                    server: this._selection[0]
                }]);
            }
        },
        
        _onCancel: function() {
            if (!this.renderer) return;
            
            this.renderer.updateSelection([{
                op: "cancel"
            }]);
        }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this._defaultPool = true;
            this._localed = false;]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._grid) this._grid.destroy();]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._grid) {
                this._grid.updateWidthAndHeight(this.vtWidth - 20, this.vtHeight - 150);
            }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.baseConfig || !evt.locale) return;
            
            this.baseConfig = evt.baseConfig;
            this.helperPlugin = Plugin(evt.baseConfig.helperPluginName);
            this.adminPlugin = Plugin(evt.baseConfig.pluginName);
            this.locale = evt.locale;
            this.serverList = evt.serverList;
            this.serverList.forEach(function (server) {
               server.cpu = Number(Number(server.cpu) * 100).toFixed(0) + "%";
               server.heap = Number(server.heap).toFixed(0) + "K";
               server.heapAvailable = Number(server.heapAvailable).toFixed(0) + "K";
            });
            
            if (!this._localed) {
                this._localeHandler();
                this._localed = true;
            }
            
            if (!this._grid) {
                this._buildLayout();
            } else {
                this._grid.result = this.serverList;
                this._grid.clearSelection(true);
                this._grid.doRefresh();
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="vertical-flex appDialog" style="width:100%;height:100%;">
    <div class="appDialogTitleBar">
        <span class="t-x1 appDialogTitle" data-dojo-attach-point="titleNode">
            Server Select
        </span>
    </div>
    <div class="vertical-flex appDialogContent" style="width: 100%; height: calc(100% - 64px); padding: 10px; justify-content: flex-start; background-color: #FFFFFF;">
        <div class="" style="width: 100%; height: 30px">
            <input id="defaultPool" name="serverType" value="defaultPool" type="radio" data-dojo-attach-event="click:_defaultPoolSelected" checked/>
            <label for="defaultPool" data-dojo-attach-point="defaultPoolLabel">Default server pool</label>
        </div>
        <div class="" style="width: 100%; height: 20px">
            <input id="specifiedServer" name="serverType" value="specifiedServer" type="radio" data-dojo-attach-event="click:_specifiedServerSelected"/>
            <label for="specifiedServer" data-dojo-attach-point="specifiedServerLabel">Specified server</label>
        </div>
        <div class="" style="width: 100%; height: calc(100% - 50px;); display: none;" data-dojo-attach-point="_gridContainer">
            <div data-dojo-attach-point="_gridContent"></div>
        </div>
    </div>
    <div class="appDialogButtonBar">
        <span class="t-df2 t-lg appDialogButton saveButton" data-dojo-attach-event="click:_onSave" data-dojo-attach-point="saveButton"> Save </span>
        <span class="t-df2 t-lg appDialogButton cancelButton" data-dojo-attach-event="click:_onCancel" data-dojo-attach-point="cancelButton"> Cancel </span>
    </div>
</div>]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
      <Function name="_beforeExcute" args="op,prj,config,locale,success" private="false">
        <CodeText>
          <![CDATA[var helperPlugin = Plugin(config.helperPluginName);

if (op == "startProject") {
    success();
} else if (op == "stopProject") {
    var confirmTitle = helperPlugin.localize(config.locale.frame, locale, "{i18n::Confirmation}");
    var confirmMessage = helperPlugin.localize(config.locale.frame, locale, "{i18n::Stop Project Confirmation Message}" + prj.name + "?");
    message("confirm", confirmTitle, confirmMessage, function (value) {
        if (value) success();
    });
} else if (op == "restartProject") {
    var confirmTitle = helperPlugin.localize(config.locale.frame, locale, "{i18n::Confirmation}");
    var confirmMessage = helperPlugin.localize(config.locale.frame, locale, "{i18n::Restart Project Confirmation Message}" + prj.name + "?");
    message("confirm", confirmTitle, confirmMessage, function (value) {
        if (value) success();
    });
} else if (op == "purgeProject") {
    var confirmTitle = helperPlugin.localize(config.locale.frame, locale, "{i18n::Confirmation}");
    var confirmMessage = helperPlugin.localize(config.locale.frame, locale, "{i18n::Purge Project Confirmation Message}");
    message("confirm", confirmTitle, confirmMessage, function (value) {
        if (value) success();
    });
} else if (op == "undeployProject") {
    var confirmTitle = helperPlugin.localize(config.locale.frame, locale, "{i18n::Confirmation}");
    var confirmMessage = helperPlugin.localize(config.locale.frame, locale, "{i18n::Undeploy Project Confirmation Message}" + prj.name + "?");
    var purgeProject = helperPlugin.localize(config.locale.frame, locale, "{i18n::Purge Before Undeploy}");
    actions =   [
        {label: helperPlugin.localize(config.locale.frame, locale, "{i18n::Undeploy}"), value: true, "class": "saveButton"},
        {label: helperPlugin.localize(config.locale.frame, locale, "{i18n::Cancel}"), value: false},
    ];
    prompt(confirmTitle, confirmMessage, [{
        name: "purgeProject", 
        label: purgeProject, 
        type: "checkbox", 
        value: false, 
        style: {
            "font-family": "Arial",
            "border": "1px solid #f8f8f8",
            "border-bottom-color": "#148ac4",
            "height": "26px",
            "line-height": "26px"
        }
    }], actions, {}, function (value, info) {
        success(value, info);
    });
}]]>
        </CodeText>
      </Function>
      <Function name="_beforeResourceActionExcute" args="prj,resource,action,config,locale,callback" private="false">
        <CodeText>
          <![CDATA[if (action.requireInput != true) {
    callback(true, null);
    return;
}

var helperPlugin = Plugin(config.helperPluginName);
var inputTitle = helperPlugin.localize(config.locale.project, locale, "{i18n::Input Share Name}");
var nameLabel = helperPlugin.localize(config.locale.project, locale, "{i18n::Name}");
actions =   [
    {label: helperPlugin.localize(config.locale.frame, locale, "{i18n::Save}"), value: true, "class": "saveButton"},
    {label: helperPlugin.localize(config.locale.frame, locale, "{i18n::Cancel}"), value: false},
];

prompt(
    inputTitle, null, 
    [ {name: "name", label: nameLabel, type: "string", value: name,
        style: {
            "width" : "250px",
            "font-family": "Arial",
            "height": "26px",
            "line-height": "26px"
        },
        attributes : {
            required : '',
            "class" : 'adminUiInput',
            pattern : '[a-zA-Z][\\w-]*'
        }
    }], 
    actions, {}, callback
);]]>
        </CodeText>
      </Function>
      <Function name="_failExcute" args="op,prj,config,locale,msg,callback" private="false">
        <CodeText>
          <![CDATA[var helperPlugin = Plugin(config.helperPluginName);

var errorTitle = helperPlugin.localize(config.locale.frame, locale, "{i18n::Error}");
message("error", errorTitle, msg, callback || function(value) { });]]>
        </CodeText>
      </Function>
      <Function name="_getApplicationViewMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'active',
        label: 'Enable'
    }],
    actions: [{
        tip: 'Enable',
        icon: 'fa-play-circle',
        name: 'enableAppView',
        params: function (prj, resource) {
            return {
                op: 'enableAppView',
                prj: prj.project,
                appview: resource.name,
                format: 'json'
            };
        },
        success: function (prj, resource) {
            resource.active = 'true';
        },
        status: {
            enable: {
                color: '#68ad80',
                condition: function (prj, resource) {
                    return resource.active != 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return resource.active == 'true';
                }
            }
        }
    }, {
        tip: 'Disable',
        icon: 'fa-stop',
        name: 'disableAppView',
        params: function (prj, resource) {
            return {
                op: 'disableAppView',
                prj: prj.project,
                format: 'json',
                appview: resource.name
            };
        },
        success: function (prj, resource) {
            resource.active = 'false';
        },
        status: {
            enable: {
                color: '#cd4343',
                condition: function (prj, resource) {
                    return resource.active == 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return resource.active != 'true';
                }
            }
        }
    }]
}]]>
        </CodeText>
      </Function>
      <Function name="_getEPNMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'status',
        label: 'Status'
    }, {
        name: 'projectName',
        label: 'Project'
    }, {
        name: 'virtualServerName',
        label: 'Server'
    }],
    actions: [{
        tip: 'Start',
        icon: 'fa-play-circle',
        name: 'startEPN',
        params: function (prj, resource) {
            return {
                op: 'startEPN',
                prj: prj.project,
                format: 'json',
                model: prj.project + "/" + resource.name
            };
        },
        success: function (prj, resource) {
            resource.isRunning = 'true';
        },
        status: {
            enable: {
                color: '#68ad80',
                condition: function (prj, resource) {
                    return prj.status != 'STOPPED' && resource.isRunning != 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED' || resource.isRunning == 'true';
                }
            }
        }
    }, {
        tip: 'Stop',
        icon: 'fa-stop',
        name: 'stopEPN',
        params: function (prj, resource) {
            return {
                op: 'stopEPN',
                format: 'json',
                prj: prj.project,
                model: prj.project + "/" + resource.name
            };
        },
        success: function (prj, resource) {
            resource.isRunning = 'false';
        },
        status: {
            enable: {
                color: '#cd4343',
                condition: function (prj, resource) {
                    return prj.status != 'STOPPED' && resource.isRunning == 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status == 'STOPPED' || resource.isRunning != 'true';
                }
            }
        }
    }, {
        tip: 'Purge',
        icon: 'fa-times-circle',
        name: 'purgeEPN',
        params: function (prj, resource) {
            return {
                op: 'purgeEPN',
                format: 'json',
                prj: prj.project,
                model: prj.project + "/" + resource.name
            };
        },
        success: function (prj, resource) {
            return;
        },
        status: {
            enable: {
                color: '#000000',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED' && resource.isRunning == 'false';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status != 'STOPPED' || resource.isRunning != 'false';
                }
            }
        }
    }]
};]]>
        </CodeText>
      </Function>
      <Function name="_getEventSourceMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'isRunning',
        label: 'Running'
    }],
    actions: [{
        tip: 'Start',
        icon: 'fa-play-circle',
        name: 'startEventSource',
        params: function (prj, resource) {
            return {
                op: 'startEventSource',
                format: 'json',
                prj: prj.project,
                model: resource.name
            };
        },
        success: function (prj, resource) {
            resource.isRunning = 'true';
        },
        status: {
            enable: {
                color: '#68ad80',
                condition: function (prj, resource) {
                    return prj.status != 'STOPPED' && resource.isRunning != 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED' || resource.isRunning == 'true';
                }
            }
        }
    }, {
        tip: 'Stop',
        icon: 'fa-stop',
        name: 'stopEventSource',
        params: function (prj, resource) {
            return {
                op: 'stopEventSource',
                format: 'json',
                prj: prj.project,
                model: resource.name
            };
        },
        success: function (prj, resource) {
            resource.isRunning = 'false';
        },
        status: {
            enable: {
                color: '#cd4343',
                condition: function (prj, resource) {
                    return prj.status != 'STOPPED' && resource.isRunning == 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status == 'STOPPED' || resource.isRunning != 'true';
                }
            }
        }
    }, {
        tip: 'Purge',
        icon: 'fa-times-circle',
        name: 'purgeEventSource',
        params: function (prj, resource) {
            return {
                op: 'purgeEventSource',
                format: 'json',
                prj: prj.project,
                model: resource.name
            };
        },
        success: function (prj, resource) {
            return;
        },
        status: {
            enable: {
                color: '#000000',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED' && resource.isRunning == 'false';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status != 'STOPPED' || resource.isRunning != 'false';
                }
            }
        }
    }]
};]]>
        </CodeText>
      </Function>
      <Function name="_getFeedMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'uri',
        label: 'URI'
    }],
    actions: [{
        tip: 'Register',
        icon: 'fa-play-circle',
        name: 'registerFeed',
        requireInput: true,
        params: function (prj, resource, shareName) {
            return {
                op: 'registerFeed',
                format: 'json',
                prj: prj.project,
                shareName: shareName,
                model: resource.name
            };
        },
        success: function (prj, resource, result) {
            try {
                resource.uri = result.content.model.uri;
                resource.shared = 'true';
            } catch (ex) {
            }
        },
        status: {
            enable: {
                color: '#68ad80',
                condition: function (prj, resource) {
                    return resource.shared != 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return resource.shared == 'true';
                }
            }
        }
    }, {
        tip: 'Unregister',
        icon: 'fa-stop',
        name: 'unregisterFeed',
        params: function (prj, resource) {
            return {
                op: 'unregisterFeed',
                format: 'json',
                prj: prj.project,
                uri: resource.uri
            }
        },
        success: function (prj, resource) {
            resource.uri = '';
            resource.shared = 'false';
        },
        status: {
            enable: {
                color: '#cd4343',
                condition: function (prj, resource) {
                    return resource.shared == 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return resource.shared != 'true';
                }
            }
        }
    }, {
        tip: 'Purge',
        icon: 'fa-times-circle',
        name: 'purgeFeed',
        params: function (prj, resource) {
            return {
                op: 'purgeFeed',
                format: 'json',
                prj: prj.project,
                model: resource.name
            };
        },
        success: function (prj, resource) {
            return;
        },
        status: {
            enable: {
                color: '#000000',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status != 'STOPPED';
                }
            }
        }
    }]
};]]>
        </CodeText>
      </Function>
      <Function name="_getLiveCollectionMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'uri',
        label: 'URI'
    }],
    actions: [{
        tip: 'Register',
        icon: 'fa-play-circle',
        name: 'registerLC',
        requireInput: true,
        params: function (prj, resource, shareName) {
            return {
                op: 'registerLC',
                format: 'json',
                prj: prj.project,
                shareName: shareName,
                model: resource.name
            };
        },
        success: function (prj, resource, result) {
            try {
                resource.uri = result.content.model.uri;
                resource.shared = 'true';
            } catch (ex) {
            }
        },
        status: {
            enable: {
                color: '#68ad80',
                condition: function (prj, resource) {
                    return resource.shared != 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return resource.shared == 'true';
                }
            }
        }
    }, {
        tip: 'Unregister',
        icon: 'fa-stop',
        name: 'unregisterLC',
        params: function(prj, resource) {
            return {
                op: 'unregisterLC',
                format: 'json',
                prj: prj.project,
                uri: resource.uri
            };
        },
        success: function (prj, resource) {
            resource.uri = '';
            resource.shared = 'false';
        },
        status: {
            enable: {
                color: '#cd4343',
                condition: function (prj, resource) {
                    return resource.shared == 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return resource.shared != 'true';
                }
            }
        }
    }, {
        tip: 'Purge',
        icon: 'fa-times-circle',
        name: 'purgeLC',
        params: function (prj, resource) {
            return {
                op: 'purgeLC',
                format: 'json',
                prj: prj.project,
                model: resource.name
            };
        },
        success: function (prj, resource) {
            return;
        },
        status: {
            enable: {
                color: '#000000',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status != 'STOPPED';
                }
            }
        }
    }]
};]]>
        </CodeText>
      </Function>
      <Function name="_getTimeSeriesCollectionMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'uri',
        label: 'URI'
    }],
    actions: [{
        tip: 'Register',
        icon: 'fa-play-circle',
        name: 'registerTSC',
        requireInput: true,
        params: function (prj, resource, shareName) {
            return {
                op: 'registerTSC',
                format: 'json',
                prj: prj.project,
                shareName: shareName,
                model: resource.name
            };
        },
        success: function (prj, resource, result) {
            try {
                resource.uri = result.content.model.uri;
                resource.shared = 'true';
            } catch (ex) {
            }
        },
        status: {
            enable: {
                color: '#68ad80',
                condition: function (prj, resource) {
                    return resource.shared != 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resource) {
                    return resource.shared == 'true';
                }
            }
        }
    }, {
        tip: 'Unregister',
        icon: 'fa-stop',
        name: 'unregisterTSC',
        params: function(prj, resource) {
            return {
                op: 'unregisterTSC',
                format: 'json',
                prj: prj.project,
                uri: resource.uri
            };
        },
        success: function (prj, resource) {
            resource.uri = '';
            resource.shared = 'false';
        },
        status: {
            enable: {
                color: '#cd4343',
                condition: function (prj, resource) {
                    return resource.shared == 'true';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return resource.shared != 'true';
                }
            }
        }
    }, {
        tip: 'Purge',
        icon: 'fa-times-circle',
        name: 'purgeTSC',
        params: function (prj, resource) {
            return {
                op: 'purgeTSC',
                format: 'json',
                prj: prj.project,
                model: resource.name
            };
        },
        success: function (prj, resource) {
            return;
        },
        status: {
            enable: {
                color: '#000000',
                condition: function (prj, resource) {
                    return prj.status == 'STOPPED';
                }
            },
            disable: {
                color: '#CCCCCC',
                condition: function (prj, resoruce) {
                    return prj.status != 'STOPPED';
                }
            }
        }
    }]
};]]>
        </CodeText>
      </Function>
      <Function name="_getWSDLMetaInfo" args="" private="false">
        <CodeText>
          <![CDATA[return {
    schema: [{
        name: 'name',
        label: 'Name'
    }, {
        name: 'url',
        label: 'URL'
    }]
}]]>
        </CodeText>
      </Function>
      <Function name="excute" args="op,prj,config,locale,success,fail" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/project.mgr";
var params = {
    op: op,
    format: 'json',
    project: prj.project
};

var self = this;
this._beforeExcute(op, prj, config, locale, function() {
    POST(url, params, null, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok") {
                if (success) {
                    success();
                }
            } else {
                self._failExcute(op, prj, config, locale, result.message);
            }
        } catch (ex) {
            self._failExcute(op, prj, config, locale, ex.message);
        }
    });
});

]]>
        </CodeText>
      </Function>
      <Function name="excuteResourceAction" args="prj,resource,action,config,locale,success" private="false">
        <CodeText>
          <![CDATA[var helperPlugin = Plugin(config.helperPluginName);
var self = this;
this._beforeResourceActionExcute(prj, resource, action, config, locale, function(value, data) {
    if (!value) return;
    
    var url = "/vitria-oi/rest/runtime.admin";
    var params = action.params(prj, resource, data ? data.name : null);
    
    POST(url, params, null, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok") {
                if (action.success) action.success(prj, resource, result);
                if (success) success(prj, resource, result);
            } else {
                self._failExcute(params.op, prj, config, locale, result.message);
            }
        } catch (ex) {
            self._failExcute(params.op, prj, config, locale, ex.message);
        }
    });
});]]>
        </CodeText>
      </Function>
      <Function name="exportProject" args="prj,config,locale" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/project.mgr";
var projectName = prj.project;
if (prj.project.lastIndexOf("$") > 0) {
    projectName = prj.project.substring(0, prj.project.lastIndexOf("$"));
}
var fileName = projectName.substring(projectName.lastIndexOf("/") + 1) + ".zip";

require(["dojox/uuid/generateRandomUuid", 
    "af/utils/AppUtil",
    "af/utils/AppFrame"],  function (generateRandomUuid, AppUtil, AppFrame) {
    var uid = generateRandomUuid();
    var params = {
        op: "export",
        project: projectName,
        file: uid
    };
    
    if (prj.release != "SANDBOX") params.release = prj.release;

    GET(url, params, function (result) {
        var downloadURL = AppUtil.getItemURL("/app/dojoclient/user/" + AppFrame.getUserName() + "/" + fileName + "?op=download&uid=" + uid);
        window.open(downloadURL, "_blank");
    }); 
});]]>
        </CodeText>
      </Function>
      <Function name="getProjectResource" args="prj,config,locale,success" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/runtime.admin";
var helperPlugin = Plugin(config.helperPluginName);

var resourceType = [{
    type: "av",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::Application View}"),
    op: 'listApplicationView'
}, {
    type: "epn",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::EPN}"),
    op: 'listEPN'
}, {
    type: "es",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::Event Source}"),
    op: 'listEventSource'
}, {
    type: "feed",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::Feed}"),
    op: 'listFeed'
}, {
    type: "lc",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::Live Collection}"),
    op: 'listLC'
}, {
    type: "tc",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::Timeseries Collection}"),
    op: 'listTSC'
}, {
    type: "wsdl",
    typeLabel: helperPlugin.localize(config.locale.project, locale, "{i18n::WSDL}"),
    op: 'listWSDLServiceProvider'
}];

var resourceList = [];
var index = 0;
resourceType.forEach(function(item) {
    var params = {
        op: item.op,
        format: 'json',
        prj: prj.project
    };
    
    GET(url, params, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok" && result.content) {
                for (var pro in result.content) {
                    result.content[pro].forEach(function(content) {
                        for (var pro in content) {
                            content = content[pro];
                            content.groupField = item.typeLabel;
                            content.resourceType = item.type;
                            resourceList.push(content);
                        }
                    });
                }
            }
            index++;
            if (index == resourceType.length) {
                success(resourceList);
            }
        } catch (ex) {
            index++;
            if (index == resourceType.length) {
                success(resourceList);
            }
        }
    });
});]]>
        </CodeText>
      </Function>
      <Function name="getResourceMetaInfo" args="prj,resource,baseConfig,locale" private="false">
        <CodeText>
          <![CDATA[switch (resource.resourceType) {
    case 'av':
        return this._getApplicationViewMetaInfo(prj, resource, baseConfig, locale);
        break;
    case 'epn':
        return this._getEPNMetaInfo(prj, resource, baseConfig, locale);
        break;
    case 'es':
        return this._getEventSourceMetaInfo(prj, resource, baseConfig, locale);
        break;
    case 'feed':
        return this._getFeedMetaInfo(prj, resource, baseConfig, locale);
        break;
    case 'lc':
        return this._getLiveCollectionMetaInfo(prj, resource, baseConfig, locale);
        break;
    case 'tc':
        return this._getTimeSeriesCollectionMetaInfo(prj, resource, baseConfig, locale);
        break;
    case 'wsdl':
        return this._getWSDLMetaInfo(prj, resource, baseConfig, locale);
        break;
    default: 
        return null;
        break;
}
]]>
        </CodeText>
      </Function>
      <Function name="moveProject" args="prj,server,config,locale,success,fail" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/project.mgr";
var params = {
    op: 'moveProject',
    format: 'json',
    project: prj.project
};

if (server.type == "specifiedServer") {
    params.server = server.server.name;
} else {
    params.server = "automatic";
}

var self = this;
POST(url, params, null, function(result) {
    try {
        result = JSON.parse(result);
        var status = (result.result || result.status || "").toLowerCase();
        if (status == "ok") {
            success();
        } else {
            self._failExcute(params.op, prj, config, locale, result.message);
        }
    } catch (ex) {
        self._failExcute(params.op, prj, config, locale, ex.message);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="projectShareExcute" args="op,space,prj,config,locale,success" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/sharing";
var params = {
    op: op,
    path: '/prj' + prj.project,
    type: 'registry'
};
if (space != null) {
    params.space = space;
    params.format = 'uri';
}

if (op == 'getsharedspace') {
    GET(url, params, function(result) {
        success(result);
    });
} else {
    GET(url, params, function(result) {
        success(result);
    });
}
]]>
        </CodeText>
      </Function>
      <Function name="restartProject" args="prj,config,locale,success,fail" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/project.mgr";


var self = this;
this._beforeExcute("restartProject", prj, config, locale, function() {
    stop(function() {
        start(function() {
            if (success) success();
        });
    });
});

function stop(callback) {
    var params = {
        op: "stopProject",
        format: 'json',
        project: prj.project
    }; 
    
    POST(url, params, null, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok") {
                callback()
            } else {
                self._failExcute("restartProject", prj, config, locale, result.message);
            }
        } catch (ex) {
            self._failExcute("restartProject", prj, config, locale, ex.message);
        }
    });
}

function start(callback) {
    var params = {
        op: "startProject",
        format: 'json',
        project: prj.project
    }; 
    
    POST(url, params, null, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok") {
                callback();
            } else {
                self._failExcute("restartProject", prj, config, locale, result.message);
            }
        } catch (ex) {
            self._failExcute("restartProject", prj, config, locale, ex.message);
        }
    });
}]]>
        </CodeText>
      </Function>
      <Function name="undeployProject" args="prj,config,locale,success,fail" private="false">
        <CodeText>
          <![CDATA[var url = "/vitria-oi/rest/project.mgr";


var self = this;
this._beforeExcute("undeployProject", prj, config, locale, function(data, info) {
    if (!data) return;
    if (info && info.purgeProject) {
        purgeProject(function() {
           undeployProject(function() {
              if (success) success(); 
           });
        });
    } else {
        undeployProject(function() {
           if (success) success(); 
        });
    }
});

function purgeProject(callback) {
    var params = {
        op: 'purgeProject',
        format: 'json',
        project: prj.project
    };
    
    POST(url, params, null, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok") {
                callback();
            } else {
                self._failExcute(params.op, prj, config, locale, result.message);
            }
        } catch (ex) {
            self._failExcute(params.op, prj, config, locale, ex.message);
        }
    });
}

function undeployProject(callback) {
    var params = {
        op: 'undeployProject',
        format: 'json',
        project: prj.project
    };
    
    POST(url, params, null, function(result) {
        try {
            result = JSON.parse(result);
            var status = (result.result || result.status || "").toLowerCase();
            if (status == "ok") {
                callback();
            } else {
                self._failExcute(params.op, prj, config, locale, result.message);
            }
        } catch (ex) {
            self._failExcute(params.op, prj, config, locale, ex.message);
        }
    });
}

]]>
        </CodeText>
      </Function>
    </Functions>
    <Services/>
    <Resources/>
    <Plugins/>
  </ModelInfo>
</DashboardPluginModel>
