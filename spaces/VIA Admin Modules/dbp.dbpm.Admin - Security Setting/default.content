<DashboardPluginModel description="Description of New Model 0" name="Admin - Security Setting" is_init="false">
  <ModelInfo validated="true">
    <Properties/>
    <Widgets>
      <Widget name="EncryptionPolicyRenderer" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._uiEncryptionDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::UI Encryption Key}"));
            $(this._serverEncryptionDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Server Encryption Key}"));
        },
        
        _setSaveIconStyle : function() {
            if(this.saveStatus == false){
                domStyle.set(this._saveIcon, {"color" : "grey"});
            }else{
                domStyle.set(this._saveIcon, {"color" : "#148ac4"});
            } 
        },    
        
        _onClickSaveButton : function(evt) {
            if(this.saveStatus == false){
                return;
            }    
            this.saveStatus = false;
            this._setSaveIconStyle();
            var key = {
                "uiKey" : this._uiEncryptionValue,
                "serverKey" : this._serverEncryptionValue
            };
            this.plugin.doSaveEncryptionKeys(key, function(){
                
            });
        },
        
        _onChangeUIEncryption : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._uiEncryptionValue = evt;
        },
        
        _onChangeServerEncryption : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._serverEncryptionValue = evt;
        }]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.saveStatus = false;
            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            
            if(this.setting){
                this._uiEncryption.set("value", this.setting.uiKey.substring(0, 16), false);
                this._serverEncryption.set("value", this.setting.serverKey.substring(0, 16), false);
               
                this._uiEncryptionValue = this.setting.uiKey;
                this._serverEncryptionValue = this.setting.serverKey;
            }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.plugin = Plugin("Admin - Plugin");]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            
            if(this.setting){
                this._uiEncryption.set("value", this.setting.uiKey.substring(0, 16), false);
                this._serverEncryption.set("value", this.setting.serverKey.substring(0, 16), false);
               
                this._uiEncryptionValue = this.setting.uiKey;
                this._serverEncryptionValue = this.setting.serverKey;
            }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if(!evt.config || !evt.locale){
                return;
            }   
            
            this.baseConfig = evt.config;
            this.helperPlugin = Plugin(evt.config.helperPluginName);
            this.locale = evt.locale;
            this._localeHandler();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="encryptionPolicy" style="width:100%;height:100%;">
    <div style="width: 20px; height: 20px; float: right; padding-right: 40px;" data-dojo-attach-poin="_saveButton"
        data-dojo-attach-event="onClick: _onClickSaveButton">
        <label style="width: 20px; height: 20px; padding: 0px; border: 0px;">
            <i data-dojo-attach-point="_saveIcon" style="font-size: 18px; margin: 0px; color: grey;" class="fa fa-save"></i>
        </label>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="encryptionLabel" data-dojo-attach-point="_uiEncryptionDiv">UI Encryption Key</div>
        <input class="encryptionValue" style="width:300px;" data-dojo-attach-point="_uiEncryption" data-dojo-type="dijit/form/ValidationTextBox" type="password"
            data-dojo-attach-event="onChange: _onChangeUIEncryption"/>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="encryptionLabel" data-dojo-attach-point="_serverEncryptionDiv">Server Encryption Key</div>
        <input class="encryptionValue" style="width:300px;" data-dojo-attach-point="_serverEncryption" data-dojo-type="dijit/form/ValidationTextBox" type="password"
            data-dojo-attach-event="onChange: _onChangeServerEncryption"/>
    </div>
</div>]]>
        </HtmlText>
      </Widget>
      <Widget name="KerberosPolicyRenderer" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._enabledSpan).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Enabled}"));
            $(this._kerberosDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Kerberos Principal}"));
            $(this._configFileDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Configuration File}"));
            $(this._keytabFileDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Keytab File}"));
        },
        
        _setSaveIconStyle : function() {
            if(this.saveStatus == false){
                domStyle.set(this._saveIcon, {"color" : "grey"});
            }else{
                domStyle.set(this._saveIcon, {"color" : "#148ac4"});
            } 
        },    
        
        _onClickSaveButton : function(evt) {
            if(this.saveStatus == false){
                return;
            } 
            this.saveStatus = false;
            this._setSaveIconStyle();
            
            var policy = {
                "enabled" : this._kerberosCheckboxValue,
                "principal" : this._kerberosPrincipalValue,
                "configFile" : this._configurationFileValue,
                "keytabFile" : this._keyTabFileValue
            };
            this.plugin.doSaveKerberosSetting(policy, function(){
                
            });
        },
        
        _onChangeKerberosCheckbox : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._kerberosCheckboxValue = evt;
            if(evt == false){
                this._disabledInputs();
            }else{
                this._enabledInputs();
            }
        },
        
        _onChangeKerberosPrincipal : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._kerberosPrincipalValue = evt;
        },
        
        _onChangeConfigrationFile : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._configurationFileValue = evt;
        },
        
        _onChangeKeyTabFile : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._keyTabFileValue = evt;
        }, 
        
        _disabledInputs : function() {
            this._kerberosPrincipal.set('disabled', true) ;
            this._configurationFile.set('disabled', true) ;
            this._keyTabFile.set('disabled', true) ;
        },
        
        _enabledInputs : function() {
            this._kerberosPrincipal.set('disabled', false) ;
            this._configurationFile.set('disabled', false) ;
            this._keyTabFile.set('disabled', false) ;
        }    ]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.saveStatus = false;
            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            
            if(this.setting){
                this._kerberosCheckbox.set("value", this.setting.enabled == "true" ? true : false, false);
                this._kerberosPrincipal.set("value", this.setting.principal, false);
                this._configurationFile.set("value", this.setting.configFile, false);
                this._keyTabFile.set("value", this.setting.keytabFile, false);
                
                if(this.setting.enabled == "false"){
                    this._disabledInputs();
                }else{
                    this._enabledInputs();
                }    
               
                this._kerberosCheckboxValue = this.setting.enabled;
                this._kerberosPrincipalValue = this.setting.principal;
                this._configurationFileValue = this.setting.configFile;
                this._keyTabFileValue = this.setting.keytabFile;
            }else{
                if(this.saveStatus == false){
                    this._disabledInputs();
                }
            }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.plugin = Plugin("Admin - Plugin");]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            
            if(this.setting){
                this._kerberosCheckbox.set("value", this.setting.enabled == "true" ? true : false, false);
                this._kerberosPrincipal.set("value", this.setting.principal, false);
                this._configurationFile.set("value", this.setting.configFile, false);
                this._keyTabFile.set("value", this.setting.keytabFile, false);
                
                if(this.setting.enabled == "false"){
                    this._disabledInputs();
                }else{
                    this._enabledInputs();
                }    
               
                this._kerberosCheckboxValue = this.setting.enabled;
                this._kerberosPrincipalValue = this.setting.principal;
                this._configurationFileValue = this.setting.configFile;
                this._keyTabFileValue = this.setting.keytabFile;
            }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if(!evt.config || !evt.locale){
                return;
            }   
            
            this.baseConfig = evt.config;
            this.helperPlugin = Plugin(evt.config.helperPluginName);
            this.locale = evt.locale;
            this._localeHandler();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="kerberosPolicy" style="width:100%;height:100%;">
    <div style="width: 20px; height: 20px; float: right; padding-right: 40px;" data-dojo-attach-poin="_saveButton" 
        data-dojo-attach-event="onClick: _onClickSaveButton">
        <label style="width: 20px; height: 20px; padding: 0px; border: 0px;">
            <i data-dojo-attach-point="_saveIcon" style="font-size: 18px; margin: 0px; color: grey;" class="fa fa-save"></i>
        </label>
    </div>
    <div>
        <input class="kerberosCheckbox" style="width:20px;" data-dojo-attach-point="_kerberosCheckbox" data-dojo-type="dijit/form/CheckBox" value="false"
            data-dojo-attach-event="onChange: _onChangeKerberosCheckbox"/>
        <span class="kerberosLabel" data-dojo-attach-point="_enabledSpan">Enabled</span>    
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="kerberosLabel" data-dojo-attach-point="_kerberosDiv">Kerberos Principal</div>
        <input class="kerberosValue" style="width:300px;" data-dojo-attach-point="_kerberosPrincipal" data-dojo-type="dijit/form/TextBox" 
            data-dojo-attach-event="onChange: _onChangeKerberosPrincipal"/>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="kerberosLabel" data-dojo-attach-point="_configFileDiv">Configuration File</div>
        <input class="kerberosValue" style="width:300px;" data-dojo-attach-point="_configurationFile" data-dojo-type="dijit/form/TextBox" 
            data-dojo-attach-event="onChange: _onChangeConfigrationFile"/>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="kerberosLabel" data-dojo-attach-point="_keytabFileDiv">Keytab File</div>
        <input class="kerberosValue" style="width:300px;" data-dojo-attach-point="_keyTabFile" data-dojo-type="dijit/form/TextBox" 
            data-dojo-attach-event="onChange: _onChangeKeyTabFile"/>
    </div>
</div>]]>
        </HtmlText>
      </Widget>
      <Widget name="LoginPolicyRenderer" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._attemptLimitDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Attempt Limits}"));
            $(this._tokenInactiveDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Token Inactive Timeout}"));
            $(this._lockDurationDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Lock Duration}"));
            $(this._tokenTotalDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Token Total Timeout}"));
        },

        _setSaveIconStyle : function() {
            if(this.saveStatus == false){
                domStyle.set(this._saveIcon, {"color" : "grey"});
            }else{
                domStyle.set(this._saveIcon, {"color" : "#148ac4"});
            } 
        },    
        
        _onClickSaveButton : function(evt) {
            if(this.saveStatus == false){
                return;
            } 
            this.saveStatus = false;
            this._setSaveIconStyle();
            /*var policy = {
                "attempt" : this._attemptLimitValue,
                "lockDuration" : this._lockDurationValue,
                "tokenTimer" : this._tokenInactiveValue,
                "tokenTotal" : this._tokenTotalValue
            };*/
            var policy = {
                "tokenTimer" : this._tokenInactiveValue,
                "lockDuration" : this._lockDurationValue,
                "tokenTotal" : this._tokenTotalValue,
                "attempt" : this._attemptLimitValue
            };
            this.plugin.doSaveLoginPolicy(policy, function(){
                
            });
        },
        
        _onChangeAttemptLimit : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._attemptLimitValue = String(evt);
            }    
            
        },
        
        _onChangeTokenInactive : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._tokenInactiveValue = String(evt);
            }
        },
        
        _onChangeLockDuration : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._lockDurationValue = String(evt * 60);
            }
        },
        
        _onChangeTokenTotal : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._tokenTotalValue = String(evt);
            }
        }]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.saveStatus = false;
            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            if(this.setting){
                this._attemptLimit.set("value", this.setting.attemptLimits, false);
                this._tokenInactive.set("value", this.setting.tokenInactiveTimeout, false);
                this._lockDuration.set("value", this.setting.lockDuration/60, false);
                this._tokenTotal.set("value", this.setting.tokenTotalTimeout, false);
            
                this._attemptLimitValue = this.setting.attemptLimits;
                this._tokenInactiveValue = this.setting.tokenInactiveTimeout;
                this._lockDurationValue = this.setting.lockDuration;
                this._tokenTotalValue = this.setting.tokenTotalTimeout;
            }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.plugin = Plugin("Admin - Plugin");]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            var self = this;
            setTimeout(function(){
                if(self.initialConfig.renderer.result){
                    self.setting = self.initialConfig.renderer.result[0];
                }else{
                    self.setting = null;
                }
                if(self.setting){
                    self._attemptLimit.set("value", self.setting.attemptLimits, false);
                    self._tokenInactive.set("value", self.setting.tokenInactiveTimeout, false);
                    self._lockDuration.set("value", self.setting.lockDuration/60, false);
                    self._tokenTotal.set("value", self.setting.tokenTotalTimeout, false);
            
                    self._attemptLimitValue = self.setting.attemptLimits;
                    self._tokenInactiveValue = self.setting.tokenInactiveTimeout;
                    self._lockDurationValue = self.setting.lockDuration;
                    self._tokenTotalValue = self.setting.tokenTotalTimeout;
                }    
            }, 500);
            ]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if(!evt.config || !evt.locale){
                return;
            }   
            
            this.baseConfig = evt.config;
            this.helperPlugin = Plugin(evt.config.helperPluginName);
            this.locale = evt.locale;
            this._localeHandler();   ]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="loginPolicy" style="width:100%;height:100%;">
    <div style="width: 20px; height: 20px; float: right; padding-right: 40px;" data-dojo-attach-poin="_saveButton" 
        data-dojo-attach-event="onClick: _onClickSaveButton">
        <label style="width: 20px; height: 20px; padding: 0px; border: 0px;">
            <i data-dojo-attach-point="_saveIcon" style="font-size: 18px; margin: 0px; color: grey;" class="fa fa-save"></i>
        </label>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="loginLabel" data-dojo-attach-point="_attemptLimitDiv">Attempt Limits</div>
        <input class="loginValue" style="width:120px;" data-dojo-attach-point="_attemptLimit" data-dojo-type="dijit/form/NumberSpinner"
            data-dojo-attach-event="onChange: _onChangeAttemptLimit" data-dojo-props="smallDelta:1, constraints:{min:1,max:10,places:0}"/>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="loginLabel" data-dojo-attach-point="_tokenInactiveDiv">Token Inactive Timeout</div>
        <div>
            <input class="loginValue" style="width:120px;" data-dojo-attach-point="_tokenInactive" data-dojo-type="dijit/form/NumberSpinner"
                data-dojo-attach-event="onChange: _onChangeTokenInactive" data-dojo-props="smallDelta:1, constraints:{min:1,max:9999999999,places:0}"/>
            <span class="loginUnitLabel">minutes</span>    
        </div>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="loginLabel" data-dojo-attach-point="_lockDurationDiv">Lock Duration</div>
        <div>
            <input class="loginValue" style="width:120px;" data-dojo-attach-point="_lockDuration" data-dojo-type="dijit/form/NumberSpinner"
                data-dojo-attach-event="onChange: _onChangeLockDuration" data-dojo-props="smallDelta:1, constraints:{min:1,max:24,places:0}"/>
            <span class="loginUnitLabel">hours</span>    
        </div>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="loginLabel" data-dojo-attach-point="_tokenTotalDiv">Token Total Timeout</div>
        <div>
            <input class="loginValue" style="width:120px;" data-dojo-attach-point="_tokenTotal" data-dojo-type="dijit/form/NumberSpinner"
                data-dojo-attach-event="onChange: _onChangeTokenTotal" data-dojo-props="smallDelta:1, constraints:{min:-1,max:9999999999,places:0}"/>
            <span class="loginUnitLabel">minutes</span>    
        </div>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="LogPolicyRenderer" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._authenticationDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Authentication}"));
            $(this._authenticationSpan).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Authentication Des}"));
            $(this._cryptographyDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Cryptography}"));
            $(this._cryptographySpan).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Cryptography Des}"));
            $(this._loggingDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Logging}"));
            $(this._loggingSpan).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Logging Des}"));
            $(this._rbacDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::RBAC}"));
            $(this._rbacSpan).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::RBAC Des}"));
            $(this._userDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::User}"));
            $(this._userSpan).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::User Des}"));
        },
        
        _setSaveIconStyle : function() {
            if(this.saveStatus == false){
                domStyle.set(this._saveIcon, {"color" : "grey"});
            }else{
                domStyle.set(this._saveIcon, {"color" : "#148ac4"});
            } 
        },    
        
        _onClickSaveButton : function(evt) {
            if(this.saveStatus == false){
                return;
            } 
            var policy = [];
            this.saveStatus = false;
            this._setSaveIconStyle();
            if(this._userValue){
                policy.push("User"); 
            }  
            if(this._authenticationValue){
                policy.push("Authentication");
            }
            if(this._rbacValue){
                policy.push("RBAC");
            }
            if(this._cryptographyValue){
                policy.push("Cryptography");
            }
            if(this._loggingValue){
                policy.push("Log");
            }  
            var logPolicy = {
                "eventType": policy.join()
            };    
            this.plugin.doSaveLoggingPolicy(logPolicy, function(){
                
            });
        },
        
        _onChangeAuthentication : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._authenticationValue = evt;
            }
        },
        
        _onChangeCryptography : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._cryptographyValue = evt;
            }
        },
        
        _onChangeLogging : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._loggingValue = evt;
            }
        },
        
        _onChangeRBAC : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._rbacValue = evt;
            }
        },
        
        _onChangeUser : function(evt) {
            if(evt != null){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._userValue = evt;
            }
        }]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.saveStatus = false;
            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            
            if(this.setting){
                this._authentication.set("value", this.setting.authentication, false);
                this._cryptography.set("value", this.setting.cryptography, false);
                this._logging.set("value", this.setting.logging, false);
                this._rbac.set("value", this.setting.rbac, false);
                this._user.set("value", this.setting.user, false);
            
                this._authenticationValue = this.setting.authentication;
                this._cryptographyValue = this.setting.cryptography;
                this._loggingValue = this.setting.logging;
                this._rbacValue = this.setting.rbac;
                this._userValue = this.setting.user;
            }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.plugin = Plugin("Admin - Plugin");]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            var self = this;
            setTimeout(function(){
                if(self.initialConfig.renderer.result){
                    self.setting = self.initialConfig.renderer.result[0];
                }else{
                    self.setting = null;
                }
            
                if(self.setting){
                    self._authentication.set("value", self.setting.authentication, false);
                    self._cryptography.set("value", self.setting.cryptography, false);
                    self._logging.set("value", self.setting.logging, false);
                    self._rbac.set("value", self.setting.rbac, false);
                    self._user.set("value", self.setting.user, false);
            
                    self._authenticationValue = self.setting.authentication;
                    self._cryptographyValue = self.setting.cryptography;
                    self._loggingValue = self.setting.logging;
                    self._rbacValue = self.setting.rbac;
                    self._userValue = self.setting.user;
                }
            }, 300);]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if(!evt.config || !evt.locale){
                return;
            }   
            
            this.baseConfig = evt.config;
            this.helperPlugin = Plugin(evt.config.helperPluginName);
            this.locale = evt.locale;
            this._localeHandler();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="logPolicy" style="width:100%;height:100%;">
    <div style="width: 20px; height: 20px; float: right; padding-right: 40px;" data-dojo-attach-poin="_saveButton" 
        data-dojo-attach-event="onClick: _onClickSaveButton">
        <label style="width: 20px; height: 20px; padding: 0px; border: 0px;">
            <i data-dojo-attach-point="_saveIcon" style="font-size: 18px; margin: 0px; color: grey;" class="fa fa-save"></i>
        </label>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="logLabel" data-dojo-attach-point="_authenticationDiv">Authentication</div>
        <div>
            <input class="logCheckbox" style="width:20px;" data-dojo-attach-point="_authentication" data-dojo-type="dijit/form/CheckBox" value="true" checked
                data-dojo-attach-event="onChange: _onChangeAuthentication"/>
            <span class="logDes" data-dojo-attach-point="_authenticationSpan">Users login successfully, failed, locked or unlocked.</span>    
        </div>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="logLabel" data-dojo-attach-point="_cryptographyDiv">Cryptography</div>
        <div>
            <input class="logCheckbox" style="width:20px;" data-dojo-attach-point="_cryptography" data-dojo-type="dijit/form/CheckBox" value="true" checked
                data-dojo-attach-event="onChange: _onChangeCryptography"/>
            <span class="logDes" data-dojo-attach-point="_cryptographySpan">Modify UI or server encryption key.</span>    
        </div>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="logLabel" data-dojo-attach-point="_loggingDiv">Logging</div>
        <div>
            <input class="logCheckbox" style="width:20px;" data-dojo-attach-point="_logging" data-dojo-type="dijit/form/CheckBox" value="false" 
                data-dojo-attach-event="onChange: _onChangeLogging"/>
            <span class="logDes" data-dojo-attach-point="_loggingSpan">Modify UI or server encryption key.</span>    
        </div>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="logLabel" data-dojo-attach-point="_rbacDiv">RBAC</div>
        <div>
            <input class="logCheckbox" style="width:20px;" data-dojo-attach-point="_rbac" data-dojo-type="dijit/form/CheckBox" value="true" checked
                data-dojo-attach-event="onChange: _onChangeRBAC"/>
            <span class="logDes" data-dojo-attach-point="_rbacSpan">Modify role-based access control policy.</span>    
        </div>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="logLabel" data-dojo-attach-point="_userDiv">User</div>
        <div>
            <input class="logCheckbox" style="width:20px;" data-dojo-attach-point="_user" data-dojo-type="dijit/form/CheckBox" value="false"
                data-dojo-attach-event="onChange: _onChangeUser"/>
            <span class="logDes" data-dojo-attach-point="_userSpan">Add, remove group or user. Modify user password or fullname.</span>    
        </div>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="PasswordPolicyRenderer" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _localeHandler: function() {
            var plugin = this.helperPlugin;
            var baseConfig = this.baseConfig;
            var locale = this.locale;
            
            $(this._minLengthDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Minimum Length}"));
            $(this._maxLengthDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Maximum Length}"));
            $(this._mandatoryDiv).html(plugin.localize(baseConfig.locale.frame, locale, "{i18n::Mandatory Characters}"));
        },
        
        _setSaveIconStyle : function() {
            if(this.saveStatus == false){
                domStyle.set(this._saveIcon, {"color" : "grey"});
            }else{
                domStyle.set(this._saveIcon, {"color" : "#148ac4"});
            } 
        },
        
        _onClickSaveButton : function(evt) {
            if(this.saveStatus == false){
                return;
            } 
            this.saveStatus = false;
            this._setSaveIconStyle();
            var policy = {
                "minLength" : this._minLengthValue,
                "mandatoryChars" : this._mandatoryValue,
                "maxLength" : this._maxLengthValue
            };
            this.plugin.doSavePasswordPolicy(policy, function(status){
                
            });
        },
        
        _onChangeMinLength : function(evt) {
            if(evt){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._minLengthValue = String(evt);
            }
        },
        
        _onChangeMaxLength : function(evt) {
            if(evt){
                this.saveStatus = true;
                this._setSaveIconStyle();
                this._maxLengthValue = String(evt);
            }
        },

        _onChangeMandatory : function(evt) {
            this.saveStatus = true;
            this._setSaveIconStyle();
            this._mandatoryValue = evt;
        }]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.saveStatus = false;
            if(this.initialConfig.renderer.result){
                this.setting = this.initialConfig.renderer.result[0];
            }else{
                this.setting = null;
            }
            
            if(this.setting){
                this._minLength.set("value", this.setting.minLength, false);
                this._maxLength.set("value", this.setting.maxLength, false);
                this._mandatory.set("value", this.setting.mandatoryChars, false);
            
                this._minLengthValue = this.setting.minLength;
                this._maxLengthValue = this.setting.maxLength;
                this._mandatoryValue = this.setting.mandatoryChars;
            }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.plugin = Plugin("Admin - Plugin");]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            var self = this;
            setTimeout(function(){
                if(self.initialConfig.renderer.result){
                    self.setting = self.initialConfig.renderer.result[0];
                }else{
                    self.setting = null;
                }
            
                if(self.setting){
                    self._minLength.set("value", self.setting.minLength, false);
                    self._maxLength.set("value", self.setting.maxLength, false);
                    self._mandatory.set("value", self.setting.mandatoryChars, false);
            
                    self._minLengthValue = self.setting.minLength;
                    self._maxLengthValue = self.setting.maxLength;
                    self._mandatoryValue = self.setting.mandatoryChars;
                }
            }, 300);]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if(!evt.config || !evt.locale){
                return;
            }   
            
            this.baseConfig = evt.config;
            this.helperPlugin = Plugin(evt.config.helperPluginName);
            this.locale = evt.locale;
            this._localeHandler(); ]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="passwordPolicy" style="width:100%;height:100%;">
    <div style="width: 20px; height: 20px; float: right; padding-right: 40px;" data-dojo-attach-poin="_saveButton" 
        data-dojo-attach-event="onClick: _onClickSaveButton">
        <label style="width: 20px; height: 20px; padding: 0px; border: 0px;">
            <i data-dojo-attach-point="_saveIcon" style="font-size: 18px; margin: 0px; color: grey;" class="fa fa-save"></i>
        </label>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="passwordLabel" data-dojo-attach-point="_minLengthDiv">Minimum Length</div>
        <input class="passwordValue" style="width:120px;" data-dojo-attach-point="_minLength" data-dojo-type="dijit/form/NumberSpinner"
            data-dojo-attach-event="onChange: _onChangeMinLength" data-dojo-props="smallDelta:1, constraints:{min:6,max:255,places:0}"/>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="passwordLabel" data-dojo-attach-point="_maxLengthDiv">Maximum Length</div>
        <input class="passwordValue" style="width:120px;" data-dojo-attach-point="_maxLength" data-dojo-type="dijit/form/NumberSpinner"
            data-dojo-attach-event="onChange: _onChangeMaxLength" data-dojo-props="smallDelta:1, constraints:{min:6,max:255,places:0}"/>
    </div>
    <div style="display: flex; flex-direction: column; ">
        <div class="passwordLabel" data-dojo-attach-point="_mandatoryDiv">Mandatory Characters</div>
        <input class="passwordValue" style="width:200px;" data-dojo-attach-point="_mandatory" data-dojo-type="dijit/form/TextBox" 
            data-dojo-attach-event="onChange: _onChangeMandatory"/>
    </div>
</div>]]>
        </HtmlText>
      </Widget>
      <Widget name="PolicyTabRenderer" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _onChangeLoginPolicyTab : function(evt) {
            if (evt == true) {
                this.tabName = "login";
                this._onSelect("security/login");
                domClass.add(this._loginPolicyLabel, "select");
            } else {
                domClass.remove(this._loginPolicyLabel, "select");
            }    
        },
        
        _onChangePasswordPolicyTab : function(evt) {
            if (evt == true) {
                this.tabName = "password";
                this._onSelect("security/password");
                domClass.add(this._passwordPolicyLabel, "select");
            } else {
                domClass.remove(this._passwordPolicyLabel, "select");
            } 
        },
        
        _onChangeLogPolicyTab : function(evt) {
            if (evt == true) {
                this.tabName = "log";
                this._onSelect("security/log");
                domClass.add(this._logPolicyLabel, "select");
            } else {
                domClass.remove(this._logPolicyLabel, "select");
            } 
        },
        
        _onChangeEncryptionPolicyTab : function(evt) {
            if (evt == true) {
                this.tabName = "encryption";
                this._onSelect("security/encryption");
                domClass.add(this._encryptionPolicyLabel, "select");
            } else {
                domClass.remove(this._encryptionPolicyLabel, "select");
            } 
        },
        
        _onChangeKerberosPolicyTab : function(evt) {
           if (evt == true) {
                this.tabName = "kerberos";
                this._onSelect("security/kerberos");
                domClass.add(this._kerberosPolicyLabel, "select");
           } else {
                domClass.remove(this._kerberosPolicyLabel, "select");
            } 
        },
        
        _onRefresh : function() {
            this._onSelect("securtiy/refresh");
        },    
        
        _onSelect : function(value) {
            var selection = [];
            selection.push({
                "value" : value
            });
            this._updateSelection(selection);
        },

        _updateSelection : function(selection) {
            if (this.renderer.tile != null) {
                // use this.renderer.tile._onSelectionChange() to direct selection via Selection port
                this.renderer.tile._onSelectionChange(selection);
            }
        }]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (!evt.tabName) return;
            if (evt.tabName != "refresh"){
                if (this.tabName == "login") {
                    this._loginPolicyTab.setChecked(false);
                } else if (this.tabName == "password"){
                    this._passwordPolicyTab.setChecked(false);
                } else if (this.tabName == "log"){
                    this._logPolicyTab.setChecked(false);
                } else if (this.tabName == "encryption"){
                    this._EncryptionPolicyTab.setChecked(false);
                } else if (this.tabName == "kerberos"){
                    this._kerberosPolicyTab.setChecked(false);
                }
            }    
            
            if (evt.tabName == "login") {
                this._loginPolicyTab.setChecked(true);
            } else if (evt.tabName == "password"){
                this._passwordPolicyTab.setChecked(true);
            } else if (evt.tabName == "log"){
                this._logPolicyTab.setChecked(true);
            } else if (evt.tabName == "encryption"){
                this._EncryptionPolicyTab.setChecked(true);
            } else if (evt.tabName == "kerberos"){
                this._kerberosPolicyTab.setChecked(true);
            } else if (evt.tabName == "fresh"){
                this._onRefresh();
            } ]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.tabName = "login";]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="policy-tab">
    <input id="${id}_tab_loginPolicy" type="radio" name="tabs" checked="true" value="login" data-dojo-type="dijit/form/RadioButton" 
        data-dojo-attach-event='onChange: _onChangeLoginPolicyTab' data-dojo-attach-point="_loginPolicyTab">
    <label for="${id}_tab_loginPolicy" class="select tab-label" data-dojo-attach-point="_loginPolicyLabel">
        <i class="fa fa-user-edit"> </i> Login Policy
    </label>
    <input id="${id}_tab_pwdPolicy" type="radio" name="tabs" value="pwd" data-dojo-type="dijit/form/RadioButton"
        data-dojo-attach-event='onChange: _onChangePasswordPolicyTab' data-dojo-attach-point="_passwordPolicyTab">
    <label for="${id}_tab_pwdPolicy" class="tab-label" data-dojo-attach-point="_passwordPolicyLabel">
        <i class="fa fa-user-lock"> </i> Password Policy
    </label>                            
    <input id="${id}_tab_logPolicy" type="radio" name="tabs" value="log" data-dojo-type="dijit/form/RadioButton" 
        data-dojo-attach-event='onChange: _onChangeLogPolicyTab' data-dojo-attach-point="_logPolicyTab">
    <label for="${id}_tab_logPolicy" class="tab-label" data-dojo-attach-point="_logPolicyLabel">
        <i class="fa fa-list-ul"> </i> Log Policy
    </label>
    <input id="${id}_tab_encryptionPolicy" type="radio" name="tabs" data-dojo-type="dijit/form/RadioButton" 
        data-dojo-attach-event='onChange: _onChangeEncryptionPolicyTab' data-dojo-attach-point="_EncryptionPolicyTab">
    <label for="${id}_tab_encryptionPolicy" class="tab-label" data-dojo-attach-point="_encryptionPolicyLabel">
        <i class="fa fa-lock"> </i> Encryption Policy
    </label>
    <input id="${id}_tab_kerberosPolicy" type="radio" name="tabs" data-dojo-type="dijit/form/RadioButton" 
        data-dojo-attach-event='onChange: _onChangeKerberosPolicyTab' data-dojo-attach-point="_kerberosPolicyTab">
    <label for="${id}_tab_kerberosPolicy" class="tab-label" data-dojo-attach-point="_kerberosPolicyLabel">
        <i class="fa fa-user-secret"> </i> Kerberos Policy
    </label>
</div>]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions/>
    <Services/>
    <Resources/>
    <Plugins/>
  </ModelInfo>
</DashboardPluginModel>
