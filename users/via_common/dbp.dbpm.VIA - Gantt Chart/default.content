<DashboardPluginModel description="Example from http://bl.ocks.org/dk8996/5449641&#x000A;Requires&#x000A;- VIA - JQuery Library&#x000A;" name="VIA - Gantt Chart" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="Gantt Chart" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        _loadRequiredLibs : function(callback) {
            var me = this;
            require([AppUtil.getItemURL("/app/dbp/user/via_common/dbpm/VIA - JQuery Library/v3.3.1")], function(jQ) {
                me._$ = jQ;
                me._jQuery = jQ;
                console.debug("_loadRequiredLibs done");
                callback();
            });
        },

        _doPostCreate : function() {
            initGanttChart();
            if (this._useDummyData()) {
                // development and modeling use-case
                // need dummy data
                var self = this;
                this._getDummyData(function(tasks) {
                    self.renderer.result = tasks;
                    self.doRefresh();
                });
            }
            else {
                this.doRefresh();
            }
        },

        _createChart : function(tasks) {
            AppUtil.removeAllChildrenOf(this.div);
            
            // map task status to CSS
            var taskStatus = {
                "SUCCEEDED" : "bar",
                "FAILED" : "bar-failed",
                "RUNNING" : "bar-running",
                "KILLED" : "bar-killed"
            };
            
            var taskNames = [];
            tasks.forEach(function(task) {
                if (taskNames.indexOf(task.taskName) == -1) {
                    taskNames.push(task.taskName);
                }
            });
            taskNames.sort();
            
            tasks.sort(function(a, b) {
                return a.endDate - b.endDate;
            });
            var maxDate = tasks[tasks.length - 1].endDate;
            tasks.sort(function(a, b) {
                return a.startDate - b.startDate;
            });
            var minDate = tasks[0].startDate;
            
            var format = "%H:%M";
            
            var gantt = d3.gantt(this.div, tasks, {w:this.vtWidth,h:this.vtHeight}).taskTypes(taskNames).taskStatus(taskStatus).tickFormat(format);
            gantt(tasks);
        },

        _useDummyData : function() {
            if (this.controller.initialConfig.appId == "dbp") {
                // in Dashboard Plugin app... so either modeling preview or summary preview
                return true;
            }
            if (this.controller.initialConfig.appId == "ax" && this.controller.mode == "edit.model") {
                // in dashboard builder modeling context
                return true;
            }
            return false;
        },

        _getDummyData : function(callback) {
            var tasks = [
                {"startDate":new Date("Sun Dec 09 01:36:45 EST 2012"),"endDate":new Date("Sun Dec 09 02:36:45 EST 2012"),"taskName":"E Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 04:56:32 EST 2012"),"endDate":new Date("Sun Dec 09 06:35:47 EST 2012"),"taskName":"A Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 06:29:53 EST 2012"),"endDate":new Date("Sun Dec 09 06:34:04 EST 2012"),"taskName":"D Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 05:35:21 EST 2012"),"endDate":new Date("Sun Dec 09 06:21:22 EST 2012"),"taskName":"P Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 05:00:06 EST 2012"),"endDate":new Date("Sun Dec 09 05:05:07 EST 2012"),"taskName":"D Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 03:46:59 EST 2012"),"endDate":new Date("Sun Dec 09 04:54:19 EST 2012"),"taskName":"P Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 04:02:45 EST 2012"),"endDate":new Date("Sun Dec 09 04:48:56 EST 2012"),"taskName":"N Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 03:27:35 EST 2012"),"endDate":new Date("Sun Dec 09 03:58:43 EST 2012"),"taskName":"E Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 01:40:11 EST 2012"),"endDate":new Date("Sun Dec 09 03:26:35 EST 2012"),"taskName":"A Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 03:00:03 EST 2012"),"endDate":new Date("Sun Dec 09 03:09:51 EST 2012"),"taskName":"D Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 01:21:00 EST 2012"),"endDate":new Date("Sun Dec 09 02:51:42 EST 2012"),"taskName":"P Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 01:08:42 EST 2012"),"endDate":new Date("Sun Dec 09 01:33:42 EST 2012"),"taskName":"N Job","status":"FAILED"},
                {"startDate":new Date("Sun Dec 09 00:27:15 EST 2012"),"endDate":new Date("Sun Dec 09 00:54:56 EST 2012"),"taskName":"E Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 00:29:48 EST 2012"),"endDate":new Date("Sun Dec 09 00:44:50 EST 2012"),"taskName":"D Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 07:39:21 EST 2012"),"endDate":new Date("Sun Dec 09 07:43:22 EST 2012"),"taskName":"P Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 07:00:06 EST 2012"),"endDate":new Date("Sun Dec 09 07:05:07 EST 2012"),"taskName":"D Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 08:46:59 EST 2012"),"endDate":new Date("Sun Dec 09 09:54:19 EST 2012"),"taskName":"P Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 09:02:45 EST 2012"),"endDate":new Date("Sun Dec 09 09:48:56 EST 2012"),"taskName":"N Job","status":"RUNNING"},
                {"startDate":new Date("Sun Dec 09 08:27:35 EST 2012"),"endDate":new Date("Sun Dec 09 08:58:43 EST 2012"),"taskName":"E Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 08:40:11 EST 2012"),"endDate":new Date("Sun Dec 09 08:46:35 EST 2012"),"taskName":"A Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 08:00:03 EST 2012"),"endDate":new Date("Sun Dec 09 08:09:51 EST 2012"),"taskName":"D Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 10:21:00 EST 2012"),"endDate":new Date("Sun Dec 09 10:51:42 EST 2012"),"taskName":"P Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sun Dec 09 11:08:42 EST 2012"),"endDate":new Date("Sun Dec 09 11:33:42 EST 2012"),"taskName":"N Job","status":"FAILED"},
                {"startDate":new Date("Sun Dec 09 12:27:15 EST 2012"),"endDate":new Date("Sun Dec 09 12:54:56 EST 2012"),"taskName":"E Job","status":"SUCCEEDED"},
                {"startDate":new Date("Sat Dec 08 23:12:24 EST 2012"),"endDate":new Date("Sun Dec 09 00:26:13 EST 2012"),"taskName":"A Job","status":"KILLED"},
            ];
            callback(tasks);
        },
]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function initGanttChart()
    {
        /**
         * @author Dimitry Kudrayvtsev
         * @version 2.0
         */
        
        d3.gantt = function(parentNode, tasks, box) {
            var FIT_TIME_DOMAIN_MODE = "fit";
            var FIXED_TIME_DOMAIN_MODE = "fixed";
            
            var margin = {
                top : 20,
                right : 40,
                bottom : 20,
                left : 150
            };
            var timeDomainStart = d3.time.day.offset(new Date(),-3);
            var timeDomainEnd = d3.time.hour.offset(new Date(),+3);
            var timeDomainMode = FIT_TIME_DOMAIN_MODE;// fixed or fit
            var taskTypes = [];
            var taskStatus = [];
            
            var height = box.h - margin.top - margin.bottom - 5;
            var width = box.w - margin.right - margin.left - 5;
        
            var tickFormat = "%H:%M";
        
            var keyFunction = function(d) {
                return d.startDate + d.taskName + d.endDate;
            };
        
            var rectTransform = function(d) {
                return "translate(" + x(d.startDate) + "," + y(d.taskName) + ")";
            };
        
            var x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);
        
            var y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height - margin.top - margin.bottom ], .1);
            
            var xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(d3.time.format(tickFormat)).tickSubdivide(true)
                    .tickSize(8).tickPadding(8);
        
            var yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);
        
            var initTimeDomain = function() {
                if (timeDomainMode === FIT_TIME_DOMAIN_MODE) {
                    if (tasks === undefined || tasks.length < 1) {
                        timeDomainStart = d3.time.day.offset(new Date(), -3);
                        timeDomainEnd = d3.time.hour.offset(new Date(), +3);
                        return;
                    }
                    tasks.sort(function(a, b) {
                        return a.endDate - b.endDate;
                    });
                    timeDomainEnd = tasks[tasks.length - 1].endDate;
                    tasks.sort(function(a, b) {
                        return a.startDate - b.startDate;
                    });
                    timeDomainStart = tasks[0].startDate;
                }
            };
        
            var initAxis = function() {
                x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);
                y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height - margin.top - margin.bottom ], .1);
                xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(d3.time.format(tickFormat)).tickSubdivide(true)
                        .tickSize(8).tickPadding(8);
        
                yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);
            };
            
            function gantt(tasks) {
                
                initTimeDomain();
                initAxis();
                
                var svg = d3.select(parentNode)
                .append("svg")
                .attr("class", "ganttChart")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("class", "gantt-chart")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
                
              svg.selectAll(".ganttChart")
                 .data(tasks, keyFunction).enter()
                 .append("rect")
                 .attr("rx", 5)
                 .attr("ry", 5)
                 .attr("class", function(d){ 
                     if(taskStatus[d.status] == null){ return "bar";}
                     return taskStatus[d.status];
                     }) 
                 .attr("y", 0)
                 .attr("transform", rectTransform)
                 .attr("height", function(d) { return y.rangeBand(); })
                 .attr("width", function(d) { 
                     return (x(d.endDate) - x(d.startDate)); 
                     });
                 
                 
                 svg.append("g")
                 .attr("class", "x axis")
                 .attr("transform", "translate(0, " + (height - margin.top - margin.bottom) + ")")
                 .transition()
                 .call(xAxis);
                 
                 svg.append("g").attr("class", "y axis").transition().call(yAxis);
                 
                 return gantt;
        
            };
            
            gantt.redraw = function(tasks) {
        
                initTimeDomain();
                initAxis();
                
                var svg = d3.select("svg");
        
                var ganttChartGroup = svg.select(".gantt-chart");
                var rect = ganttChartGroup.selectAll("rect").data(tasks, keyFunction);
                
                rect.enter()
                 .insert("rect",":first-child")
                 .attr("rx", 5)
                 .attr("ry", 5)
                 .attr("class", function(d){ 
                     if(taskStatus[d.status] == null){ return "bar";}
                     return taskStatus[d.status];
                     }) 
                 .transition()
                 .attr("y", 0)
                 .attr("transform", rectTransform)
                 .attr("height", function(d) { return y.rangeBand(); })
                 .attr("width", function(d) { 
                     return (x(d.endDate) - x(d.startDate)); 
                     });
        
                rect.transition()
                  .attr("transform", rectTransform)
                 .attr("height", function(d) { return y.rangeBand(); })
                 .attr("width", function(d) { 
                     return (x(d.endDate) - x(d.startDate)); 
                     });
                
                rect.exit().remove();
        
                svg.select(".x").transition().call(xAxis);
                svg.select(".y").transition().call(yAxis);
                
                return gantt;
            };
        
            gantt.margin = function(value) {
                if (!arguments.length)
                    return margin;
                margin = value;
                return gantt;
            };
        
            gantt.timeDomain = function(value) {
                if (!arguments.length)
                    return [ timeDomainStart, timeDomainEnd ];
                timeDomainStart = +value[0], timeDomainEnd = +value[1];
                return gantt;
            };
        
            /**
             * @param {string}
             *                vale The value can be "fit" - the domain fits the data or
             *                "fixed" - fixed domain.
             */
            gantt.timeDomainMode = function(value) {
                if (!arguments.length)
                    return timeDomainMode;
                timeDomainMode = value;
                return gantt;
        
            };
        
            gantt.taskTypes = function(value) {
                if (!arguments.length)
                    return taskTypes;
                taskTypes = value;
                return gantt;
            };
            
            gantt.taskStatus = function(value) {
                if (!arguments.length)
                    return taskStatus;
                taskStatus = value;
                return gantt;
            };
        
            gantt.width = function(value) {
                if (!arguments.length)
                    return width;
                width = +value;
                return gantt;
            };
        
            gantt.height = function(value) {
                if (!arguments.length)
                    return height;
                height = +value;
                return gantt;
            };
        
            gantt.tickFormat = function(value) {
                if (!arguments.length)
                    return tickFormat;
                tickFormat = value;
                return gantt;
            };
        
            return gantt;
        };
    }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            this._doPostCreate();
            
            // dont really need to load additional JS, esp JQuery
            // code here as placeholder in case that changes in the future
            // -engkee
            // this._loadRequiredLibs(lang.hitch(this, "_doPostCreate"));]]>
        </CodeText>
        <CodeText segment="undefined">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[
            this._createChart(this.renderer.result);]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[
            this.vtWidth = w;
            this.vtHeight = h;
            this._createChart(this.renderer.result);]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;overflow:auto;">
    <style>
        .ganttChart {
        	font-family: Arial, sans-serif;
        	font-size: 12px;
        }
         
        .axis path,.axis line {
        	fill: none;
        	stroke: #000;
        	shape-rendering: crispEdges;
        }
         
        .bar {
        	fill: #33b5e5;
        }
         
        .bar-failed {
        	fill: #CC0000;
        }
         
        .bar-running {
        	fill: #669900;
        }
         
        .bar-succeeded {
        	fill: #33b5e5;
        }
         
        .bar-killed {
        	fill: #ffbb33;
        }
    </style>
    <div data-dojo-attach-point='div' class='ganttChart'>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
    </Functions>
    <Services>
    </Services>
    <Resources>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>