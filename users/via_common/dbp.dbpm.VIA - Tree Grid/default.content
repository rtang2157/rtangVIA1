<DashboardPluginModel description="Description of New Model 1" name="VIA - Tree Grid" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="TreeGridRenderer" private="false">
        <PropertyText>
          <![CDATA[[
    {
        "name": "showHeader",
        "label": "Header Visibility",
        "type": "enums",
        "value": "enable",
        "options": [
			{ "value": "enable", "label":"Visible"},
			{ "value": "disable", "label":"Invisible"}
		] 
    }, 
    {
        "name": "borderType",
        "label": "Border Type",
        "type": "enums",
        "value": "all",
        "options": [
			{ "value": "none", "label":"No borders"},
			{ "value": "outline", "label":"Outline only"},
			{ "value": "all", "label":"All borders"}
		] 
    },
    {
        "name": "rowSpacing",
        "label": "Row Spacing",
        "type": "enums",
        "value": "5",
        "options": [
			{ "value": "0", "label": "0" },{ "value": "1", "label": "1" },{ "value": "2", "label": "2" },{ "value": "3", "label": "3" },{ "value": "4", "label": "4" },{ "value": "5", "label": "5" },
            { "value": "6", "label": "6" },{ "value": "7", "label": "7" },{ "value": "8", "label": "8" },{ "value": "9", "label": "9" },{ "value": "10", "label": "10" }
		] 
    },
    {
        "name": "columnResize",
        "label": "Column Resizable",
        "type": "enums",
        "value": "enable",
        "options": [
			{ "value": "enable", "label":"Enable"},
			{ "value": "disable", "label":"Disable"}
		]
    },
    {
        "name": "highlightColor",
        "label": "Highlight Color",
        "type": "string",
        "value": "#148AC4"
    },
    {
        "name": "hoverColor",
        "label": "Hover Color",
        "type": "string",
        "value": "#148AC4"
    },
    {
        "name": "selectionMode",
        "label": "Selection Mode",
        "type": "enums",
        "value": "single",
        "options": [
			{ "value": "none", "label":"None"},
			{ "value": "single", "label":"Single"},
			{ "value": "multiple", "label":"Multiple"},
			{ "value": "extended", "label":"Extended"}
		] 
    },
    {
        "name": "datatype",
        "label": "Data Type",
        "type": "enums",
        "value": "raw",
        "options": [
			{ "value": "raw", "label":"Flat Data"},
			{ "value": "hierarchy", "label":"Hierarchical Data"}
		]
    },
    {
        "name": "hierarchy",
        "label": "Hierarchy",
        "type": "json"
    },
    {
        "name": "columnSetting",
        "label": "ColumnSetting",
        "type": "json"
    }
]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            /*
            var columnSettings  = [
                    { "name":"KpiSet","label":"KPI Set","type":"string","defaultListId":1,"opened":false,headerAlign:"left",
                        "style":{"fontStyle":"normal","fontWeight":"normal","fontSize":"12","backgroundColor":"#EDEDED","color":"#000000","textAlign":"left", "width": 100}
                    },
                    { "name":"KpiName","label":"KPI Name","type":"string","defaultListId":2,"opened":false,headerAlign:"left",
                        "style":{"fontStyle":"normal","fontWeight":"normal","fontSize":"12","backgroundColor":"#EDEDED","color":"#000000","textAlign":"left", "width": 200}
                    },
                    { "name":"KpiValue","label":"KPI Value","type":"string","defaultListId":3,"opened":false,headerAlign:"center",
                        "style":{"fontStyle":"normal","fontWeight":"normal","fontSize":"12","backgroundColor":"#ffffff","color":"#000000","textAlign":"right", "width": 75}
                    },
                    { "name":"KpiJudgement","label":"KPI Judgment","type":"string","defaultListId":4,"opened":true,headerAlign:"center",
                        "style":{"fontStyle":"normal","fontWeight":"normal","fontSize":"12","backgroundColor":"#ffffff","color":"#000000","textAlign":"center", "width": 50}
                    },
                    { "name":"KpiStatus","label":"Population KPI Status","type":"string","defaultListId":5,"opened":false,headerAlign:"center",
                        "style":{"fontStyle":"normal","fontWeight":"normal","fontSize":"12","backgroundColor":"#ffffff","color":"#000000","textAlign":"left", "width": 75},
                        "renderer":{"type":"bandedValue","context":"gridCell",
                            "format":{"type":"number","pattern":"1"},
                            "bandColorMap":{"good":ChartThemeVariables.bandColorMap.good,"fair":ChartThemeVariables.bandColorMap.fair,"poor":ChartThemeVariables.bandColorMap.poor, "noBand": "#CCCCCC"},
                            "goodField":"KpiGoodCount","fairField":"KpiFairCount","poorField":"KpiPoorCount","totalField":"KpiTotalCount"}
                    }
                ]
            var attributes = [
                    {"name":"KpiSet","label":"KPI Set","isKey":false,"isVisible":false,"isName":false},
                    {"name":"KpiName","label":"KpiName","constant":null,"isKey":false,"isVisible":false,"isName":false},
                    {"name":"KpiValue","label":"KpiValue","isKey":false,"isVisible":false,"isName":false},
                    {"name":"KpiJudgement","label":"KpiJudgement","isKey":false,"isVisible":false,"isName":false},
                    {"name":"KpiStatus","label":"KpiStatus","isKey":false,"isVisible":false,"isName":false}
                ];
                
            this._metadata = {
            	attributes : attributes,
            	hierarchies : [],
            	measures :{},
            	measuresInArray:[],
            	perspectives:[],
            	gridSetting : [
            		{name: "showHeader", value: "enable"},
                    {name: "borderType", value: "all"},
                    {name: "rowSpacing", value: "2"},
                    {name: "columnResize", value: "enable"},
                    {name: "columnSortable", value: "enable"},
                    {name: "highlightColor", value: "#148AC4"},
                    {name: "hoverColor", value: "#148AC4"},
                    {name: "selectionMode", value: "single"},
                    {name: "columnSetting", value: JSON.stringify(columnSettings)}
                ]
            };
            
            this._result = [
                {KpiSet: "Operation Set", KpiName: "Average Processor Speed", KpiJudgement: "good", KpiValue: "100", KpiStatus: "20", KpiStatus1: "20", KpiStatus2: "40", KpiStatus3: "20", _id: 1, _type: "item"},
                {KpiSet: "Operation Set", KpiName: "Max Processor Speed", KpiJudgement: "bad", KpiValue: "200", KpiStatus: "40", KpiStatus1: "40", KpiStatus2: "40", KpiStatus3: "20", _id: 2, _type: "item"},
                {KpiSet: "Operation Set", KpiName: "Min Processor Speed", KpiJudgement: "good", KpiValue: "300", KpiStatus: "50", KpiStatus1: "50", KpiStatus2: "40", KpiStatus3: "20", _id: 3, _type: "item"},
                {KpiSet: "Operation Set", KpiName: "Average Processor Temperature", KpiJudgement: "poor", KpiValue: "100", KpiStatus: "20", KpiStatus0: "20", KpiStatus2: "40", KpiStatus3: "20", _id: 4, _type: "item"},
                {KpiSet: "Service Performance Set", KpiName: "KPI11", KpiJudgement: "good", KpiValue: "100", KpiStatus: "20", KpiStatus1: "20", KpiStatus2: "40", KpiStatus3: "20", _id: 5, _type: "item"},
                {KpiSet: "Service Performance Set", KpiName: "KPI12", KpiJudgement: "bad", KpiValue: "100", KpiStatus: "30", KpiStatus1: "30", KpiStatus2: "30", KpiStatus3: "60", _id: 6, _type: "item"},
                {KpiSet: "Service Performance Set", KpiName: "KPI13", KpiJudgement: "good", KpiValue: "100", KpiStatus: "40", KpiStatus1: "40", KpiStatus2: "40", KpiStatus3: "70", _id: 7, _type: "item"},
                {KpiSet: "Service Performance Set", KpiName: "KPI14", KpiJudgement: "good", KpiValue: "100", KpiStatus: "40", _id: 8, _type: "item"}
            ];
            */]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.model = this.renderer.model;
            /*if (this.initialConfig.properties != null && this.initialConfig.properties.attributes != null){
                try{
                    attributes = JSON.parse(this.initialConfig.properties.attributes);
                }catch (e){}
            }
            */
            
            var columnSettings = this._parseColumnSetting();
            var attributes = [];
            attributes = this._getAttributes(columnSettings);
            
            var gridSetting = [
        		{name: "showHeader", value: "enable"},
                {name: "borderType", value: "all"},
                {name: "rowSpacing", value: "5"},
                {name: "columnResize", value: "enable"},
                {name: "columnSortable", value: "enable"},
                {name: "highlightColor", value: "#148AC4"},
                {name: "hoverColor", value: "#148AC4"},
                {name: "selectionMode", value: "single"},
                {name: "columnSetting", value: JSON.stringify(columnSettings)}
            ];
            if (this.initialConfig.properties != null){
                if(this.initialConfig.properties.showHeader != null){
                    updateGridSetting(gridSetting, "showHeader", this.initialConfig.properties.showHeader);
                }
                if(this.initialConfig.properties.borderType != null){
                    updateGridSetting(gridSetting, "borderType", this.initialConfig.properties.borderType);
                }
                if(this.initialConfig.properties.rowSpacing != null){
                    updateGridSetting(gridSetting, "rowSpacing", this.initialConfig.properties.rowSpacing);
                }
                if(this.initialConfig.properties.columnResize != null){
                    updateGridSetting(gridSetting, "columnResize", this.initialConfig.properties.columnResize);
                }
                if(this.initialConfig.properties.highlightColor != null){
                    updateGridSetting(gridSetting, "highlightColor", this.initialConfig.properties.highlightColor);
                }
                if(this.initialConfig.properties.hoverColor != null){
                    updateGridSetting(gridSetting, "hoverColor", this.initialConfig.properties.hoverColor);
                }
                if(this.initialConfig.properties.selectionMode != null){
                    updateGridSetting(gridSetting, "selectionMode", this.initialConfig.properties.selectionMode);
                }
            }
            
            this._metadata = {
            	attributes : attributes,
            	hierarchies : [],
            	measures :{},
            	measuresInArray:[],
            	perspectives:[],
            	gridSetting : gridSetting
            };
            if (this.initialConfig.properties != null && this.initialConfig.properties.datatype == "hierarchy"){
                this._metadata.hierarchyData = true;
            }
            
            this._hierarchyKey = [];
            if (this.initialConfig.properties != null && this.initialConfig.properties.hierarchy != null){
                try{
                    this._hierarchyKey = JSON.parse(this.initialConfig.properties.hierarchy)
                }catch (e){}
            }]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        _loadTreeGridWidget : function(){
            var me = this;
            require([
                "widgetcore/renderers/treeGrid/_TreeGridWidget"
            ], function(TreeGridWidget){
                me._TreeGridWidgetClass = TreeGridWidget;
                me._createWidget();
                me.doRefresh();
           }); 
        },
        
        _createWidget : function() {
            AppUtil.removeAllChildrenOf(this.domNode);
            this.gridDiv = domConstruct.create("div", {
                style: "width:100%;height:100%;"
            });
            this.domNode.appendChild(this.gridDiv);
            this._widget = new this._TreeGridWidgetClass({
            	metadata: this._metadata,
            	fullData: false,
            	_layout : "MCPC",
            	_hierarchy : {keys:this._hierarchyKey},
            	renderer: this,
            	"class":"voiTreeGrid"
            },this.gridDiv);
            this._widget.updateWidthAndHeight(this.vtWidth, this.vtHeight);
        },
        
        showHoverDetailOnSelection : function(tileInfoModel, selection, targetDom){
            if (this.renderer.tile != null) {
                this.renderer.tile.showHoverDetailOnSelection(tileInfoModel, selection, targetDom);
            }
        },
        
        hideHoverDetail  : function(tileInfoModel){
            if (this.renderer.tile != null) {
                this.renderer.tile.hideHoverDetail(tileInfoModel);
            }
        },
        
        updateSelection : function(selection) {
            if (this.renderer.tile != null) {
                this.renderer.tile.updateSelection(selection);
            }
        },
        
        drillDownOnSelection : function(tileInfoModel, selection) {
            if (this.renderer.tile != null) {
                this.renderer.tile.drillDownOnSelection(tileInfoModel, selection);
            }
        },
        
        _getDefaultColumnSetting : function(){
            var schema = this.renderer.schema;
            var columnSetting = [];
            for (var i=0; i<schema.length; i++){
                var field = schema[i];
                var align = getDefaultAlignmentStyle(field.type);
                columnSetting.push({
                    name: field.name,
                    label: field.label,
                    headerAlign: align,
                    style:{
                        textAlign:align
                    }
                })
            }
            return columnSetting;
        },
        
        _fixColumnSettings : function(columnSetting){
            for (var i=0; i<columnSetting.length; i++){
                var cs = columnSetting[i];
                if (cs.headerAlign == null){
                    if (cs.style && cs.style.textAlign)
                        cs.headerAlign = cs.style.textAlign;
                    else
                        cs.headerAlign = "left"
                }
            }
        },
        
        _getAttributes : function(columnSetting){
            var attrib = [];
            for (var i=0; i<columnSetting.length; i++){
                var cs = columnSetting[i];
                attrib.push({
                    "name":cs.name,
                    "label":cs.label,
                    "isKey":cs.isKey || false,
                    "isVisible":false,
                    "isName":cs.isName
                })
            }
            return attrib;
        },
        
        _destroyGrid : function(){
            if(this._widget)
                this._widget.destroy();
        },
        
        _parseColumnSetting : function(){
            var columnSetting = null;
            if (this.initialConfig.properties != null && this.initialConfig.properties.columnSetting != null){
                try{
                    columnSetting = JSON.parse(this.initialConfig.properties.columnSetting);
                }catch (e){}
            }
            
            if (columnSetting == null){
                columnSetting = this._getDefaultColumnSetting();
            } else {
                this._fixColumnSettings(columnSetting);
            }
            
            if (this._metadataChangedConfig && this._metadataChangedConfig.columnSetting != undefined){
                for (var idx = 0; idx < columnSetting.length; idx++) {
                    var setting = columnSetting[idx];
                    if (this._metadataChangedConfig.columnSetting[idx]){
                        AppUtil.mixinDeep(setting, this._metadataChangedConfig.columnSetting[idx]);
                    }
                    if (setting.name && this._metadataChangedConfig.columnSetting[setting.name]){
                        AppUtil.mixinDeep(setting, this._metadataChangedConfig.columnSetting[setting.name]);
                    }
                }
            }
            return columnSetting;
        }]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[            var result = this.renderer.result;
            if(result){
                if (this._metadata.hierarchyData == true){
                    var groupIds = {};
                    for (var i=0; i<result.length; i++){
                        if (result[i]["_id"] == null)
                            result[i]["_id"] = i;
                        if (result[i]["_parent"] != null){
                            groupIds[result[i]["_parent"]] = 1;
                        }
                    }
                    for (var i=0; i<result.length; i++){
                        if ( groupIds[result[i]["_id"]] == 1)
                            result[i]["_type"] = "group";
                        else
                            result[i]["_type"] = "item";
                    }
                }else{
                    for (var i=0; i<result.length; i++){
                        result[i]["_id"] = i;
                        result[i]["_type"] = "item";
                    }
                }
                if (this._widget != null) {
                    this._widget.refresh(result);
                }
            }]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            this.vtWidth = w;
            this.vtHeight = h;
            if (this._widget != null) {
                this._widget.updateWidthAndHeight(w, h);
            }]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function updateGridSetting(gridSetting, property, value){
        for (var i=0; i<gridSetting.length; i++){
            if(gridSetting[i].name == property){
                gridSetting[i].value = value;
                break;
            }
        }
    }
    
    function getDefaultAlignmentStyle(type){
	    type = String(type).toLowerCase();
        var style = "left";
        switch (type) {
            case "time":
            case "dateTime":
            case "date":
            case "timestamp":
            case "datetime":
                style = "left";
                break;
            case "number":
            case "float":
            case "int":
            case "integer":
            case "double":
            case "long":
            case "short":
            case "byte":
            	style = "right";
            	break;
            case "string":
                style = "left";
                break;
            default:
                style = "left";
        }
        return style;
    }]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[            this._loadTreeGridWidget();]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (evt.grid != null) {
                var recreateGrid = false;
                this._metadataChangedConfig = evt.grid;
                if (evt.grid.columnSetting != null){
                    recreateGrid = true;
                    var columnSettings = this._parseColumnSetting();
                    if (this._metadata && this._metadata.gridSetting){
                        this._metadata.attributes = this._getAttributes(columnSettings);
                        for (var i=0; i<this._metadata.gridSetting.length; i++){
                            if(this._metadata.gridSetting[i].name == "columnSetting"){
                                this._metadata.gridSetting[i].value =  JSON.stringify(columnSettings);
                            }
                        }
                    }
                }
                if (evt.grid.hierarchy != null){
                    recreateGrid = true;
                    this._hierarchyKey = evt.grid.hierarchy;
                }
                if (recreateGrid && this._widget){
                    this._destroyGrid();
                    this._loadTreeGridWidget();
                }
            }]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            this._destroyGrid();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;">
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
    </Functions>
    <Services>
    </Services>
    <Resources>
      <Resource uuid="0250e244-b460-43aa-80b4-ff2b2666c5cc" name="__Configs" type="text/plain" size="4261" private="true">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="58046a25-62e4-42a0-84cc-df04fa5b4acd" name="_ColumnSettingReadme" type="text/plain" size="3024" private="true">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="f5ab523b-0052-4c12-8b66-9a0096bba90f" name="hierarchySampleData" type="text/plain" size="43470" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="cdebfa14-314f-41cf-85c3-e6c77286cba4" name="sampleData" type="text/plain" size="29460" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>