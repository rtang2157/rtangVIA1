<DashboardPluginModel description="jsPlumb based FlowChart" name="VIA - jsPlumb FlowChart" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="FlowChart" private="false">
        <PropertyText>
          <![CDATA[[{
    "name" : "url",
    "label" : "Model URL",
    "type" : "string"
}, {
    "name" : "nodeWidth",
    "label" : "Node Width",
    "type" : "number",
    "min" : 50,
    "max" : 200,
    "step" : 10,
    "value" : 80
}, {
    "name" : "nodeHeight",
    "label" : "Node Height",
    "type" : "number",
    "min" : 50,
    "max" : 200,
    "step" : 10,
    "value" : 80
}, {
    "name" : "idField",
    "label" : "ID Field",
    "type" : "field"
}, {
    "name" : "valueField",
    "label" : "Value Field",
    "type" : "field"
}, {
    "name" : "fillColor",
    "label" : "Fill Color",
    "type" : "color",
    "value" : "red"
}, {
    "name" : "draggable",
    "label" : "Move Node",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "editable",
    "label" : "Editable",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "showNodeLabel",
    "label" : "Node Label",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "showNodeValue",
    "label" : "Node Value",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "showConnLabel",
    "label" : "Connection Label",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "zoomControl",
    "label" : "Zoom Control",
    "type" : "boolean",
    "value" : false
}, {
    "name" : "nodeLabelStyle",
    "label" : "Node Label Style",
    "type" : "string"
}, {
    "name" : "nodeValueStyle",
    "label" : "Node Value Style",
    "type" : "string"
}, {
    "name" : "connLabelStyle",
    "label" : "Conn Label Style",
    "type" : "string"
}]]]>
        </PropertyText>
        <CodeText segment="#buildRendering">
          <![CDATA[
            this.parseConfig();]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        parseConfig : function() {
            //if (this.initialConfig.properties != null && this.initialConfig.properties.model != null && this.initialConfig.properties.model.trim() != "") {
            //    this._model = JSON.parse(this.initialConfig.properties.model);
            //}
            this._jsonURL = this.initialConfig.properties.url || "";
            this._nodeWidth = Number(this.initialConfig.properties.nodeWidth || 80);
            this._nodeHeight = Number(this.initialConfig.properties.nodeHeight || 80);
            this._idField = this.initialConfig.properties.idField || "";
            this._valueField = this.initialConfig.properties.valueField || "";
            this._fillColor = this.initialConfig.properties.fillColor || "red";
            this._draggable = this.initialConfig.properties.draggable == true;
            this._editable = this.initialConfig.properties.editable == true;
            this._showNodeLabel = this.initialConfig.properties.showNodeLabel == true;
            this._showNodeValue = this.initialConfig.properties.showNodeValue == true;
            this._showConnLabel = this.initialConfig.properties.showConnLabel == true;
            this._zoomControl = this.initialConfig.properties.zoomControl || false;
            this._nodeLabelStyle = this.initialConfig.properties.nodeLabelStyle || "";
            this._nodeValueStyle = this.initialConfig.properties.nodeValueStyle || "";
            this._connLinkstyle = this.initialConfig.properties.connLabelStyle || "";
        },
        
        _loadRequiredLibs : function(callback) {
            var me = this;
            if (window.jsPlumb === undefined) {
                console.debug("Loading https://jsplumbtoolkit.com/community/demo/flowchart/lib/jsplumb.js");
                require(["https://jsplumbtoolkit.com/community/demo/flowchart/lib/jsplumb.js"], function() {
                    // jsPlumb not require() compliant... registers directly ONTO window
                    if (window.jsPlumb !== undefined) {
                        console.debug("jsPlumb loaded");
                        callback();
                    }
                    else {
                        console.error("jsPlumb not loaded");
                    }
                });
            }
            else {
                console.debug("jsPlumb already loaded");
                callback();
            }
        },
        
        parseData : function(result) {
            if (this._idField != "" && this._valueField != "") {
                // first reset background-color
                for (var key in this._nodeDivs) {
                    var node = this._nodeDivs[key];
                    domStyle.set(node.div, "background-color", "");
                }
                var min = NaN;
                var max = NaN;
                for (var i=0; i<result.length; i++) {
                    var record = result[i];
                    var val = Number(record[this._valueField]);
                    if (isNaN(min) || min > val) {
                        min = val;
                    }
                    if (isNaN(max) || max < val) {
                        max = val;
                    }
                }
                var self = this;
                require(["dojo/_base/Color"], function(Color) {
                    var fillColor = new Color(self._fillColor);
                    var rgba = fillColor.toRgba();
                    for (var i=0; i<result.length; i++) {
                        var record = result[i];
                        var id = record[self._idField];
                        var node = self._nodeDivs[id];
                        if (node != null) {
                            var val = Number(record[self._valueField]);
                            rgba[3] = (val - min) / (max - min);
                            var nodeColor = new Color(rgba);
                            domStyle.set(node.div, "background-color", nodeColor.toCss(true));
                            node.span.innerHTML = self._getNodeHTML(node.label, val);
                        }
                        else {
                            var link = self._connLinks[id];
                            if (link != null) {
                                link.label = String(record[self._valueField]);
                                link.conn.getOverlay("label").setLabel(link.label);
                            }
                        }
                    }
                });
            }
        },
        
        generateChart : function() {
            var self = this;

            this._nodeDivs = {};
            this._connLinks = {};
            
            // remove all ports and connectors
            for (var i=0; i<this.canvasDiv.childNodes.length; i++) {
                var node = this.canvasDiv.childNodes[i];
                if (node != this.nodesDiv) {
                    this.canvasDiv.removeChild(node);
                }
            }

            // remove all nodes
            AppUtil.removeAllChildrenOf(this.nodesDiv);

            if (this._model == null) {
                return;
            }
            
            var nodes = this._model.nodes || [];
            var links = this._model.links || [];
            
            for (var i=0; i<nodes.length; i++) {
                var node = nodes[i];
                var style = "top:" + node.top + "px;left:" + node.left + "px;";
                if (node.type == "State") {
                    style += "width:" + this._nodeWidth + "px;height:" + this._nodeHeight + "px;";
                }
                var nodeDiv = domConstruct.create("div", {
                    "class" : node.type+"Node jtk-node",
                    "id" : this.uuid + node.id,
                    "style" : style,
                });
                this.nodesDiv.appendChild(nodeDiv);

                var nodeSpan = domConstruct.create("span", {
                    "class" : node.type+"Text",
                });
                nodeSpan.innerHTML = this._getNodeHTML(node.label, "");
                nodeDiv.appendChild(nodeSpan);
                
                this._nodeDivs[node.id] = {
                    label : node.label,
                    div : nodeDiv,
                    span : nodeSpan,
                };
                
                if (node.inputs == null) {
                    // if inputs not defined, scan links for target matching this node
                    // and add port to inputs
                    node.inputs = [];
                    for (var j=0; j<links.length; j++) {
                        var link = links[j];
                        if (link.target.node == node.id && node.inputs.indexOf(link.target.port) == -1) {
                            node.inputs.push(link.target.port);
                        }
                    }
                }
                if (node.outputs == null) {
                    // if outputs not defined, scan links for source matching this node
                    // and add port to outputs
                    node.outputs = [];
                    for (var j=0; j<links.length; j++) {
                        var link = links[j];
                        if (link.source.node == node.id && node.outputs.indexOf(link.source.port) == -1) {
                            node.outputs.push(link.source.port);
                        }
                    }
                }
            }

            jsPlumb.ready(function() {
                var instance = jsPlumb.getInstance({
                    // default drag options
                    DragOptions: { cursor: 'pointer', zIndex: 2000 },
                    // the overlays to decorate each connection with.  note that the label overlay uses a function to generate the label text; in this
                    // case it returns the 'labelText' member that we set on each connection in the 'init' method below.
                    ConnectionOverlays: [
                        [ "Arrow", {
                            location: 1,
                            visible:true,
                            width:11,
                            length:11,
                            id:"ARROW",
                            events:{
                                click:function() { alert("you clicked on the arrow overlay")}
                            }
                        } ],
                        [ "Label", {
                            location: 0.1,
                            id: "label",
                            cssClass: "aLabel",
                            events:{
                                tap:function() { alert("hey"); }
                            }
                        }]
                    ],
                    Container: self.canvasDiv
                });
                self._jspInstance = instance;

                instance.registerConnectionTypes({
                    "basic": {
                        connector: "FlowChart",
                        hoverPaintStyle: { stroke: "blue" },
                        overlays: [
                            "Arrow"
                        ]
                    },
                    "selected":{
                        connector: "FlowChart",
                        paintStyle: { stroke: "red", strokeWidth: 4 },
                        hoverPaintStyle: { stroke: "blue" },
                        overlays: [
                            "Arrow"
                        ]
                    }
                });                

                // this is the paint style for the connecting lines..
                var connectorPaintStyle = {
                        strokeWidth: 2,
                        stroke: "#61B7CF",
                        joinstyle: "round",
                        outlineStroke: "white",
                        outlineWidth: 2
                    },
                // .. and this is the hover style.
                    connectorHoverStyle = {
                        strokeWidth: 3,
                        stroke: "#216477",
                        outlineWidth: 5,
                        outlineStroke: "white"
                    },
                    endpointHoverStyle = {
                        fill: "#216477",
                        stroke: "#216477"
                    },
                // the definition of source endpoints (the small blue ones)
                    sourceEndpoint = {
                        endpoint: "Dot",
                        paintStyle: {
                            stroke: "#7AB02C",
                            fill: "transparent",
                            radius: 7,
                            strokeWidth: 1
                        },
                        isSource: true,
                        // uncomment if we want to allow fan-out
                        // maxConnections: -1,
                        connector: [ "Flowchart", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true } ],
                        connectorStyle: connectorPaintStyle,
                        hoverPaintStyle: endpointHoverStyle,
                        connectorHoverStyle: connectorHoverStyle,
                        dragOptions: {},
                        overlays: [
                            [ "Label", {
                                location: [0.5, 1.5],
                                label: "Drag",
                                cssClass: "endpointSourceLabel",
                                visible:false
                            } ]
                        ]
                    },
                // the definition of target endpoints (will appear when the user drags a connection)
                    targetEndpoint = {
                        endpoint: "Dot",
                        paintStyle: { fill: "#7AB02C", radius: 7 },
                        hoverPaintStyle: endpointHoverStyle,
                        // uncomment if we want to DIS-allow fan-in
                        maxConnections: -1,
                        dropOptions: { hoverClass: "hover", activeClass: "active" },
                        isTarget: true,
                        overlays: [
                            [ "Label", { location: [0.5, -0.5], label: "Drop", cssClass: "endpointTargetLabel", visible:false } ]
                        ]
                    },
                    init = function (conn) {
                        // placeholder to initialize connection
                    };
            
                var _addEndpoints = function (toId, sourceAnchors, targetAnchors) {
                    for (var i = 0; i < sourceAnchors.length; i++) {
                        var sourceUUID = toId + sourceAnchors[i];
                        var ep = instance.addEndpoint(self.uuid + toId, sourceEndpoint, {
                            anchor: sourceAnchors[i], uuid: sourceUUID
                        });
                        if (!self._editable) {
                            ep.setEnabled(false);
                        }
                    }
                    for (var j = 0; j < targetAnchors.length; j++) {
                        var targetUUID = toId + targetAnchors[j];
                        var ep = instance.addEndpoint(self.uuid + toId, targetEndpoint, {
                            anchor: targetAnchors[j], uuid: targetUUID
                        });
                        if (!self._editable) {
                            ep.setEnabled(false);
                        }
                    }
                };
            
                // suspend drawing and initialise.
                instance.batch(function () {

                    for (var i=0; i<nodes.length; i++) {
                        var node = nodes[i];
                        _addEndpoints(node.id, node.outputs, node.inputs);
                    }

                    // listen for new connections; initialise them the same way we initialise the connections at startup.
                    instance.bind("connection", function (connInfo, originalEvent) {
                        init(connInfo.connection);
                    });
            
                    // make all the window divs draggable
                    if (self._draggable) {
                        instance.draggable(jsPlumb.getSelector(".flowchart-demo .jtk-node"), { grid: [20, 20] });
                    }

                    for (var i=0; i<links.length; i++) {
                        var link = links[i];
                        if (link.id == null) {
                            link.id = link.source.node+"/"+link.target.node;
                        }
                        var conn = instance.connect({
                            uuids: [link.source.node + link.source.port, link.target.node + link.target.port],
                            editable: self._editable
                        });
                        conn["_vtid_"] = link.id;
                        if (self._showConnLabel && link.label != null) {
                            conn.getOverlay("label").setLabel(link.label);
                            self._connLinks[link.id] = {
                                conn  : conn,
                                label : link.label
                            };
                        }
                    }

                    if (self._editable) {
                        //
                        // listen for clicks on connections, and offer to delete connections on click.
                        //
                        instance.bind("click", function (conn, originalEvent) {
                            if (originalEvent.ctrlKey && confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?")) {
                                instance.deleteConnection(conn);
                            }
                            conn.toggleType("selected");
                            if (self._selectedConn != null) {
                                //self._selectedConn.removeType("basic");
                                if (self._selectedConn == conn) {
                                    delete self._selectedConn;
                                }
                                else {
                                    self._selectedConn = conn;
                                }
                            }
                            else {
                                self._selectedConn = conn;
                            }
                        });
                
                        instance.bind("connectionDrag", function (connection) {
                            console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
                        });
                
                        instance.bind("connectionDragStop", function (connection) {
                            console.log("connection " + connection.id + " was dragged");
                        });
                
                        instance.bind("connectionMoved", function (params) {
                            console.log("connection " + params.connection.id + " was moved");
                        });
                    }
                });
            
                jsPlumb.fire("jsPlumbDemoLoaded", instance);
            });
        },

        _useDummyData : function() {
            if (this.controller.initialConfig.appId == "dbp") {
                // in Dashboard Plugin app... so either modeling preview or summary preview
                return true;
            }
            if (this.controller.initialConfig.appId == "ax" && this.controller.mode == "edit.model") {
                // in dashboard builder modeling context
                return true;
            }
            return false;
        },

        _getDummyData : function(callback) {
            var result = [];
            callback(result);
        },
        
        _getNodeHTML : function(label, value) {
            var html = "";
            if (this._showNodeLabel && this._showNodeValue) {
                html = "<span style='" + this._nodeLabelStyle + "'>" + label + "</span><br><span style='" + this._nodeValueStyle + "'>" + value + "</span>";
            }
            else if (this._showNodeLabel) {
                html = "<span style='" + this._nodeLabelStyle + "'>" + label + "</span>";
            }
            else if (this._showNodeValue) {
                html = "<span style='" + this._nodeValueStyle + "'>" + value + "</span>";
            }
            return html;
        },
        
        JSON_DATA_URL : "data:application/json;base64,",
        
        _loadJsonModel : function(callback) {
            var self = this;
            if (this._jsonURL.trim() != "") {
                var uri = this.properties._model.substring(0, this.properties._model.lastIndexOf("/"));
                var params = {};
                this._jsonURL = this._jsonURL.trim();
                if (this._jsonURL.indexOf(this.JSON_DATA_URL) == 0) {
                    window.setTimeout(function() {
                        var str = self._jsonURL.substring(self.JSON_DATA_URL.length);
                        self._model = JSON.parse(atob(str));
                        callback();
                    }, 10);
                    uri = null;
                }
                else if (this._jsonURL.indexOf("http://") == 0 || this._jsonURL.indexOf("https://") == 0) {
                    // external URL
                    uri = this._jsonURL;
                    params = null;
                }
                else if (this._jsonURL.indexOf("/app/dbp") == 0) {
                    // resource from explicit plugin...
                    var sep = this._jsonURL.lastIndexOf("?op=");
                    if (sep != -1) {
                        uri = this._jsonURL.substring(0, sep);
                        params["op"] = this._jsonURL.substring(sep+4);
                    }
                    else {
                        // error
                        uri = null;
                    }
                }
                else {
                    // resource from this plugin
                    params["op"] = "vt:dbp:resource:" + this._jsonURL
                }
                if (uri != null) {
                    if (params != null) {
                        doREST("get", uri, params, null, function(t) {
                            self._model = JSON.parse(t);
                            callback();
                        });
                    }
                    else {
                        // external resource
                        GET(uri, null, function(t) {
                            self._model = JSON.parse(t);
                            callback();
                        });
                    }
                }
            }
        },
        
        _applyTransform : function() {
            if (this.canvasDiv != null) {
                var transformOrigin = "0% 0%";
                var transform = "";
                if (this._offset.x != 0 || this._offset.y != 0) {
                    transform += "translate(" + (- this._offset.x) + "px, " + (- this._offset.y) + "px)";
                }
                if (this._scale != 1) {
                    transform += "scale(" + this._scale + "," + this._scale + ")";
                }
                domStyle.set(this.canvasDiv, {
                    transformOrigin: transformOrigin,
                    WebkitTransformOrigin: transformOrigin,
                    transform : transform,
                    WebkitTransform : transform,
                });
            }
        },

        ZOOM_WIDGET_ALIGN : "right",
        ZOOM_WIDGET_LEFT  : 20,
        ZOOM_WIDGET_RIGHT : 20,
        ZOOM_WIDGET_TOP   : 20,
        ZOOM_MIN_SCALE    : 0.1,
        ZOOM_MAX_SCALE    : 2.0,
        ZOOM_HIDE_TIMEOUT : 3000,

        _addZoomWidget : function(callback) {  
            var me = this;
            require(["af/renderers/widgets/ZoomWidget", "dojo/mouse"], function(ZoomWidget, mouse) {
                me._zoomWidget = new ZoomWidget({
                    align        : me.ZOOM_WIDGET_ALIGN,
                    left         : me.ZOOM_WIDGET_LEFT,
                    right        : me.ZOOM_WIDGET_RIGHT,
                    top          : me.ZOOM_WIDGET_TOP,
                    minScale     : me.ZOOM_MIN_SCALE,
                    maxScale     : me.ZOOM_MAX_SCALE,
                    zoomFunction : function(scale) {
                        me._scale = scale;
                        me._applyTransform();
                        me.renderer.onScale(scale);
                    }
                });
                me.domNode.appendChild(me._zoomWidget.domNode);

                // custom styling
                domStyle.set(me._zoomWidget.domNode, {
                    backgroundColor : "rgba(0, 0, 0, 0.5)",
                    border          : "thin solid lightgray",
                    borderRadius    : "5px",
                    padding         : "5px",
                    opacity         : 0.7,
                });
                
                me._zoomWidgetAutoHideTimeout = setTimeout(function() {
                    if (me._zoomWidget != null && me._zoomWidget.domNode != null) {
                        domStyle.set(me._zoomWidget.domNode, "opacity", 0.1);
                    }
                    me._zoomWidgetAutoHideTimeout = null;
                }, me.ZOOM_HIDE_TIMEOUT);
                
                on(me._zoomWidget.domNode, mouse.enter, function(evt) {
                    if (me._zoomWidgetAutoHideTimeout != null) {
                        clearTimeout(me._zoomWidgetAutoHideTimeout);
                        me._zoomWidgetAutoHideTimeout = null;
                    }
                    domStyle.set(me._zoomWidget.domNode, "opacity", 0.7);
                });
                on(me._zoomWidget.domNode, mouse.leave, function(evt) {
                    me._zoomWidgetAutoHideTimeout = setTimeout(function() {
                        if (me._zoomWidget != null && me._zoomWidget.domNode != null) {
                            domStyle.set(me._zoomWidget.domNode, "opacity", 0.1);
                        }
                        me._zoomWidgetAutoHideTimeout = null;
                    }, me.ZOOM_HIDE_TIMEOUT);
                });
                me._zoomWidget.setScale(me._scale);
            });
        },

        _updateZoomWidgetOnScroll : function(zoomWidget) {
            if (zoomWidget != null) {
                switch (this.ZOOM_WIDGET_ALIGN) {
                    case "left":
                        domStyle.set(zoomWidget.domNode, {
                            left : (zoomWidget.domNode.parentNode.scrollLeft + this.ZOOM_WIDGET_LEFT) + "px",
                            top  : (zoomWidget.domNode.parentNode.scrollTop + this.ZOOM_WIDGET_TOP) + "px",
                        });
                        break;
                    case "right":
                        domStyle.set(zoomWidget.domNode, {
                            right : (this.ZOOM_WIDGET_RIGHT - zoomWidget.domNode.parentNode.scrollLeft) + "px",
                            top  : (zoomWidget.domNode.parentNode.scrollTop + this.ZOOM_WIDGET_TOP) + "px",
                        });
                        break;
                }
            }
        },
]]>
        </CodeText>
        <CodeText segment="#doRefresh">
          <![CDATA[
            this._result = this.renderer.result;
            this.parseData(this._result || []);]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[
            var self = this;
            self._loadJsonModel(function() {
                if (self._zoomControl) {
                    self._addZoomWidget(function() {
                        on(self.domNode, "scroll", function(evt) {
                            self._updateZoomWidgetOnScroll(self._zoomWidget);
                            var origin = { x: self.domNode.scrollLeft, y: self.domNode.scrollTop };
                            self.renderer.onScroll(origin);
                        });
                        self.renderer.scrollTo = function(origin) {
                            self._offset = origin;
                            self._applyTransform();
                        };
                        self.renderer.scaleTo = function(scale) {
                            self._scale = scale;
                            self._applyTransform();
                        };
                    });
                }
                if (self._useDummyData()) {
                    // development and modeling use-case
                    // need dummy data
                    self._getDummyData(function(data) {
                        self.renderer.result = data;
                        self._loadRequiredLibs(function() {
                            self.generateChart();
                            self.doRefresh();
                        });
                    });
                }
                else {
                    self._loadRequiredLibs(function() {
                        self.generateChart();
                        self.doRefresh();
                    });
                }
            });]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.uuid = generateRandomUuid();
            this._scale = 1;
            this._offset = {
                x : 0,
                y : 0
            };]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div style="width:100%;height:100%;overflow:auto;">
    <style>
        .demo {
            /* for IE10+ touch devices */
            touch-action:none;
        }
        
        .flowchart-demo .StateNode {
            border: 1px solid #346789;
            box-shadow: 2px 2px 19px #aaa;
            -o-box-shadow: 2px 2px 19px #aaa;
            -webkit-box-shadow: 2px 2px 19px #aaa;
            -moz-box-shadow: 2px 2px 19px #aaa;
            -moz-border-radius: 0.5em;
            border-radius: 0.5em;
            opacity: 0.8;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            text-align: center;
            z-index: 20;
            position: absolute;
            background-color: #eeeeef;
            color: black;
            font-family: helvetica, sans-serif;
            padding: 0.5em;
            font-size: 0.9em;
            -webkit-transition: -webkit-box-shadow 0.15s ease-in;
            -moz-transition: -moz-box-shadow 0.15s ease-in;
            -o-transition: -o-box-shadow 0.15s ease-in;
            transition: box-shadow 0.15s ease-in;
        }
        
        .flowchart-demo .StateNode:hover {
            box-shadow: 2px 2px 19px #444;
            -o-box-shadow: 2px 2px 19px #444;
            -webkit-box-shadow: 2px 2px 19px #444;
            -moz-box-shadow: 2px 2px 19px #444;
            opacity: 0.6;
        }
                        
        .flowchart-demo .StateText {
            font-weight: normal;
        }

        .flowchart-demo .StartNode {
            width: 40px;
            height: 40px;
            border: 1px solid #346789;
            box-shadow: 2px 2px 19px #aaa;
            -o-box-shadow: 2px 2px 19px #aaa;
            -webkit-box-shadow: 2px 2px 19px #aaa;
            -moz-box-shadow: 2px 2px 19px #aaa;
            -moz-border-radius: 0.5em;
            border-radius: 40px;
            opacity: 0.8;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            text-align: center;
            z-index: 20;
            position: absolute;
            background-color: #eeeeef;
            color: black;
            font-family: helvetica, sans-serif;
            padding: 0.5em;
            font-size: 0.9em;
            -webkit-transition: -webkit-box-shadow 0.15s ease-in;
            -moz-transition: -moz-box-shadow 0.15s ease-in;
            -o-transition: -o-box-shadow 0.15s ease-in;
            transition: box-shadow 0.15s ease-in;
        }
        
        .flowchart-demo .StartNode:hover {
            box-shadow: 2px 2px 19px #444;
            -o-box-shadow: 2px 2px 19px #444;
            -webkit-box-shadow: 2px 2px 19px #444;
            -moz-box-shadow: 2px 2px 19px #444;
            opacity: 0.6;
        }
                
        .flowchart-demo .StartText {
            font-weight: normal;
        }
        
        .flowchart-demo .StopNode {
            width: 40px;
            height: 40px;
            border: 6px solid #346789;
            box-shadow: 2px 2px 19px #aaa;
            -o-box-shadow: 2px 2px 19px #aaa;
            -webkit-box-shadow: 2px 2px 19px #aaa;
            -moz-box-shadow: 2px 2px 19px #aaa;
            -moz-border-radius: 0.5em;
            border-radius: 40px;
            opacity: 0.8;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            text-align: center;
            z-index: 20;
            position: absolute;
            background-color: #eeeeef;
            color: black;
            font-family: helvetica, sans-serif;
            padding: 0.5em;
            font-size: 0.9em;
            -webkit-transition: -webkit-box-shadow 0.15s ease-in;
            -moz-transition: -moz-box-shadow 0.15s ease-in;
            -o-transition: -o-box-shadow 0.15s ease-in;
            transition: box-shadow 0.15s ease-in;
        }
        
        .flowchart-demo .StopNode:hover {
            box-shadow: 2px 2px 19px #444;
            -o-box-shadow: 2px 2px 19px #444;
            -webkit-box-shadow: 2px 2px 19px #444;
            -moz-box-shadow: 2px 2px 19px #444;
            opacity: 0.6;
        }
                
        .flowchart-demo .StopText {
            font-weight: normal;
        }

        .flowchart-demo .GatewayNode {
            width: 40px;
            height: 40px;
            transform: rotate(45deg);
            border: 1px solid #346789;
            box-shadow: 2px 2px 19px #aaa;
            -o-box-shadow: 2px 2px 19px #aaa;
            -webkit-box-shadow: 2px 2px 19px #aaa;
            -moz-box-shadow: 2px 2px 19px #aaa;
            -moz-border-radius: 10px;
            border-radius: 10px;
            opacity: 0.8;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            text-align: center;
            z-index: 20;
            position: absolute;
            background-color: #eeeeef;
            color: black;
            font-family: helvetica, sans-serif;
            padding: 0.5em;
            font-size: 0.9em;
            -webkit-transition: -webkit-box-shadow 0.15s ease-in;
            -moz-transition: -moz-box-shadow 0.15s ease-in;
            -o-transition: -o-box-shadow 0.15s ease-in;
            transition: box-shadow 0.15s ease-in;
        }
        
        .flowchart-demo .GatewayNode:hover {
            box-shadow: 2px 2px 19px #444;
            -o-box-shadow: 2px 2px 19px #444;
            -webkit-box-shadow: 2px 2px 19px #444;
            -moz-box-shadow: 2px 2px 19px #444;
            opacity: 0.6;
        }
        
        .flowchart-demo .GatewayText {
            transform: rotate(-45deg);
            font-weight: normal;
        }

        .flowchart-demo .active {
            border: 1px dotted green;
        }
        
        .flowchart-demo .hover {
            border: 1px dotted red;
        }

        .flowchart-demo .jtk-connector {
            z-index: 4;
        }
        
        .flowchart-demo .jtk-endpoint, .endpointTargetLabel, .endpointSourceLabel {
            z-index: 21;
            cursor: pointer;
        }
        
        .flowchart-demo .aLabel {
            background-color: white;
            padding: 0.4em;
            font: 12px sans-serif;
            color: #444;
            z-index: 21;
            /* border: 1px dotted gray; */
            opacity: 0.8;
            cursor: pointer;
        }
        
        .flowchart-demo .aLabel.jtk-hover {
            background-color: #5C96BC;
            color: white;
            border: 1px solid white;
        }
        
        .window.jtk-connected {
            border: 1px solid green;
        }
        
        .jtk-drag {
            outline: 4px solid pink !important;
        }
        
        path, .jtk-endpoint {
            cursor: pointer;
        }
        
        .jtk-overlay {
            background-color:transparent;
        }
    </style>
    <div id="canvas" style="position:relative;" data-dojo-attach-point='canvasDiv' class="jtk-demo-canvas canvas-wide jtk-surface flowchart-demo jtk-surface-nopan">
        <div data-dojo-attach-point='nodesDiv'>
        </div>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
    </Functions>
    <Services>
    </Services>
    <Resources>
      <Resource uuid="3d3dfe58-cb46-4222-8647-bd103ef1b1d9" name="Sample Model 1" type="application/json" size="2749" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="d5700ad8-de34-4359-82b4-359917e5b494" name="Sample Model 2" type="application/json" size="2445" private="false">
        <Description>
          <![CDATA[without explicit inputs/outputs defined
created based on defined links]]>
        </Description>
      </Resource>
      <Resource uuid="ac15347f-e60f-44dd-84f6-dfad6a6593a4" name="Sample Model 3" type="text/plain" size="2645" private="false">
        <Description>
          <![CDATA[add gateway]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>